syntax = "proto3";

package io.eventter.mq;

import "client/eventtermq.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "mq";

message ClusterState {
    uint64 index = 1;
    uint64 current_segment_id = 2 [(gogoproto.customname) = "CurrentSegmentID"];
    repeated ClusterNamespace namespaces = 3;
    repeated ClusterSegment open_segments = 4;
    repeated ClusterSegment closed_segments = 5;
    repeated ClusterNode nodes = 6;
}

message ClusterNamespace {
    string name = 1;
    repeated ClusterTopic topics = 2;
    repeated ClusterConsumerGroup consumer_groups = 3;
}

message ClusterTopic {
    string name = 1;
    string type = 2;
    uint32 shards = 3;
    uint32 replication_factor = 4;
    google.protobuf.Duration retention = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

message ClusterConsumerGroup {
    string name = 1;
    repeated Binding bindings = 2;
    uint32 shards = 3;

    message Binding {
        string topic_name = 1;
        string routing_key = 2;
    }
}

message ClusterSegment {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    NamespaceName topic = 2 [(gogoproto.nullable) = false];
    google.protobuf.Timestamp opened_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    google.protobuf.Timestamp closed_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    Nodes nodes = 5 [(gogoproto.nullable) = false];
    uint64 size = 6;
    bytes sha1 = 7;

    message Nodes {
        uint64 primary_node_id = 1 [(gogoproto.customname) = "PrimaryNodeID"];
        repeated uint64 replicating_node_ids = 2 [(gogoproto.customname) = "ReplicatingNodeIDs"];
        repeated uint64 done_node_ids = 3 [(gogoproto.customname) = "DoneNodeIDs"];
    }
}

message ClusterNode {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    string address = 2;
    State state = 3;
    google.protobuf.Timestamp last_seen_alive = 4 [(gogoproto.stdtime) = true];

    enum State {
        DEAD = 0;
        ALIVE = 1;
    }
}

message OpenSegmentCommand {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    NamespaceName topic = 2 [(gogoproto.nullable) = false];
    google.protobuf.Timestamp opened_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    uint64 primary_node_id = 4 [(gogoproto.customname) = "PrimaryNodeID"];
    repeated uint64 replicating_node_ids = 5 [(gogoproto.customname) = "ReplicatingNodeIDs"];
}

message CloseSegmentCommand {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    uint64 done_node_id = 2 [(gogoproto.customname) = "DoneNodeID"];
    google.protobuf.Timestamp closed_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
    uint64 size = 5;
    bytes sha1 = 6;
}

message UpdateNodeCommand {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    string address = 2;
    ClusterNode.State state = 3;
    google.protobuf.Timestamp last_seen_alive = 4 [(gogoproto.stdtime) = true];
}

message UpdateSegmentNodesCommand {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
    Which which = 2;
    ClusterSegment.Nodes nodes = 3 [(gogoproto.nullable) = false];

    enum Which {
        OPEN = 0;
        CLOSED = 1;
    }
}

message Command {
    oneof command {
        ConfigureTopicRequest configure_topic = 1;
        DeleteTopicRequest delete_topic = 2;
        ConfigureConsumerGroupRequest configure_consumer_group = 3;
        DeleteConsumerGroupRequest delete_consumer_group = 4;
        OpenSegmentCommand open_segment = 5;
        CloseSegmentCommand close_segment = 6;
        UpdateNodeCommand update_node = 7;
        UpdateSegmentNodesCommand update_segment_nodes = 8;
    }
}
