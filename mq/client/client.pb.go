// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.proto

package client

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateNamespaceRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool     `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNamespaceRequest) Reset()         { *m = CreateNamespaceRequest{} }
func (m *CreateNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNamespaceRequest) ProtoMessage()    {}
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{0}
}
func (m *CreateNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceRequest.Merge(dst, src)
}
func (m *CreateNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceRequest proto.InternalMessageInfo

func (m *CreateNamespaceRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *CreateNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type CreateNamespaceResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNamespaceResponse) Reset()         { *m = CreateNamespaceResponse{} }
func (m *CreateNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNamespaceResponse) ProtoMessage()    {}
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{1}
}
func (m *CreateNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceResponse.Merge(dst, src)
}
func (m *CreateNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceResponse proto.InternalMessageInfo

func (m *CreateNamespaceResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *CreateNamespaceResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type DeleteNamespaceRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool     `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNamespaceRequest) Reset()         { *m = DeleteNamespaceRequest{} }
func (m *DeleteNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNamespaceRequest) ProtoMessage()    {}
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{2}
}
func (m *DeleteNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNamespaceRequest.Merge(dst, src)
}
func (m *DeleteNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNamespaceRequest proto.InternalMessageInfo

func (m *DeleteNamespaceRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *DeleteNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type DeleteNamespaceResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNamespaceResponse) Reset()         { *m = DeleteNamespaceResponse{} }
func (m *DeleteNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteNamespaceResponse) ProtoMessage()    {}
func (*DeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{3}
}
func (m *DeleteNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNamespaceResponse.Merge(dst, src)
}
func (m *DeleteNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNamespaceResponse proto.InternalMessageInfo

func (m *DeleteNamespaceResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *DeleteNamespaceResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type NamespaceName struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespaceName) Reset()         { *m = NamespaceName{} }
func (m *NamespaceName) String() string { return proto.CompactTextString(m) }
func (*NamespaceName) ProtoMessage()    {}
func (*NamespaceName) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{4}
}
func (m *NamespaceName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NamespaceName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceName.Merge(dst, src)
}
func (m *NamespaceName) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceName) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceName.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceName proto.InternalMessageInfo

func (m *NamespaceName) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NamespaceName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateTopicRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool     `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	Topic                Topic    `protobuf:"bytes,1,opt,name=topic" json:"topic"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTopicRequest) Reset()         { *m = CreateTopicRequest{} }
func (m *CreateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTopicRequest) ProtoMessage()    {}
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{5}
}
func (m *CreateTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTopicRequest.Merge(dst, src)
}
func (m *CreateTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTopicRequest proto.InternalMessageInfo

func (m *CreateTopicRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *CreateTopicRequest) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic{}
}

type CreateTopicResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTopicResponse) Reset()         { *m = CreateTopicResponse{} }
func (m *CreateTopicResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTopicResponse) ProtoMessage()    {}
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{6}
}
func (m *CreateTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTopicResponse.Merge(dst, src)
}
func (m *CreateTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTopicResponse proto.InternalMessageInfo

func (m *CreateTopicResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *CreateTopicResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Topic struct {
	Name NamespaceName `protobuf:"bytes,1,opt,name=name" json:"name"`
	// AMQP exchange type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Shards limit max number of open segments at the time. Messages are ordered within the shard (segment), however,
	// ordering across shards is not guaranteed. Therefore, for strict ordering (and lower throughput) set shard to 1.
	Shards uint32 `protobuf:"varint,3,opt,name=shards,proto3" json:"shards,omitempty"`
	// Number of copies of data throughout the cluster. Not specified / zero means that the server will choose sensible defaults.
	ReplicationFactor uint32 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// If retention is specified, segments will be deleted after they fall off retention period. Zero retention means
	// that segments WON'T be automatically deleted. For segments to be deleted ASAP, use very low retention, i.e. 1 nanosecond.
	Retention            time.Duration `protobuf:"bytes,5,opt,name=retention,stdduration" json:"retention"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{7}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(dst, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetName() NamespaceName {
	if m != nil {
		return m.Name
	}
	return NamespaceName{}
}

func (m *Topic) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Topic) GetShards() uint32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

func (m *Topic) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *Topic) GetRetention() time.Duration {
	if m != nil {
		return m.Retention
	}
	return 0
}

type ListTopicsRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool          `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	Topic                NamespaceName `protobuf:"bytes,1,opt,name=topic" json:"topic"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTopicsRequest) Reset()         { *m = ListTopicsRequest{} }
func (m *ListTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTopicsRequest) ProtoMessage()    {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{8}
}
func (m *ListTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsRequest.Merge(dst, src)
}
func (m *ListTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsRequest proto.InternalMessageInfo

func (m *ListTopicsRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *ListTopicsRequest) GetTopic() NamespaceName {
	if m != nil {
		return m.Topic
	}
	return NamespaceName{}
}

type ListTopicsResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Topics               []*Topic `protobuf:"bytes,3,rep,name=topics" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTopicsResponse) Reset()         { *m = ListTopicsResponse{} }
func (m *ListTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTopicsResponse) ProtoMessage()    {}
func (*ListTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{9}
}
func (m *ListTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsResponse.Merge(dst, src)
}
func (m *ListTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsResponse proto.InternalMessageInfo

func (m *ListTopicsResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *ListTopicsResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ListTopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type DeleteTopicRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly bool          `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	Topic      NamespaceName `protobuf:"bytes,1,opt,name=topic" json:"topic"`
	// If true, topic be deleted only if there are no consumer groups using it.
	IfUnused             bool     `protobuf:"varint,2,opt,name=if_unused,json=ifUnused,proto3" json:"if_unused,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTopicRequest) Reset()         { *m = DeleteTopicRequest{} }
func (m *DeleteTopicRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTopicRequest) ProtoMessage()    {}
func (*DeleteTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{10}
}
func (m *DeleteTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTopicRequest.Merge(dst, src)
}
func (m *DeleteTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTopicRequest proto.InternalMessageInfo

func (m *DeleteTopicRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *DeleteTopicRequest) GetTopic() NamespaceName {
	if m != nil {
		return m.Topic
	}
	return NamespaceName{}
}

func (m *DeleteTopicRequest) GetIfUnused() bool {
	if m != nil {
		return m.IfUnused
	}
	return false
}

type DeleteTopicResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTopicResponse) Reset()         { *m = DeleteTopicResponse{} }
func (m *DeleteTopicResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTopicResponse) ProtoMessage()    {}
func (*DeleteTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{11}
}
func (m *DeleteTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTopicResponse.Merge(dst, src)
}
func (m *DeleteTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTopicResponse proto.InternalMessageInfo

func (m *DeleteTopicResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *DeleteTopicResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type CreateConsumerGroupRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool          `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	ConsumerGroup        ConsumerGroup `protobuf:"bytes,1,opt,name=consumer_group,json=consumerGroup" json:"consumer_group"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreateConsumerGroupRequest) Reset()         { *m = CreateConsumerGroupRequest{} }
func (m *CreateConsumerGroupRequest) String() string { return proto.CompactTextString(m) }
func (*CreateConsumerGroupRequest) ProtoMessage()    {}
func (*CreateConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{12}
}
func (m *CreateConsumerGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateConsumerGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateConsumerGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateConsumerGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsumerGroupRequest.Merge(dst, src)
}
func (m *CreateConsumerGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateConsumerGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsumerGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsumerGroupRequest proto.InternalMessageInfo

func (m *CreateConsumerGroupRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *CreateConsumerGroupRequest) GetConsumerGroup() ConsumerGroup {
	if m != nil {
		return m.ConsumerGroup
	}
	return ConsumerGroup{}
}

type CreateConsumerGroupResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateConsumerGroupResponse) Reset()         { *m = CreateConsumerGroupResponse{} }
func (m *CreateConsumerGroupResponse) String() string { return proto.CompactTextString(m) }
func (*CreateConsumerGroupResponse) ProtoMessage()    {}
func (*CreateConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{13}
}
func (m *CreateConsumerGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateConsumerGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateConsumerGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateConsumerGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateConsumerGroupResponse.Merge(dst, src)
}
func (m *CreateConsumerGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateConsumerGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateConsumerGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateConsumerGroupResponse proto.InternalMessageInfo

func (m *CreateConsumerGroupResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *CreateConsumerGroupResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ConsumerGroup struct {
	Name NamespaceName `protobuf:"bytes,1,opt,name=name" json:"name"`
	// Bindings in conjunction with topic's `type` determine if message will be visible to consumer group.
	Bindings []*ConsumerGroup_Binding `protobuf:"bytes,2,rep,name=bindings" json:"bindings,omitempty"`
	// Max count of in-flight messages across all consumers. Not specified / zero means that the server will choose sensible defaults.
	Size_                uint32   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerGroup) Reset()         { *m = ConsumerGroup{} }
func (m *ConsumerGroup) String() string { return proto.CompactTextString(m) }
func (*ConsumerGroup) ProtoMessage()    {}
func (*ConsumerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{14}
}
func (m *ConsumerGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConsumerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerGroup.Merge(dst, src)
}
func (m *ConsumerGroup) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerGroup proto.InternalMessageInfo

func (m *ConsumerGroup) GetName() NamespaceName {
	if m != nil {
		return m.Name
	}
	return NamespaceName{}
}

func (m *ConsumerGroup) GetBindings() []*ConsumerGroup_Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

func (m *ConsumerGroup) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type ConsumerGroup_Binding struct {
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Types that are valid to be assigned to By:
	//	*ConsumerGroup_Binding_RoutingKey
	//	*ConsumerGroup_Binding_HeadersAll
	//	*ConsumerGroup_Binding_HeadersAny
	By                   isConsumerGroup_Binding_By `protobuf_oneof:"by"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ConsumerGroup_Binding) Reset()         { *m = ConsumerGroup_Binding{} }
func (m *ConsumerGroup_Binding) String() string { return proto.CompactTextString(m) }
func (*ConsumerGroup_Binding) ProtoMessage()    {}
func (*ConsumerGroup_Binding) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{14, 0}
}
func (m *ConsumerGroup_Binding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerGroup_Binding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerGroup_Binding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConsumerGroup_Binding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerGroup_Binding.Merge(dst, src)
}
func (m *ConsumerGroup_Binding) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerGroup_Binding) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerGroup_Binding.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerGroup_Binding proto.InternalMessageInfo

type isConsumerGroup_Binding_By interface {
	isConsumerGroup_Binding_By()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConsumerGroup_Binding_RoutingKey struct {
	RoutingKey string `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3,oneof"`
}
type ConsumerGroup_Binding_HeadersAll struct {
	HeadersAll *types.Struct `protobuf:"bytes,3,opt,name=headers_all,json=headersAll,oneof"`
}
type ConsumerGroup_Binding_HeadersAny struct {
	HeadersAny *types.Struct `protobuf:"bytes,4,opt,name=headers_any,json=headersAny,oneof"`
}

func (*ConsumerGroup_Binding_RoutingKey) isConsumerGroup_Binding_By() {}
func (*ConsumerGroup_Binding_HeadersAll) isConsumerGroup_Binding_By() {}
func (*ConsumerGroup_Binding_HeadersAny) isConsumerGroup_Binding_By() {}

func (m *ConsumerGroup_Binding) GetBy() isConsumerGroup_Binding_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *ConsumerGroup_Binding) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *ConsumerGroup_Binding) GetRoutingKey() string {
	if x, ok := m.GetBy().(*ConsumerGroup_Binding_RoutingKey); ok {
		return x.RoutingKey
	}
	return ""
}

func (m *ConsumerGroup_Binding) GetHeadersAll() *types.Struct {
	if x, ok := m.GetBy().(*ConsumerGroup_Binding_HeadersAll); ok {
		return x.HeadersAll
	}
	return nil
}

func (m *ConsumerGroup_Binding) GetHeadersAny() *types.Struct {
	if x, ok := m.GetBy().(*ConsumerGroup_Binding_HeadersAny); ok {
		return x.HeadersAny
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConsumerGroup_Binding) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConsumerGroup_Binding_OneofMarshaler, _ConsumerGroup_Binding_OneofUnmarshaler, _ConsumerGroup_Binding_OneofSizer, []interface{}{
		(*ConsumerGroup_Binding_RoutingKey)(nil),
		(*ConsumerGroup_Binding_HeadersAll)(nil),
		(*ConsumerGroup_Binding_HeadersAny)(nil),
	}
}

func _ConsumerGroup_Binding_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConsumerGroup_Binding)
	// by
	switch x := m.By.(type) {
	case *ConsumerGroup_Binding_RoutingKey:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RoutingKey)
	case *ConsumerGroup_Binding_HeadersAll:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadersAll); err != nil {
			return err
		}
	case *ConsumerGroup_Binding_HeadersAny:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadersAny); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ConsumerGroup_Binding.By has unexpected type %T", x)
	}
	return nil
}

func _ConsumerGroup_Binding_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConsumerGroup_Binding)
	switch tag {
	case 2: // by.routing_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.By = &ConsumerGroup_Binding_RoutingKey{x}
		return true, err
	case 3: // by.headers_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Struct)
		err := b.DecodeMessage(msg)
		m.By = &ConsumerGroup_Binding_HeadersAll{msg}
		return true, err
	case 4: // by.headers_any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Struct)
		err := b.DecodeMessage(msg)
		m.By = &ConsumerGroup_Binding_HeadersAny{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ConsumerGroup_Binding_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConsumerGroup_Binding)
	// by
	switch x := m.By.(type) {
	case *ConsumerGroup_Binding_RoutingKey:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.RoutingKey)))
		n += len(x.RoutingKey)
	case *ConsumerGroup_Binding_HeadersAll:
		s := proto.Size(x.HeadersAll)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ConsumerGroup_Binding_HeadersAny:
		s := proto.Size(x.HeadersAny)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ListConsumerGroupsRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool          `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	ConsumerGroup        NamespaceName `protobuf:"bytes,1,opt,name=consumer_group,json=consumerGroup" json:"consumer_group"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListConsumerGroupsRequest) Reset()         { *m = ListConsumerGroupsRequest{} }
func (m *ListConsumerGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*ListConsumerGroupsRequest) ProtoMessage()    {}
func (*ListConsumerGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{15}
}
func (m *ListConsumerGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListConsumerGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListConsumerGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListConsumerGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConsumerGroupsRequest.Merge(dst, src)
}
func (m *ListConsumerGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListConsumerGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConsumerGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListConsumerGroupsRequest proto.InternalMessageInfo

func (m *ListConsumerGroupsRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *ListConsumerGroupsRequest) GetConsumerGroup() NamespaceName {
	if m != nil {
		return m.ConsumerGroup
	}
	return NamespaceName{}
}

type ListConsumerGroupsResponse struct {
	OK                   bool             `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64           `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ConsumerGroups       []*ConsumerGroup `protobuf:"bytes,3,rep,name=consumer_groups,json=consumerGroups" json:"consumer_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListConsumerGroupsResponse) Reset()         { *m = ListConsumerGroupsResponse{} }
func (m *ListConsumerGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListConsumerGroupsResponse) ProtoMessage()    {}
func (*ListConsumerGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{16}
}
func (m *ListConsumerGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListConsumerGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListConsumerGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListConsumerGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConsumerGroupsResponse.Merge(dst, src)
}
func (m *ListConsumerGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListConsumerGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConsumerGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConsumerGroupsResponse proto.InternalMessageInfo

func (m *ListConsumerGroupsResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *ListConsumerGroupsResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ListConsumerGroupsResponse) GetConsumerGroups() []*ConsumerGroup {
	if m != nil {
		return m.ConsumerGroups
	}
	return nil
}

type DeleteConsumerGroupRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool          `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	ConsumerGroup        NamespaceName `protobuf:"bytes,1,opt,name=consumer_group,json=consumerGroup" json:"consumer_group"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeleteConsumerGroupRequest) Reset()         { *m = DeleteConsumerGroupRequest{} }
func (m *DeleteConsumerGroupRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteConsumerGroupRequest) ProtoMessage()    {}
func (*DeleteConsumerGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{17}
}
func (m *DeleteConsumerGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteConsumerGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteConsumerGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteConsumerGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteConsumerGroupRequest.Merge(dst, src)
}
func (m *DeleteConsumerGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteConsumerGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteConsumerGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteConsumerGroupRequest proto.InternalMessageInfo

func (m *DeleteConsumerGroupRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *DeleteConsumerGroupRequest) GetConsumerGroup() NamespaceName {
	if m != nil {
		return m.ConsumerGroup
	}
	return NamespaceName{}
}

type DeleteConsumerGroupResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteConsumerGroupResponse) Reset()         { *m = DeleteConsumerGroupResponse{} }
func (m *DeleteConsumerGroupResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteConsumerGroupResponse) ProtoMessage()    {}
func (*DeleteConsumerGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{18}
}
func (m *DeleteConsumerGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteConsumerGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteConsumerGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteConsumerGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteConsumerGroupResponse.Merge(dst, src)
}
func (m *DeleteConsumerGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteConsumerGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteConsumerGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteConsumerGroupResponse proto.InternalMessageInfo

func (m *DeleteConsumerGroupResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func (m *DeleteConsumerGroupResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Message struct {
	RoutingKey           string              `protobuf:"bytes,1,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	Properties           *Message_Properties `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
	Headers              *types.Struct       `protobuf:"bytes,3,opt,name=headers" json:"headers,omitempty"`
	Data                 []byte              `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{19}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

func (m *Message) GetProperties() *Message_Properties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Message) GetHeaders() *types.Struct {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message_Properties struct {
	ContentType          string    `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentEncoding      string    `protobuf:"bytes,2,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	DeliveryMode         int32     `protobuf:"varint,3,opt,name=delivery_mode,json=deliveryMode,proto3" json:"delivery_mode,omitempty"`
	Priority             int32     `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	CorrelationID        string    `protobuf:"bytes,5,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	ReplyTo              string    `protobuf:"bytes,6,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	Expiration           string    `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	MessageID            string    `protobuf:"bytes,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Timestamp            time.Time `protobuf:"bytes,9,opt,name=timestamp,stdtime" json:"timestamp"`
	Type                 string    `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	UserID               string    `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AppID                string    `protobuf:"bytes,12,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Message_Properties) Reset()         { *m = Message_Properties{} }
func (m *Message_Properties) String() string { return proto.CompactTextString(m) }
func (*Message_Properties) ProtoMessage()    {}
func (*Message_Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{19, 0}
}
func (m *Message_Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message_Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message_Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message_Properties.Merge(dst, src)
}
func (m *Message_Properties) XXX_Size() int {
	return m.Size()
}
func (m *Message_Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_Message_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_Message_Properties proto.InternalMessageInfo

func (m *Message_Properties) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Message_Properties) GetContentEncoding() string {
	if m != nil {
		return m.ContentEncoding
	}
	return ""
}

func (m *Message_Properties) GetDeliveryMode() int32 {
	if m != nil {
		return m.DeliveryMode
	}
	return 0
}

func (m *Message_Properties) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Message_Properties) GetCorrelationID() string {
	if m != nil {
		return m.CorrelationID
	}
	return ""
}

func (m *Message_Properties) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *Message_Properties) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

func (m *Message_Properties) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

func (m *Message_Properties) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *Message_Properties) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Message_Properties) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Message_Properties) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

type PublishRequest struct {
	// If true and node cannot write message to segment, request will fail.
	DoNotForward         bool          `protobuf:"varint,99,opt,name=do_not_forward,json=doNotForward,proto3" json:"do_not_forward,omitempty"`
	Topic                NamespaceName `protobuf:"bytes,1,opt,name=topic" json:"topic"`
	Message              *Message      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{20}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(dst, src)
}
func (m *PublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetDoNotForward() bool {
	if m != nil {
		return m.DoNotForward
	}
	return false
}

func (m *PublishRequest) GetTopic() NamespaceName {
	if m != nil {
		return m.Topic
	}
	return NamespaceName{}
}

func (m *PublishRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type PublishResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{21}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(dst, src)
}
func (m *PublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

type SubscribeRequest struct {
	// If true and node does not manage consumer group, request will fail.
	DoNotForward  bool          `protobuf:"varint,99,opt,name=do_not_forward,json=doNotForward,proto3" json:"do_not_forward,omitempty"`
	ConsumerGroup NamespaceName `protobuf:"bytes,1,opt,name=consumer_group,json=consumerGroup" json:"consumer_group"`
	// Max number of messages in-flight. Zero means there is no limit.
	Size_ uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// If true, messages will be acked immediately after being sent.
	AutoAck bool `protobuf:"varint,3,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`
	// If true, response stream will be closed as soon as there are no waiting messages (either to be consumed, or acked).
	DoNotBlock bool `protobuf:"varint,4,opt,name=do_not_block,json=doNotBlock,proto3" json:"do_not_block,omitempty"`
	// If not zero, response stream will be closed as soon as there are no
	MaxMessages          uint64   `protobuf:"varint,5,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{22}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetDoNotForward() bool {
	if m != nil {
		return m.DoNotForward
	}
	return false
}

func (m *SubscribeRequest) GetConsumerGroup() NamespaceName {
	if m != nil {
		return m.ConsumerGroup
	}
	return NamespaceName{}
}

func (m *SubscribeRequest) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *SubscribeRequest) GetAutoAck() bool {
	if m != nil {
		return m.AutoAck
	}
	return false
}

func (m *SubscribeRequest) GetDoNotBlock() bool {
	if m != nil {
		return m.DoNotBlock
	}
	return false
}

func (m *SubscribeRequest) GetMaxMessages() uint64 {
	if m != nil {
		return m.MaxMessages
	}
	return 0
}

type SubscribeResponse struct {
	Topic                NamespaceName `protobuf:"bytes,1,opt,name=topic" json:"topic"`
	Message              *Message      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	NodeID               uint64        `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	SubscriptionID       uint64        `protobuf:"varint,4,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	SeqNo                uint64        `protobuf:"varint,5,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{23}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(dst, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetTopic() NamespaceName {
	if m != nil {
		return m.Topic
	}
	return NamespaceName{}
}

func (m *SubscribeResponse) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SubscribeResponse) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *SubscribeResponse) GetSubscriptionID() uint64 {
	if m != nil {
		return m.SubscriptionID
	}
	return 0
}

func (m *SubscribeResponse) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

type AckRequest struct {
	// If true and node does not manage consumer group, request will fail.
	DoNotForward         bool     `protobuf:"varint,99,opt,name=do_not_forward,json=doNotForward,proto3" json:"do_not_forward,omitempty"`
	NodeID               uint64   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	SubscriptionID       uint64   `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	SeqNo                uint64   `protobuf:"varint,3,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{24}
}
func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(dst, src)
}
func (m *AckRequest) XXX_Size() int {
	return m.Size()
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetDoNotForward() bool {
	if m != nil {
		return m.DoNotForward
	}
	return false
}

func (m *AckRequest) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *AckRequest) GetSubscriptionID() uint64 {
	if m != nil {
		return m.SubscriptionID
	}
	return 0
}

func (m *AckRequest) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

type AckResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{25}
}
func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(dst, src)
}
func (m *AckResponse) XXX_Size() int {
	return m.Size()
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

func (m *AckResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

type NackRequest struct {
	// If true and node does not manage consumer group, request will fail.
	DoNotForward         bool     `protobuf:"varint,99,opt,name=do_not_forward,json=doNotForward,proto3" json:"do_not_forward,omitempty"`
	NodeID               uint64   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	SubscriptionID       uint64   `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	SeqNo                uint64   `protobuf:"varint,3,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NackRequest) Reset()         { *m = NackRequest{} }
func (m *NackRequest) String() string { return proto.CompactTextString(m) }
func (*NackRequest) ProtoMessage()    {}
func (*NackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{26}
}
func (m *NackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NackRequest.Merge(dst, src)
}
func (m *NackRequest) XXX_Size() int {
	return m.Size()
}
func (m *NackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NackRequest proto.InternalMessageInfo

func (m *NackRequest) GetDoNotForward() bool {
	if m != nil {
		return m.DoNotForward
	}
	return false
}

func (m *NackRequest) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NackRequest) GetSubscriptionID() uint64 {
	if m != nil {
		return m.SubscriptionID
	}
	return 0
}

func (m *NackRequest) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

type NackResponse struct {
	OK                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NackResponse) Reset()         { *m = NackResponse{} }
func (m *NackResponse) String() string { return proto.CompactTextString(m) }
func (*NackResponse) ProtoMessage()    {}
func (*NackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_e264e494fd74b039, []int{27}
}
func (m *NackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NackResponse.Merge(dst, src)
}
func (m *NackResponse) XXX_Size() int {
	return m.Size()
}
func (m *NackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NackResponse proto.InternalMessageInfo

func (m *NackResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

func init() {
	proto.RegisterType((*CreateNamespaceRequest)(nil), "io.eventter.mq.CreateNamespaceRequest")
	proto.RegisterType((*CreateNamespaceResponse)(nil), "io.eventter.mq.CreateNamespaceResponse")
	proto.RegisterType((*DeleteNamespaceRequest)(nil), "io.eventter.mq.DeleteNamespaceRequest")
	proto.RegisterType((*DeleteNamespaceResponse)(nil), "io.eventter.mq.DeleteNamespaceResponse")
	proto.RegisterType((*NamespaceName)(nil), "io.eventter.mq.NamespaceName")
	proto.RegisterType((*CreateTopicRequest)(nil), "io.eventter.mq.CreateTopicRequest")
	proto.RegisterType((*CreateTopicResponse)(nil), "io.eventter.mq.CreateTopicResponse")
	proto.RegisterType((*Topic)(nil), "io.eventter.mq.Topic")
	proto.RegisterType((*ListTopicsRequest)(nil), "io.eventter.mq.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResponse)(nil), "io.eventter.mq.ListTopicsResponse")
	proto.RegisterType((*DeleteTopicRequest)(nil), "io.eventter.mq.DeleteTopicRequest")
	proto.RegisterType((*DeleteTopicResponse)(nil), "io.eventter.mq.DeleteTopicResponse")
	proto.RegisterType((*CreateConsumerGroupRequest)(nil), "io.eventter.mq.CreateConsumerGroupRequest")
	proto.RegisterType((*CreateConsumerGroupResponse)(nil), "io.eventter.mq.CreateConsumerGroupResponse")
	proto.RegisterType((*ConsumerGroup)(nil), "io.eventter.mq.ConsumerGroup")
	proto.RegisterType((*ConsumerGroup_Binding)(nil), "io.eventter.mq.ConsumerGroup.Binding")
	proto.RegisterType((*ListConsumerGroupsRequest)(nil), "io.eventter.mq.ListConsumerGroupsRequest")
	proto.RegisterType((*ListConsumerGroupsResponse)(nil), "io.eventter.mq.ListConsumerGroupsResponse")
	proto.RegisterType((*DeleteConsumerGroupRequest)(nil), "io.eventter.mq.DeleteConsumerGroupRequest")
	proto.RegisterType((*DeleteConsumerGroupResponse)(nil), "io.eventter.mq.DeleteConsumerGroupResponse")
	proto.RegisterType((*Message)(nil), "io.eventter.mq.Message")
	proto.RegisterType((*Message_Properties)(nil), "io.eventter.mq.Message.Properties")
	proto.RegisterType((*PublishRequest)(nil), "io.eventter.mq.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "io.eventter.mq.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "io.eventter.mq.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "io.eventter.mq.SubscribeResponse")
	proto.RegisterType((*AckRequest)(nil), "io.eventter.mq.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "io.eventter.mq.AckResponse")
	proto.RegisterType((*NackRequest)(nil), "io.eventter.mq.NackRequest")
	proto.RegisterType((*NackResponse)(nil), "io.eventter.mq.NackResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventterMQ service

type EventterMQClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error)
	ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error)
	DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventterMQ_SubscribeClient, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error)
}

type eventterMQClient struct {
	cc *grpc.ClientConn
}

func NewEventterMQClient(cc *grpc.ClientConn) EventterMQClient {
	return &eventterMQClient{cc}
}

func (c *eventterMQClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	out := new(DeleteTopicResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) CreateConsumerGroup(ctx context.Context, in *CreateConsumerGroupRequest, opts ...grpc.CallOption) (*CreateConsumerGroupResponse, error) {
	out := new(CreateConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/CreateConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error) {
	out := new(ListConsumerGroupsResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/ListConsumerGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*DeleteConsumerGroupResponse, error) {
	out := new(DeleteConsumerGroupResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/DeleteConsumerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventterMQ_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventterMQ_serviceDesc.Streams[0], "/io.eventter.mq.EventterMQ/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventterMQSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventterMQ_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type eventterMQSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventterMQSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventterMQClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventterMQClient) Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error) {
	out := new(NackResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.EventterMQ/Nack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventterMQ service

type EventterMQServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error)
	CreateConsumerGroup(context.Context, *CreateConsumerGroupRequest) (*CreateConsumerGroupResponse, error)
	ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error)
	DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*DeleteConsumerGroupResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, EventterMQ_SubscribeServer) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	Nack(context.Context, *NackRequest) (*NackResponse, error)
}

func RegisterEventterMQServer(s *grpc.Server, srv EventterMQServer) {
	s.RegisterService(&_EventterMQ_serviceDesc, srv)
}

func _EventterMQ_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_CreateConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).CreateConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/CreateConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).CreateConsumerGroup(ctx, req.(*CreateConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_ListConsumerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).ListConsumerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/ListConsumerGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).ListConsumerGroups(ctx, req.(*ListConsumerGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_DeleteConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).DeleteConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/DeleteConsumerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).DeleteConsumerGroup(ctx, req.(*DeleteConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventterMQServer).Subscribe(m, &eventterMQSubscribeServer{stream})
}

type EventterMQ_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type eventterMQSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventterMQSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventterMQ_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventterMQ_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventterMQServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.EventterMQ/Nack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventterMQServer).Nack(ctx, req.(*NackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventterMQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.eventter.mq.EventterMQ",
	HandlerType: (*EventterMQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _EventterMQ_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _EventterMQ_DeleteNamespace_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _EventterMQ_CreateTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _EventterMQ_ListTopics_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _EventterMQ_DeleteTopic_Handler,
		},
		{
			MethodName: "CreateConsumerGroup",
			Handler:    _EventterMQ_CreateConsumerGroup_Handler,
		},
		{
			MethodName: "ListConsumerGroups",
			Handler:    _EventterMQ_ListConsumerGroups_Handler,
		},
		{
			MethodName: "DeleteConsumerGroup",
			Handler:    _EventterMQ_DeleteConsumerGroup_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _EventterMQ_Publish_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _EventterMQ_Ack_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _EventterMQ_Nack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventterMQ_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client.proto",
}

func (m *CreateNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *DeleteNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *NamespaceName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *CreateTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Topic.Size()))
	n1, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Name.Size()))
	n2, err := m.Name.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Shards != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Shards))
	}
	if m.ReplicationFactor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.ReplicationFactor))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClient(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Retention)))
	n3, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Retention, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *ListTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Topic.Size()))
	n4, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	if len(m.Topics) > 0 {
		for _, msg := range m.Topics {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Topic.Size()))
	n5, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.IfUnused {
		dAtA[i] = 0x10
		i++
		if m.IfUnused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *CreateConsumerGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateConsumerGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.ConsumerGroup.Size()))
	n6, err := m.ConsumerGroup.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateConsumerGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateConsumerGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *ConsumerGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Name.Size()))
	n7, err := m.Name.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Bindings) > 0 {
		for _, msg := range m.Bindings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *ConsumerGroup_Binding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerGroup_Binding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	if m.By != nil {
		nn8, err := m.By.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *ConsumerGroup_Binding_RoutingKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintClient(dAtA, i, uint64(len(m.RoutingKey)))
	i += copy(dAtA[i:], m.RoutingKey)
	return i, nil
}
func (m *ConsumerGroup_Binding_HeadersAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeadersAll != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.HeadersAll.Size()))
		n9, err := m.HeadersAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ConsumerGroup_Binding_HeadersAny) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeadersAny != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.HeadersAny.Size()))
		n10, err := m.HeadersAny.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *ListConsumerGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListConsumerGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.ConsumerGroup.Size()))
	n11, err := m.ConsumerGroup.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListConsumerGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListConsumerGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	if len(m.ConsumerGroups) > 0 {
		for _, msg := range m.ConsumerGroups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteConsumerGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteConsumerGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.ConsumerGroup.Size()))
	n12, err := m.ConsumerGroup.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeleteConsumerGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteConsumerGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoutingKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.RoutingKey)))
		i += copy(dAtA[i:], m.RoutingKey)
	}
	if m.Properties != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Properties.Size()))
		n13, err := m.Properties.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Headers != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Headers.Size()))
		n14, err := m.Headers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Message_Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message_Properties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContentType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	if len(m.ContentEncoding) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.ContentEncoding)))
		i += copy(dAtA[i:], m.ContentEncoding)
	}
	if m.DeliveryMode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.DeliveryMode))
	}
	if m.Priority != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Priority))
	}
	if len(m.CorrelationID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.CorrelationID)))
		i += copy(dAtA[i:], m.CorrelationID)
	}
	if len(m.ReplyTo) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.ReplyTo)))
		i += copy(dAtA[i:], m.ReplyTo)
	}
	if len(m.Expiration) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Expiration)))
		i += copy(dAtA[i:], m.Expiration)
	}
	if len(m.MessageID) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.MessageID)))
		i += copy(dAtA[i:], m.MessageID)
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintClient(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)))
	n15, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Type) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.AppID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	return i, nil
}

func (m *PublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Topic.Size()))
	n16, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Message.Size()))
		n17, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.DoNotForward {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.DoNotForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.ConsumerGroup.Size()))
	n18, err := m.ConsumerGroup.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Size_))
	}
	if m.AutoAck {
		dAtA[i] = 0x18
		i++
		if m.AutoAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DoNotBlock {
		dAtA[i] = 0x20
		i++
		if m.DoNotBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxMessages != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.MaxMessages))
	}
	if m.DoNotForward {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.DoNotForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintClient(dAtA, i, uint64(m.Topic.Size()))
	n19, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Message.Size()))
		n20, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.NodeID))
	}
	if m.SubscriptionID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.SubscriptionID))
	}
	if m.SeqNo != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.SeqNo))
	}
	return i, nil
}

func (m *AckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.NodeID))
	}
	if m.SubscriptionID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.SubscriptionID))
	}
	if m.SeqNo != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.SeqNo))
	}
	if m.DoNotForward {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.DoNotForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.NodeID))
	}
	if m.SubscriptionID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.SubscriptionID))
	}
	if m.SeqNo != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.SeqNo))
	}
	if m.DoNotForward {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.DoNotForward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OK {
		dAtA[i] = 0x8
		i++
		if m.OK {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateNamespaceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *CreateNamespaceResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	return n
}

func (m *DeleteNamespaceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *DeleteNamespaceResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	return n
}

func (m *NamespaceName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *CreateTopicRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Topic.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *CreateTopicResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	return n
}

func (m *Topic) Size() (n int) {
	var l int
	_ = l
	l = m.Name.Size()
	n += 1 + l + sovClient(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Shards != 0 {
		n += 1 + sovClient(uint64(m.Shards))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovClient(uint64(m.ReplicationFactor))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Retention)
	n += 1 + l + sovClient(uint64(l))
	return n
}

func (m *ListTopicsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Topic.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *ListTopicsResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *DeleteTopicRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Topic.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.IfUnused {
		n += 2
	}
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *DeleteTopicResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	return n
}

func (m *CreateConsumerGroupRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ConsumerGroup.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *CreateConsumerGroupResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	return n
}

func (m *ConsumerGroup) Size() (n int) {
	var l int
	_ = l
	l = m.Name.Size()
	n += 1 + l + sovClient(uint64(l))
	if len(m.Bindings) > 0 {
		for _, e := range m.Bindings {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if m.Size_ != 0 {
		n += 1 + sovClient(uint64(m.Size_))
	}
	return n
}

func (m *ConsumerGroup_Binding) Size() (n int) {
	var l int
	_ = l
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.By != nil {
		n += m.By.Size()
	}
	return n
}

func (m *ConsumerGroup_Binding_RoutingKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoutingKey)
	n += 1 + l + sovClient(uint64(l))
	return n
}
func (m *ConsumerGroup_Binding_HeadersAll) Size() (n int) {
	var l int
	_ = l
	if m.HeadersAll != nil {
		l = m.HeadersAll.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ConsumerGroup_Binding_HeadersAny) Size() (n int) {
	var l int
	_ = l
	if m.HeadersAny != nil {
		l = m.HeadersAny.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}
func (m *ListConsumerGroupsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ConsumerGroup.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *ListConsumerGroupsResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	if len(m.ConsumerGroups) > 0 {
		for _, e := range m.ConsumerGroups {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *DeleteConsumerGroupRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ConsumerGroup.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *DeleteConsumerGroupResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	if m.Index != 0 {
		n += 1 + sovClient(uint64(m.Index))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoutingKey)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *Message_Properties) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ContentEncoding)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.DeliveryMode != 0 {
		n += 1 + sovClient(uint64(m.DeliveryMode))
	}
	if m.Priority != 0 {
		n += 1 + sovClient(uint64(m.Priority))
	}
	l = len(m.CorrelationID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.ReplyTo)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Expiration)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.MessageID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovClient(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *PublishRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Topic.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.DoNotForward {
		n += 3
	}
	return n
}

func (m *PublishResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ConsumerGroup.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovClient(uint64(m.Size_))
	}
	if m.AutoAck {
		n += 2
	}
	if m.DoNotBlock {
		n += 2
	}
	if m.MaxMessages != 0 {
		n += 1 + sovClient(uint64(m.MaxMessages))
	}
	if m.DoNotForward {
		n += 3
	}
	return n
}

func (m *SubscribeResponse) Size() (n int) {
	var l int
	_ = l
	l = m.Topic.Size()
	n += 1 + l + sovClient(uint64(l))
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovClient(uint64(l))
	}
	if m.NodeID != 0 {
		n += 1 + sovClient(uint64(m.NodeID))
	}
	if m.SubscriptionID != 0 {
		n += 1 + sovClient(uint64(m.SubscriptionID))
	}
	if m.SeqNo != 0 {
		n += 1 + sovClient(uint64(m.SeqNo))
	}
	return n
}

func (m *AckRequest) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovClient(uint64(m.NodeID))
	}
	if m.SubscriptionID != 0 {
		n += 1 + sovClient(uint64(m.SubscriptionID))
	}
	if m.SeqNo != 0 {
		n += 1 + sovClient(uint64(m.SeqNo))
	}
	if m.DoNotForward {
		n += 3
	}
	return n
}

func (m *AckResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	return n
}

func (m *NackRequest) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovClient(uint64(m.NodeID))
	}
	if m.SubscriptionID != 0 {
		n += 1 + sovClient(uint64(m.SubscriptionID))
	}
	if m.SeqNo != 0 {
		n += 1 + sovClient(uint64(m.SeqNo))
	}
	if m.DoNotForward {
		n += 3
	}
	return n
}

func (m *NackResponse) Size() (n int) {
	var l int
	_ = l
	if m.OK {
		n += 2
	}
	return n
}

func sovClient(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Retention, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfUnused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfUnused = bool(v != 0)
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateConsumerGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateConsumerGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateConsumerGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsumerGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateConsumerGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateConsumerGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateConsumerGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bindings = append(m.Bindings, &ConsumerGroup_Binding{})
			if err := m.Bindings[len(m.Bindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerGroup_Binding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.By = &ConsumerGroup_Binding_RoutingKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.By = &ConsumerGroup_Binding_HeadersAll{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersAny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.By = &ConsumerGroup_Binding_HeadersAny{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListConsumerGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListConsumerGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListConsumerGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsumerGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListConsumerGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListConsumerGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListConsumerGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerGroups = append(m.ConsumerGroups, &ConsumerGroup{})
			if err := m.ConsumerGroups[len(m.ConsumerGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteConsumerGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteConsumerGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteConsumerGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsumerGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteConsumerGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteConsumerGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteConsumerGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutingKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &Message_Properties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &types.Struct{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message_Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryMode", wireType)
			}
			m.DeliveryMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryMode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expiration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsumerGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoAck = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotBlock = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMessages", wireType)
			}
			m.MaxMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMessages |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			m.SubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			m.SubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			m.SubscriptionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotForward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotForward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OK", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OK = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClient
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClient(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClient = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("client.proto", fileDescriptor_client_e264e494fd74b039) }

var fileDescriptor_client_e264e494fd74b039 = []byte{
	// 1704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6f, 0xdb, 0xca,
	0x11, 0x0f, 0x65, 0x7d, 0x8e, 0x3e, 0x1c, 0x6f, 0xf3, 0x21, 0xd3, 0x89, 0x65, 0xd3, 0x4d, 0xe2,
	0xb8, 0x8d, 0x54, 0xbb, 0x28, 0xd2, 0xa6, 0xe8, 0xc1, 0xb2, 0x93, 0x54, 0x75, 0xed, 0x24, 0x8c,
	0x83, 0x02, 0xbd, 0x10, 0x14, 0xb9, 0x96, 0x09, 0x49, 0x5c, 0x9a, 0xa4, 0x52, 0xab, 0x41, 0x2e,
	0x2d, 0x50, 0xb4, 0x87, 0x02, 0xe9, 0x17, 0xd0, 0x3f, 0xa0, 0xb7, 0xb6, 0x7f, 0x42, 0xef, 0xe9,
	0xad, 0x40, 0xcf, 0x55, 0x0b, 0xf5, 0xdd, 0xde, 0x3f, 0xf0, 0xf0, 0x4e, 0x0f, 0xbb, 0x5c, 0x4a,
	0xa4, 0x44, 0xc9, 0x8a, 0x92, 0x3c, 0xe0, 0xdd, 0xb8, 0x33, 0xb3, 0x3b, 0xbf, 0x99, 0x9d, 0xd9,
	0x99, 0x21, 0xe4, 0xb4, 0x96, 0x81, 0x4d, 0xb7, 0x6c, 0xd9, 0xc4, 0x25, 0xa8, 0x60, 0x90, 0x32,
	0x7e, 0x89, 0x4d, 0xd7, 0xc5, 0x76, 0xb9, 0x7d, 0x26, 0x5e, 0x69, 0x90, 0x06, 0x61, 0xac, 0x0a,
	0xfd, 0xf2, 0xa4, 0xc4, 0x1b, 0x0d, 0x42, 0x1a, 0x2d, 0x5c, 0x51, 0x2d, 0xa3, 0xa2, 0x9a, 0x26,
	0x71, 0x55, 0xd7, 0x20, 0xa6, 0xc3, 0xb9, 0xab, 0x9c, 0xcb, 0x56, 0xf5, 0xce, 0x49, 0x45, 0xef,
	0xd8, 0x4c, 0x60, 0x64, 0xf7, 0x80, 0xef, 0xb8, 0x76, 0x47, 0xe3, 0x08, 0xc4, 0xd2, 0x28, 0xd7,
	0x35, 0xda, 0xd8, 0x71, 0xd5, 0xb6, 0xe5, 0x09, 0x48, 0x3f, 0x81, 0x6b, 0x7b, 0x36, 0x56, 0x5d,
	0x7c, 0xa4, 0xb6, 0xb1, 0x63, 0xa9, 0x1a, 0x96, 0xf1, 0x59, 0x07, 0x3b, 0x2e, 0xba, 0x01, 0x19,
	0xd3, 0xa7, 0x15, 0x85, 0x35, 0x61, 0x33, 0x23, 0x0f, 0x09, 0xa8, 0x04, 0xd9, 0x16, 0x56, 0x75,
	0x6c, 0x2b, 0xc4, 0x6c, 0x75, 0x8b, 0xda, 0x9a, 0xb0, 0x99, 0x96, 0xc1, 0x23, 0x3d, 0x31, 0x5b,
	0x5d, 0xe9, 0x31, 0x5c, 0x1f, 0x3b, 0xd8, 0xb1, 0x88, 0xe9, 0x60, 0x74, 0x0d, 0x62, 0xa4, 0xc9,
	0x8e, 0x4c, 0x57, 0x93, 0xfd, 0x5e, 0x29, 0xf6, 0xe4, 0x40, 0x8e, 0x91, 0x26, 0xba, 0x02, 0x09,
	0xc3, 0xd4, 0xf1, 0x79, 0x31, 0xb6, 0x26, 0x6c, 0xc6, 0x65, 0x6f, 0x41, 0x11, 0xee, 0xe3, 0x16,
	0xfe, 0x28, 0x08, 0xc7, 0x0e, 0x9e, 0x0b, 0xe1, 0x2e, 0xe4, 0x07, 0x47, 0xd0, 0x8f, 0x0b, 0x80,
	0x21, 0x88, 0xd3, 0x05, 0x3b, 0x23, 0x23, 0xb3, 0x6f, 0xe9, 0x14, 0x90, 0xe7, 0xad, 0x63, 0x62,
	0x19, 0x9a, 0x6f, 0xe0, 0x36, 0x24, 0x5c, 0xba, 0x66, 0x67, 0x64, 0x77, 0xae, 0x96, 0xc3, 0xf1,
	0x54, 0x66, 0xc2, 0xd5, 0xf8, 0xdb, 0x5e, 0xe9, 0x92, 0xec, 0x49, 0x5e, 0x6c, 0xf5, 0x1e, 0x7c,
	0x2d, 0xa4, 0x69, 0x2e, 0x8b, 0x7b, 0x02, 0x24, 0xd8, 0x7e, 0x74, 0x9f, 0x1b, 0xe3, 0x21, 0xbc,
	0x39, 0x8a, 0x30, 0xe4, 0x17, 0x8e, 0x94, 0x6d, 0xa0, 0x5e, 0x70, 0xbb, 0xd6, 0xc0, 0x0b, 0xf4,
	0x1b, 0x5d, 0x83, 0xa4, 0x73, 0xaa, 0xda, 0xba, 0x53, 0x5c, 0x58, 0x13, 0x36, 0xf3, 0x32, 0x5f,
	0xa1, 0x7b, 0x80, 0x6c, 0x6c, 0xb5, 0x0c, 0x8d, 0x05, 0xbe, 0x72, 0xa2, 0x6a, 0x2e, 0xb1, 0x8b,
	0x71, 0x26, 0xb3, 0x14, 0xe0, 0x3c, 0x62, 0x0c, 0xb4, 0x0b, 0x19, 0x1b, 0xbb, 0xd8, 0xa4, 0xa4,
	0x62, 0x82, 0x01, 0x5b, 0x2e, 0x7b, 0x89, 0x50, 0xf6, 0x13, 0xa1, 0xbc, 0xcf, 0xd3, 0xa8, 0x9a,
	0xa6, 0xa0, 0xfe, 0xfc, 0xdf, 0x92, 0x20, 0x0f, 0x77, 0x49, 0x04, 0x96, 0x7e, 0x6c, 0x38, 0x2e,
	0xb3, 0xd1, 0xf1, 0xaf, 0xe3, 0x7b, 0xe1, 0xeb, 0x98, 0xc9, 0xd8, 0x59, 0xaf, 0xe5, 0x0c, 0x50,
	0x50, 0xe1, 0x3c, 0xb7, 0x82, 0xee, 0x41, 0x92, 0x69, 0xa3, 0xee, 0x5b, 0x98, 0x18, 0x2f, 0x32,
	0x17, 0x92, 0x7e, 0x2b, 0x00, 0xf2, 0x12, 0x20, 0x14, 0x74, 0xef, 0x61, 0xe5, 0x0a, 0x64, 0x8c,
	0x13, 0xa5, 0x63, 0x76, 0x1c, 0xac, 0x33, 0x68, 0x69, 0x39, 0x6d, 0x9c, 0xbc, 0x60, 0xeb, 0x99,
	0x22, 0x33, 0x04, 0x67, 0xae, 0xc8, 0xfc, 0x8d, 0x00, 0xa2, 0x17, 0xdf, 0x7b, 0xc4, 0x74, 0x3a,
	0x6d, 0x6c, 0x3f, 0xb6, 0x49, 0xc7, 0xf2, 0x8d, 0xfb, 0x11, 0x14, 0x34, 0x4e, 0x57, 0x1a, 0x94,
	0x31, 0xc9, 0xca, 0xd0, 0x6e, 0x6e, 0x65, 0x5e, 0x0b, 0x12, 0x2f, 0x36, 0xe8, 0x00, 0x56, 0x22,
	0xa1, 0xcc, 0x65, 0xd8, 0xa7, 0x31, 0xc8, 0x87, 0xce, 0x99, 0x3f, 0xf5, 0x76, 0x21, 0x5d, 0x37,
	0x4c, 0xdd, 0x30, 0x1b, 0x4e, 0x31, 0xc6, 0x22, 0xe5, 0xd6, 0x54, 0xf3, 0xcb, 0x55, 0x4f, 0x5a,
	0x1e, 0x6c, 0xa3, 0xd9, 0xeb, 0x18, 0x3f, 0xc7, 0x3c, 0x4f, 0xd9, 0xb7, 0xf8, 0x4f, 0x01, 0x52,
	0x5c, 0x12, 0xdd, 0x04, 0x60, 0x21, 0xa1, 0x0c, 0x10, 0x66, 0xe4, 0x0c, 0xa3, 0xb0, 0x07, 0x72,
	0x1d, 0xb2, 0x36, 0xe9, 0xb8, 0x86, 0xd9, 0x50, 0x9a, 0xb8, 0xeb, 0xbd, 0x01, 0x3f, 0xbc, 0x24,
	0x03, 0x27, 0x1e, 0xe0, 0x2e, 0x7a, 0x00, 0xd9, 0x53, 0xe6, 0x4a, 0x47, 0x51, 0x5b, 0x2d, 0xa6,
	0x28, 0xbb, 0x73, 0x7d, 0x2c, 0x8d, 0x9f, 0xb3, 0x6a, 0x47, 0xf7, 0x72, 0xe9, 0xdd, 0x56, 0x2b,
	0xb4, 0xd7, 0xec, 0xb2, 0x87, 0x62, 0xb6, 0xbd, 0x66, 0xb7, 0x1a, 0x87, 0x58, 0xbd, 0x2b, 0xfd,
	0x5a, 0x80, 0x65, 0x9a, 0x8f, 0x21, 0x3f, 0x38, 0xef, 0x1c, 0x45, 0x51, 0x77, 0xf0, 0xae, 0x51,
	0xf4, 0x7b, 0x01, 0xc4, 0x28, 0x28, 0x73, 0x3d, 0x11, 0x8f, 0x60, 0x31, 0x8c, 0xdc, 0x7f, 0x2b,
	0xa6, 0x27, 0x80, 0x5c, 0x08, 0x81, 0x76, 0x58, 0x9a, 0x79, 0xc9, 0xfa, 0x7e, 0x69, 0xf6, 0x21,
	0x1c, 0x74, 0x00, 0x2b, 0x91, 0x50, 0xe6, 0x4a, 0xb3, 0x3f, 0x25, 0x20, 0x75, 0x88, 0x1d, 0x47,
	0x6d, 0xb0, 0x0e, 0x22, 0x18, 0xa5, 0x5e, 0x14, 0x07, 0x63, 0xb4, 0x0a, 0x60, 0xd9, 0xc4, 0xc2,
	0xb6, 0x6b, 0x60, 0x87, 0x9d, 0x93, 0xdd, 0x91, 0x46, 0x4d, 0xe4, 0xa7, 0x95, 0x9f, 0x0e, 0x24,
	0xe5, 0xc0, 0x2e, 0xb4, 0x0d, 0x29, 0x1e, 0x7d, 0x17, 0xc4, 0xb8, 0xec, 0xcb, 0xd1, 0xe4, 0xd3,
	0x55, 0x57, 0x65, 0x71, 0x9d, 0x93, 0xd9, 0xb7, 0xf8, 0x9f, 0x05, 0x80, 0xa1, 0x06, 0xb4, 0x0e,
	0x39, 0x8d, 0x98, 0xb4, 0x9a, 0x29, 0xac, 0xca, 0x7a, 0xd8, 0xb3, 0x9c, 0x76, 0x4c, 0x8b, 0xed,
	0x5d, 0xb8, 0xec, 0x8b, 0x60, 0x53, 0x23, 0x34, 0x6d, 0x79, 0x31, 0x5e, 0xe4, 0xf4, 0x87, 0x9c,
	0x8c, 0x36, 0x20, 0xaf, 0xe3, 0x96, 0xf1, 0x12, 0xdb, 0x5d, 0xa5, 0x4d, 0x74, 0x2f, 0xed, 0x13,
	0x72, 0xce, 0x27, 0x1e, 0x12, 0x1d, 0x23, 0x11, 0xd2, 0x96, 0x6d, 0x10, 0xdb, 0x70, 0xbd, 0x8c,
	0x4b, 0xc8, 0x83, 0x35, 0xfa, 0x2e, 0x8d, 0x07, 0xdb, 0xc6, 0x2d, 0xaf, 0x80, 0x1b, 0x3a, 0x2b,
	0xcb, 0x99, 0xea, 0x52, 0xbf, 0x57, 0xca, 0xef, 0x0d, 0x39, 0xb5, 0x7d, 0x7a, 0xfb, 0xc3, 0xa5,
	0x8e, 0x96, 0x21, 0x4d, 0x0b, 0x7c, 0x57, 0x71, 0x49, 0x31, 0xc9, 0xd0, 0xa5, 0xd8, 0xfa, 0x98,
	0xa0, 0x55, 0x00, 0x7c, 0x6e, 0x19, 0x5e, 0x19, 0x2f, 0xa6, 0xbc, 0xdb, 0x19, 0x52, 0xd0, 0x37,
	0x01, 0xda, 0x9e, 0xef, 0xa9, 0xc2, 0x34, 0x53, 0x98, 0xef, 0xf7, 0x4a, 0x19, 0x7e, 0x23, 0xb5,
	0x7d, 0x39, 0xc3, 0x05, 0x6a, 0x3a, 0xaa, 0x42, 0x66, 0xd0, 0x1b, 0x17, 0x33, 0xec, 0x26, 0xc4,
	0xb1, 0x9b, 0x38, 0xf6, 0x25, 0xbc, 0xae, 0xe1, 0x0d, 0xeb, 0x1a, 0x06, 0xdb, 0x06, 0x3d, 0x0d,
	0x04, 0x7a, 0x9a, 0x0d, 0x48, 0x75, 0x1c, 0x6c, 0x53, 0x08, 0x59, 0x06, 0x01, 0xfa, 0xbd, 0x52,
	0xf2, 0x85, 0x83, 0xed, 0xda, 0xbe, 0x9c, 0xa4, 0xac, 0x9a, 0x8e, 0xd6, 0x20, 0xa9, 0x5a, 0x16,
	0x95, 0xc9, 0x31, 0x99, 0x4c, 0xbf, 0x57, 0x4a, 0xec, 0x5a, 0x56, 0x6d, 0x5f, 0x4e, 0xa8, 0x96,
	0x55, 0xd3, 0xa5, 0xbf, 0x08, 0x50, 0x78, 0xda, 0xa9, 0xb7, 0x0c, 0xe7, 0xf4, 0x03, 0x14, 0xea,
	0x6d, 0x48, 0x71, 0xcb, 0x79, 0xd4, 0x5e, 0x9f, 0x10, 0xb5, 0xb2, 0x2f, 0x87, 0xbe, 0x0e, 0x05,
	0x9d, 0x28, 0x26, 0x71, 0x95, 0x13, 0x62, 0xff, 0x4c, 0xb5, 0x75, 0x9e, 0x89, 0x39, 0x9d, 0x1c,
	0x11, 0xf7, 0x91, 0x47, 0x93, 0xee, 0xc2, 0xe2, 0x00, 0xe5, 0xf4, 0xfc, 0x93, 0x3e, 0x13, 0xe0,
	0xf2, 0xf3, 0x4e, 0xdd, 0xd1, 0x6c, 0xa3, 0x8e, 0x3f, 0xc6, 0xc3, 0xe1, 0xd7, 0xa8, 0xd8, 0xb0,
	0x46, 0xd1, 0x70, 0x52, 0x3b, 0x2e, 0x51, 0x54, 0xad, 0xc9, 0x82, 0x38, 0x2d, 0xa7, 0xe8, 0x7a,
	0x57, 0x6b, 0xa2, 0x35, 0xc8, 0x71, 0x03, 0xeb, 0x2d, 0xa2, 0x35, 0x59, 0x0c, 0xa7, 0x65, 0x60,
	0xe6, 0x55, 0x29, 0x85, 0x26, 0x55, 0x5b, 0x3d, 0x57, 0xb8, 0x47, 0x1c, 0x16, 0xc3, 0x71, 0x39,
	0xdb, 0x56, 0xcf, 0xb9, 0xb7, 0x9c, 0x19, 0xbd, 0xf4, 0xb9, 0x00, 0x4b, 0x01, 0xd3, 0xb9, 0xa3,
	0xbe, 0xdc, 0xfb, 0xdc, 0x80, 0x94, 0x49, 0x74, 0x96, 0x1a, 0xd4, 0x11, 0x71, 0x2f, 0x2e, 0x8f,
	0x88, 0x4e, 0xf3, 0x22, 0x49, 0x59, 0x35, 0x1d, 0x7d, 0x1f, 0x16, 0x1d, 0x0f, 0xa7, 0xe5, 0x27,
	0x6e, 0x9c, 0x09, 0xa3, 0x7e, 0xaf, 0x54, 0x78, 0x1e, 0x60, 0xd5, 0xf6, 0xe5, 0x42, 0x50, 0xb4,
	0xa6, 0xa3, 0xab, 0x90, 0x74, 0xf0, 0x99, 0x62, 0x12, 0xee, 0xa8, 0x84, 0x83, 0xcf, 0x8e, 0x88,
	0xf4, 0x57, 0x01, 0x60, 0x57, 0x6b, 0xfa, 0x37, 0x1e, 0xc0, 0x21, 0xbc, 0x0b, 0x8e, 0xd8, 0x1c,
	0x38, 0x16, 0x02, 0x38, 0x66, 0xbc, 0xaa, 0x5b, 0x90, 0x65, 0x60, 0x2f, 0x08, 0xe6, 0xbf, 0x09,
	0x90, 0x3d, 0x52, 0xbf, 0x32, 0x56, 0xdd, 0x86, 0x9c, 0x87, 0x76, 0xba, 0x59, 0x3b, 0xff, 0xc8,
	0x01, 0x3c, 0xe4, 0x51, 0x74, 0xf8, 0x0c, 0x9d, 0xc3, 0xe2, 0xc8, 0x4c, 0x8f, 0x6e, 0x8f, 0xf5,
	0x0d, 0x91, 0x7f, 0x13, 0xc4, 0x3b, 0x17, 0xca, 0x79, 0x50, 0xa4, 0x2b, 0xbf, 0xf8, 0xf7, 0x27,
	0x7f, 0x88, 0x15, 0xc4, 0x5c, 0xe5, 0xd5, 0x60, 0x64, 0x7e, 0x4d, 0x35, 0x8f, 0xcc, 0xea, 0xe3,
	0x9a, 0xa3, 0xff, 0x12, 0x8c, 0x6b, 0x9e, 0x30, 0xf4, 0x4f, 0xd0, 0xfc, 0x2b, 0x01, 0xb2, 0x81,
	0x81, 0x19, 0x49, 0xd1, 0x86, 0x04, 0x47, 0x28, 0x71, 0x63, 0xaa, 0x0c, 0x57, 0x57, 0x66, 0xea,
	0x36, 0xc5, 0xdb, 0x95, 0x57, 0x2c, 0x89, 0xcb, 0x43, 0xa5, 0x15, 0x6f, 0x42, 0x0b, 0x32, 0x5e,
	0xa3, 0x97, 0x00, 0xc3, 0x09, 0x11, 0xad, 0x8f, 0xaa, 0x18, 0x1b, 0x57, 0x45, 0x69, 0x9a, 0x08,
	0x07, 0xb1, 0xce, 0x40, 0xac, 0xa0, 0xe5, 0x89, 0x20, 0x98, 0x03, 0x02, 0x73, 0xd9, 0xb8, 0x03,
	0xc6, 0x67, 0xc8, 0x71, 0x07, 0x44, 0x0c, 0x76, 0xbe, 0x03, 0xb6, 0x66, 0x75, 0xc0, 0xdf, 0x05,
	0xff, 0xd7, 0x45, 0x78, 0x0e, 0xda, 0x8a, 0xf6, 0x76, 0x54, 0x63, 0x2a, 0x7e, 0x63, 0x26, 0x59,
	0x0e, 0xf0, 0x07, 0x0c, 0xe0, 0x7d, 0xf1, 0x3b, 0x95, 0x57, 0xe1, 0xa2, 0x14, 0x44, 0xaa, 0x35,
	0x9c, 0x48, 0xf6, 0x6b, 0xf4, 0x47, 0xc1, 0x9b, 0xe9, 0xc3, 0x8d, 0x3b, 0xba, 0x1b, 0x75, 0x2d,
	0x91, 0x73, 0x86, 0xb8, 0x35, 0x8b, 0x28, 0x07, 0x7b, 0x87, 0x81, 0x5d, 0x47, 0xa5, 0x0b, 0xc0,
	0x32, 0x37, 0x46, 0xf4, 0xcb, 0xe3, 0x6e, 0x9c, 0xdc, 0xdf, 0x8f, 0xbb, 0x71, 0x4a, 0x03, 0xee,
	0xbb, 0x71, 0x6b, 0x4e, 0x37, 0xfe, 0x52, 0x80, 0x14, 0xef, 0x29, 0xd0, 0xea, 0xa8, 0xde, 0x70,
	0x4b, 0x24, 0x96, 0x26, 0xf2, 0x39, 0x96, 0xfb, 0x0c, 0xcb, 0xb6, 0x34, 0x63, 0xcc, 0x3d, 0x18,
	0x94, 0xcb, 0xdf, 0x09, 0x90, 0x19, 0x94, 0x6c, 0xb4, 0x36, 0xaa, 0x67, 0xb4, 0x91, 0x11, 0xd7,
	0xa7, 0x48, 0x84, 0xfd, 0x22, 0xcd, 0xe7, 0x97, 0x6f, 0x09, 0xe8, 0x10, 0x16, 0x68, 0xe3, 0x22,
	0x8e, 0xaa, 0x1a, 0x56, 0x57, 0x71, 0x25, 0x92, 0xc7, 0x01, 0xe4, 0x19, 0x80, 0x94, 0x94, 0xa8,
	0xd0, 0x7e, 0x08, 0x3d, 0x83, 0x38, 0x2d, 0x0a, 0x68, 0x65, 0xbc, 0xf1, 0x18, 0x1e, 0x78, 0x23,
	0x9a, 0xc9, 0x4f, 0x2c, 0xb0, 0x13, 0xd3, 0x52, 0xb2, 0xa2, 0x98, 0xaa, 0xd6, 0xac, 0x16, 0xdf,
	0xf6, 0x57, 0x85, 0x7f, 0xf5, 0x57, 0x85, 0xff, 0xf5, 0x57, 0x85, 0x37, 0xff, 0x5f, 0xbd, 0xf4,
	0xd3, 0xa4, 0xf7, 0x83, 0xbc, 0x9e, 0x64, 0x3d, 0xf5, 0xb7, 0xbf, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x43, 0x6f, 0xb5, 0x7f, 0x31, 0x17, 0x00, 0x00,
}
