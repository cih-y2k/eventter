syntax = "proto3";

package io.eventter.mq;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "client";

message NamespaceName {
    string namespace = 1;
    string name = 2;
}

message CreateTopicRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    Topic topic = 1 [(gogoproto.nullable) = false];
}

message CreateTopicResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
    uint64 index = 2;
}

message Topic {
    NamespaceName name = 1 [(gogoproto.nullable) = false];
    // AMQP exchange type.
    string type = 2;
    // Shards limit max number of open segments at the time. Messages are ordered within the shard (segment), however,
    // ordering across shards is not guaranteed. Therefore, for strict ordering (and lower throughput) set shard to 1.
    uint32 shards = 3;
    // Number of copies of data throughout the cluster. Not specified / zero means that the server will choose sensible defaults.
    uint32 replication_factor = 4;
    // If retention is specified, segments will be deleted after they fall off retention period. Zero retention means
    // that segments WON'T be automatically deleted. For segments to be deleted ASAP, use very low retention, i.e. 1 nanosecond.
    google.protobuf.Duration retention = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}

message ListTopicsRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    NamespaceName topic = 1 [(gogoproto.nullable) = false];
}

message ListTopicsResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
    uint64 index = 2;
    repeated Topic topics = 3;
}

message DeleteTopicRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    NamespaceName topic = 1 [(gogoproto.nullable) = false];
    // If true, topic be deleted only if there are no consumer groups using it.
    bool if_unused = 2;
}

message DeleteTopicResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
    uint64 index = 2;
}

message CreateConsumerGroupRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    ConsumerGroup consumer_group = 1 [(gogoproto.nullable) = false];
}

message CreateConsumerGroupResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
    uint64 index = 2;
}

message ConsumerGroup {
    NamespaceName name = 1 [(gogoproto.nullable) = false];
    // Bindings in conjunction with topic's `type` determine if message will be visible to consumer group.
    repeated Binding bindings = 2;
    message Binding {
        string topic_name = 1;
        oneof by {
            string routing_key = 2;
            google.protobuf.Struct headers_all = 3;
            google.protobuf.Struct headers_any = 4;
        }
    }
    // Max count of in-flight messages across all consumers. Not specified / zero means that the server will choose sensible defaults.
    uint32 size = 3;
}

message ListConsumerGroupsRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    NamespaceName consumer_group = 1 [(gogoproto.nullable) = false];
}

message ListConsumerGroupsResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
    uint64 index = 2;
    repeated ConsumerGroup consumer_groups = 3;
}

message DeleteConsumerGroupRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    NamespaceName consumer_group = 1 [(gogoproto.nullable) = false];
}

message DeleteConsumerGroupResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
    uint64 index = 2;
}

message Message {
    string routing_key = 1;
    Properties properties = 2;
    message Properties {
        string content_type = 1;
        string content_encoding = 2;
        int32 delivery_mode = 3;
        int32 priority = 4;
        string correlation_id = 5 [(gogoproto.customname) = "CorrelationID"];
        string reply_to = 6;
        string expiration = 7;
        string message_id = 8 [(gogoproto.customname) = "MessageID"];
        google.protobuf.Timestamp timestamp = 9 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
        string type = 10;
        string user_id = 11 [(gogoproto.customname) = "UserID"];
        string app_id = 12 [(gogoproto.customname) = "AppID"];
    }
    google.protobuf.Struct headers = 3;
    bytes data = 4;
}

message PublishRequest {
    // If true and node cannot write message to segment, request will fail.
    bool do_not_forward = 99;
    NamespaceName topic = 1 [(gogoproto.nullable) = false];
    Message message = 2;
}

message PublishResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
}

message SubscribeRequest {
    // If true and node does not manage consumer group, request will fail.
    bool do_not_forward = 99;
    NamespaceName consumer_group = 1 [(gogoproto.nullable) = false];
}

message SubscribeResponse {
    NamespaceName topic = 1 [(gogoproto.nullable) = false];
    Message message = 2;
    uint64 node_id = 3 [(gogoproto.customname) = "NodeID"];
    uint64 subscription_id = 4 [(gogoproto.customname) = "SubscriptionID"];
    uint64 seq_no = 5;
}

message AckRequest {
    // If true and node does not manage consumer group, request will fail.
    bool do_not_forward = 99;
    uint64 node_id = 1 [(gogoproto.customname) = "NodeID"];
    uint64 subscription_id = 2 [(gogoproto.customname) = "SubscriptionID"];
    uint64 seq_no = 3;
}

message AckResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
}

message NackRequest {
    // If true and node does not manage consumer group, request will fail.
    bool do_not_forward = 99;
    uint64 node_id = 1 [(gogoproto.customname) = "NodeID"];
    uint64 subscription_id = 2 [(gogoproto.customname) = "SubscriptionID"];
    uint64 seq_no = 3;
}

message NackResponse {
    bool ok = 1 [(gogoproto.customname) = "OK"];
}

service EventterMQ {

    rpc CreateTopic (CreateTopicRequest) returns (CreateTopicResponse) {
        option (google.api.http) = {
            put: "/{topic.namespace}/topics/{topic.name}"
        };
    }

    rpc ListTopics (ListTopicsRequest) returns (ListTopicsResponse) {
        option (google.api.http) = {
            get: "/{topic.namespace}/topics"
        };
    }

    rpc DeleteTopic (DeleteTopicRequest) returns (DeleteTopicResponse) {
        option (google.api.http) = {
            delete: "/{topic.namespace}/topics/{topic.name}"
        };
    }

    rpc CreateConsumerGroup (CreateConsumerGroupRequest) returns (CreateConsumerGroupResponse) {
        option (google.api.http) = {
            put: "/{consumer_group.namespace}/cgs/{consumer_group.name}"
        };
    }

    rpc ListConsumerGroups (ListConsumerGroupsRequest) returns (ListConsumerGroupsResponse) {
        option (google.api.http) = {
            get: "/{consumer_group.namespace}/cgs"
        };
    }

    rpc DeleteConsumerGroup (DeleteConsumerGroupRequest) returns (DeleteConsumerGroupResponse) {
        option (google.api.http) = {
            delete: "/{consumer_group.namespace}/cgs/{consumer_group.name}"
        };
    }

    rpc Publish (PublishRequest) returns (PublishResponse) {
        option (google.api.http) = {
            post: "/{topic.namespace}/topics/{topic.name}"
            body: "message"
        };
    }

    rpc Subscribe (SubscribeRequest) returns (stream SubscribeResponse) {
        option (google.api.http) = {
            post: "/{consumer_group.namespace}/cgs/{consumer_group.name}"
        };
    }

    rpc Ack (AckRequest) returns (AckResponse);

    rpc Nack (NackRequest) returns (NackResponse);

}
