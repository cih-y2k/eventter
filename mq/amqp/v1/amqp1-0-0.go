// Code generated by ./generator/main.go. DO NOT EDIT.
package v1

//go:generate go run ./generator ./amqp1-0-0.go  ./types.bare.xml ./transport.bare.xml ./messaging.bare.xml ./security.bare.xml

import (
	"time"

	"github.com/gogo/protobuf/types"
)

var _ = time.Time{}
var _ = types.Struct{}

type Encoding uint8
type Symbol string
type Descriptor uint64
type Null int
type UUID [16]byte

type Value interface{}

type Frame interface {
	isFrame()
}

type ErrorCondition interface {
	isErrorCondition()
}

type Section interface {
	isSection()
}

type MessageID interface {
	isMessageID()
}

type Address interface {
	isAddress()
}

type DeliveryState interface {
	isDeliveryState()
}

type Outcome interface {
	isOutcome()
}

type DistributionMode interface {
	isDistributionMode()
}

type LifetimePolicy interface {
	isLifetimePolicy()
}

type SASLFrame interface {
	isSASLFrame()
}

const (
	NullEncoding Encoding = 0x40
)

const (
	BooleanEncoding      Encoding = 0x56
	BooleanTrueEncoding  Encoding = 0x41
	BooleanFalseEncoding Encoding = 0x42
)

const (
	UbyteEncoding Encoding = 0x50
)

const (
	UshortEncoding Encoding = 0x60
)

const (
	UintEncoding          Encoding = 0x70
	UintSmalluintEncoding Encoding = 0x52
	UintUint0Encoding     Encoding = 0x43
)

const (
	UlongEncoding           Encoding = 0x80
	UlongSmallulongEncoding Encoding = 0x53
	UlongUlong0Encoding     Encoding = 0x44
)

const (
	ByteEncoding Encoding = 0x51
)

const (
	ShortEncoding Encoding = 0x61
)

const (
	IntEncoding         Encoding = 0x71
	IntSmallintEncoding Encoding = 0x54
)

const (
	LongEncoding          Encoding = 0x81
	LongSmalllongEncoding Encoding = 0x55
)

const (
	FloatIeee754Encoding Encoding = 0x72
)

const (
	DoubleIeee754Encoding Encoding = 0x82
)

const (
	Decimal32Ieee754Encoding Encoding = 0x74
)

const (
	Decimal64Ieee754Encoding Encoding = 0x84
)

const (
	Decimal128Ieee754Encoding Encoding = 0x94
)

const (
	CharUtf32Encoding Encoding = 0x73
)

const (
	TimestampMs64Encoding Encoding = 0x83
)

const (
	UUIDEncoding Encoding = 0x98
)

const (
	BinaryVbin8Encoding  Encoding = 0xa0
	BinaryVbin32Encoding Encoding = 0xb0
)

const (
	StringStr8Utf8Encoding  Encoding = 0xa1
	StringStr32Utf8Encoding Encoding = 0xb1
)

const (
	SymbolSym8Encoding  Encoding = 0xa3
	SymbolSym32Encoding Encoding = 0xb3
)

const (
	ListList0Encoding  Encoding = 0x45
	ListList8Encoding  Encoding = 0xc0
	ListList32Encoding Encoding = 0xd0
)

const (
	MapMap8Encoding  Encoding = 0xc1
	MapMap32Encoding Encoding = 0xd1
)

const (
	ArrayArray8Encoding  Encoding = 0xe0
	ArrayArray32Encoding Encoding = 0xf0
)

const (
	OpenName       Symbol     = "amqp:open:list"
	OpenDescriptor Descriptor = 0x0000000000000010
)

type Open struct {
	ContainerID         string
	Hostname            string
	MaxFrameSize        uint32
	ChannelMax          uint16
	IdleTimeOut         Milliseconds
	OutgoingLocales     []IETFLanguageTag
	IncomingLocales     []IETFLanguageTag
	OfferedCapabilities []Symbol
	DesiredCapabilities []Symbol
	Properties          Fields
}

func (*Open) isFrame() {}

const (
	BeginName       Symbol     = "amqp:begin:list"
	BeginDescriptor Descriptor = 0x0000000000000011
)

type Begin struct {
	RemoteChannel       uint16
	NextOutgoingID      TransferNumber
	IncomingWindow      uint32
	OutgoingWindow      uint32
	HandleMax           Handle
	OfferedCapabilities []Symbol
	DesiredCapabilities []Symbol
	Properties          Fields
}

func (*Begin) isFrame() {}

const (
	AttachName       Symbol     = "amqp:attach:list"
	AttachDescriptor Descriptor = 0x0000000000000012
)

type Attach struct {
	Name                 string
	Handle               Handle
	Role                 Role
	SndSettleMode        SenderSettleMode
	RcvSettleMode        ReceiverSettleMode
	Source               *Source
	Target               *Target
	Unsettled            *types.Struct
	IncompleteUnsettled  bool
	InitialDeliveryCount SequenceNo
	MaxMessageSize       uint64
	OfferedCapabilities  []Symbol
	DesiredCapabilities  []Symbol
	Properties           Fields
}

func (*Attach) isFrame() {}

const (
	FlowName       Symbol     = "amqp:flow:list"
	FlowDescriptor Descriptor = 0x0000000000000013
)

type Flow struct {
	NextIncomingID TransferNumber
	IncomingWindow uint32
	NextOutgoingID TransferNumber
	OutgoingWindow uint32
	Handle         Handle
	DeliveryCount  SequenceNo
	LinkCredit     uint32
	Available      uint32
	Drain          bool
	Echo           bool
	Properties     Fields
}

func (*Flow) isFrame() {}

const (
	TransferName       Symbol     = "amqp:transfer:list"
	TransferDescriptor Descriptor = 0x0000000000000014
)

type Transfer struct {
	Handle        Handle
	DeliveryID    DeliveryNumber
	DeliveryTag   DeliveryTag
	MessageFormat MessageFormat
	Settled       bool
	More          bool
	RcvSettleMode ReceiverSettleMode
	State         DeliveryState
	Resume        bool
	Aborted       bool
	Batchable     bool
}

func (*Transfer) isFrame() {}

const (
	DispositionName       Symbol     = "amqp:disposition:list"
	DispositionDescriptor Descriptor = 0x0000000000000015
)

type Disposition struct {
	Role      Role
	First     DeliveryNumber
	Last      DeliveryNumber
	Settled   bool
	State     DeliveryState
	Batchable bool
}

func (*Disposition) isFrame() {}

const (
	DetachName       Symbol     = "amqp:detach:list"
	DetachDescriptor Descriptor = 0x0000000000000016
)

type Detach struct {
	Handle Handle
	Closed bool
	Error  *Error
}

func (*Detach) isFrame() {}

const (
	EndName       Symbol     = "amqp:end:list"
	EndDescriptor Descriptor = 0x0000000000000017
)

type End struct {
	Error *Error
}

func (*End) isFrame() {}

const (
	CloseName       Symbol     = "amqp:close:list"
	CloseDescriptor Descriptor = 0x0000000000000018
)

type Close struct {
	Error *Error
}

func (*Close) isFrame() {}

const (
	Port = 5672

	SecurePort = 5671

	Major = 1

	Minor = 0

	Revision = 0

	MinMaxFrameSize = 512
)

type Role bool

const (
	SenderRole   Role = false
	ReceiverRole Role = true
)

type SenderSettleMode uint8

const (
	UnsettledSenderSettleMode SenderSettleMode = 0
	SettledSenderSettleMode   SenderSettleMode = 1
	MixedSenderSettleMode     SenderSettleMode = 2
)

type ReceiverSettleMode uint8

const (
	FirstReceiverSettleMode  ReceiverSettleMode = 0
	SecondReceiverSettleMode ReceiverSettleMode = 1
)

type Handle uint32

type Seconds uint32

type Milliseconds uint32

type DeliveryTag []byte

type DeliveryNumber uint32

type TransferNumber uint32

type SequenceNo uint32

type MessageFormat uint32

type IETFLanguageTag Symbol

type Fields types.Struct

const (
	ErrorName       Symbol     = "amqp:error:list"
	ErrorDescriptor Descriptor = 0x000000000000001d
)

type Error struct {
	Condition   Symbol
	Description string
	Info        Fields
}

type AMQPError Symbol

const (
	InternalErrorAMQPError         AMQPError = "amqp:internal-error"
	NotFoundAMQPError              AMQPError = "amqp:not-found"
	UnauthorizedAccessAMQPError    AMQPError = "amqp:unauthorized-access"
	DecodeErrorAMQPError           AMQPError = "amqp:decode-error"
	ResourceLimitExceededAMQPError AMQPError = "amqp:resource-limit-exceeded"
	NotAllowedAMQPError            AMQPError = "amqp:not-allowed"
	InvalidFieldAMQPError          AMQPError = "amqp:invalid-field"
	NotImplementedAMQPError        AMQPError = "amqp:not-implemented"
	ResourceLockedAMQPError        AMQPError = "amqp:resource-locked"
	PreconditionFailedAMQPError    AMQPError = "amqp:precondition-failed"
	ResourceDeletedAMQPError       AMQPError = "amqp:resource-deleted"
	IllegalStateAMQPError          AMQPError = "amqp:illegal-state"
	FrameSizeTooSmallAMQPError     AMQPError = "amqp:frame-size-too-small"
)

func (AMQPError) isErrorCondition() {}

type ConnectionError Symbol

const (
	ConnectionForcedConnectionError ConnectionError = "amqp:connection:forced"
	FramingErrorConnectionError     ConnectionError = "amqp:connection:framing-error"
	RedirectConnectionError         ConnectionError = "amqp:connection:redirect"
)

func (ConnectionError) isErrorCondition() {}

type SessionError Symbol

const (
	WindowViolationSessionError  SessionError = "amqp:session:window-violation"
	ErrantLinkSessionError       SessionError = "amqp:session:errant-link"
	HandleInUseSessionError      SessionError = "amqp:session:handle-in-use"
	UnattachedHandleSessionError SessionError = "amqp:session:unattached-handle"
)

func (SessionError) isErrorCondition() {}

type LinkError Symbol

const (
	DetachForcedLinkError          LinkError = "amqp:link:detach-forced"
	TransferLimitExceededLinkError LinkError = "amqp:link:transfer-limit-exceeded"
	MessageSizeExceededLinkError   LinkError = "amqp:link:message-size-exceeded"
	RedirectLinkError              LinkError = "amqp:link:redirect"
	StolenLinkError                LinkError = "amqp:link:stolen"
)

func (LinkError) isErrorCondition() {}

const ()

const (
	HeaderName       Symbol     = "amqp:header:list"
	HeaderDescriptor Descriptor = 0x0000000000000070
)

type Header struct {
	Durable       bool
	Priority      uint8
	Ttl           Milliseconds
	FirstAcquirer bool
	DeliveryCount uint32
}

func (*Header) isSection() {}

const (
	DeliveryAnnotationsName       Symbol     = "amqp:delivery-annotations:map"
	DeliveryAnnotationsDescriptor Descriptor = 0x0000000000000071
)

type DeliveryAnnotations types.Struct

func (DeliveryAnnotations) isSection() {}

const (
	MessageAnnotationsName       Symbol     = "amqp:message-annotations:map"
	MessageAnnotationsDescriptor Descriptor = 0x0000000000000072
)

type MessageAnnotations types.Struct

func (MessageAnnotations) isSection() {}

const (
	PropertiesName       Symbol     = "amqp:properties:list"
	PropertiesDescriptor Descriptor = 0x0000000000000073
)

type Properties struct {
	MessageID          MessageID
	UserID             []byte
	To                 Address
	Subject            string
	ReplyTo            Address
	CorrelationID      MessageID
	ContentType        Symbol
	ContentEncoding    Symbol
	AbsoluteExpiryTime time.Time
	CreationTime       time.Time
	GroupID            string
	GroupSequence      SequenceNo
	ReplyToGroupID     string
}

func (*Properties) isSection() {}

const (
	ApplicationPropertiesName       Symbol     = "amqp:application-properties:map"
	ApplicationPropertiesDescriptor Descriptor = 0x0000000000000074
)

type ApplicationProperties types.Struct

func (ApplicationProperties) isSection() {}

const (
	DataName       Symbol     = "amqp:data:binary"
	DataDescriptor Descriptor = 0x0000000000000075
)

type Data []byte

func (Data) isSection() {}

const (
	FooterName       Symbol     = "amqp:footer:map"
	FooterDescriptor Descriptor = 0x0000000000000078
)

type Footer types.Struct

func (Footer) isSection() {}

type Annotations types.Struct

type MessageIDUlong uint64

func (MessageIDUlong) isMessageID() {}

type MessageIDUUID UUID

func (MessageIDUUID) isMessageID() {}

type MessageIDBinary []byte

func (MessageIDBinary) isMessageID() {}

type MessageIDString string

func (MessageIDString) isMessageID() {}

type AddressString string

func (AddressString) isAddress() {}

const (
	ReceivedName       Symbol     = "amqp:received:list"
	ReceivedDescriptor Descriptor = 0x0000000000000023
)

type Received struct {
	SectionNumber uint32
	SectionOffset uint64
}

func (*Received) isDeliveryState() {}

const (
	AcceptedName       Symbol     = "amqp:accepted:list"
	AcceptedDescriptor Descriptor = 0x0000000000000024
)

type Accepted struct {
}

func (*Accepted) isDeliveryState() {}

func (*Accepted) isOutcome() {}

const (
	RejectedName       Symbol     = "amqp:rejected:list"
	RejectedDescriptor Descriptor = 0x0000000000000025
)

type Rejected struct {
	Error *Error
}

func (*Rejected) isDeliveryState() {}

func (*Rejected) isOutcome() {}

const (
	ReleasedName       Symbol     = "amqp:released:list"
	ReleasedDescriptor Descriptor = 0x0000000000000026
)

type Released struct {
}

func (*Released) isDeliveryState() {}

func (*Released) isOutcome() {}

const (
	ModifiedName       Symbol     = "amqp:modified:list"
	ModifiedDescriptor Descriptor = 0x0000000000000027
)

type Modified struct {
	DeliveryFailed     bool
	UndeliverableHere  bool
	MessageAnnotations Fields
}

func (*Modified) isDeliveryState() {}

func (*Modified) isOutcome() {}

const (
	SourceName       Symbol     = "amqp:source:list"
	SourceDescriptor Descriptor = 0x0000000000000028
)

type Source struct {
	Address               Address
	Durable               TerminusDurability
	ExpiryPolicy          TerminusExpiryPolicy
	Timeout               Seconds
	Dynamic               bool
	DynamicNodeProperties NodeProperties
	DistributionMode      Symbol
	Filter                FilterSet
	DefaultOutcome        Outcome
	Outcomes              []Symbol
	Capabilities          []Symbol
}

func (*Source) isSource() {}

const (
	TargetName       Symbol     = "amqp:target:list"
	TargetDescriptor Descriptor = 0x0000000000000029
)

type Target struct {
	Address               Address
	Durable               TerminusDurability
	ExpiryPolicy          TerminusExpiryPolicy
	Timeout               Seconds
	Dynamic               bool
	DynamicNodeProperties NodeProperties
	Capabilities          []Symbol
}

func (*Target) isTarget() {}

type TerminusDurability uint32

const (
	NoneTerminusDurability           TerminusDurability = 0
	ConfigurationTerminusDurability  TerminusDurability = 1
	UnsettledStateTerminusDurability TerminusDurability = 2
)

type TerminusExpiryPolicy Symbol

const (
	LinkDetachTerminusExpiryPolicy      TerminusExpiryPolicy = "link-detach"
	SessionEndTerminusExpiryPolicy      TerminusExpiryPolicy = "session-end"
	ConnectionCloseTerminusExpiryPolicy TerminusExpiryPolicy = "connection-close"
	NeverTerminusExpiryPolicy           TerminusExpiryPolicy = "never"
)

type StdDistMode Symbol

const (
	MoveStdDistMode StdDistMode = "move"
	CopyStdDistMode StdDistMode = "copy"
)

func (StdDistMode) isDistributionMode() {}

type FilterSet types.Struct

type NodeProperties types.Struct

const (
	DeleteOnCloseName       Symbol     = "amqp:delete-on-close:list"
	DeleteOnCloseDescriptor Descriptor = 0x000000000000002b
)

type DeleteOnClose struct {
}

func (*DeleteOnClose) isLifetimePolicy() {}

const (
	DeleteOnNoLinksName       Symbol     = "amqp:delete-on-no-links:list"
	DeleteOnNoLinksDescriptor Descriptor = 0x000000000000002c
)

type DeleteOnNoLinks struct {
}

func (*DeleteOnNoLinks) isLifetimePolicy() {}

const (
	DeleteOnNoMessagesName       Symbol     = "amqp:delete-on-no-messages:list"
	DeleteOnNoMessagesDescriptor Descriptor = 0x000000000000002d
)

type DeleteOnNoMessages struct {
}

func (*DeleteOnNoMessages) isLifetimePolicy() {}

const (
	DeleteOnNoLinksOrMessagesName       Symbol     = "amqp:delete-on-no-links-or-messages:list"
	DeleteOnNoLinksOrMessagesDescriptor Descriptor = 0x000000000000002e
)

type DeleteOnNoLinksOrMessages struct {
}

func (*DeleteOnNoLinksOrMessages) isLifetimePolicy() {}

const (
	TLSMajor = 1

	TLSMinor = 0

	TLSRevision = 0
)

const (
	SASLMajor = 1

	SASLMinor = 0

	SASLRevision = 0
)

const (
	SASLMechanismsName       Symbol     = "amqp:sasl-mechanisms:list"
	SASLMechanismsDescriptor Descriptor = 0x0000000000000040
)

type SASLMechanisms struct {
	SASLServerMechanisms []Symbol
}

func (*SASLMechanisms) isSASLFrame() {}

const (
	SASLInitName       Symbol     = "amqp:sasl-init:list"
	SASLInitDescriptor Descriptor = 0x0000000000000041
)

type SASLInit struct {
	Mechanism       Symbol
	InitialResponse []byte
	Hostname        string
}

func (*SASLInit) isSASLFrame() {}

const (
	SASLChallengeName       Symbol     = "amqp:sasl-challenge:list"
	SASLChallengeDescriptor Descriptor = 0x0000000000000042
)

type SASLChallenge struct {
	Challenge []byte
}

func (*SASLChallenge) isSASLFrame() {}

const (
	SASLResponseName       Symbol     = "amqp:sasl-response:list"
	SASLResponseDescriptor Descriptor = 0x0000000000000043
)

type SASLResponse struct {
	Response []byte
}

func (*SASLResponse) isSASLFrame() {}

const (
	SASLOutcomeName       Symbol     = "amqp:sasl-outcome:list"
	SASLOutcomeDescriptor Descriptor = 0x0000000000000044
)

type SASLOutcome struct {
	Code           SASLCode
	AdditionalData []byte
}

func (*SASLOutcome) isSASLFrame() {}

type SASLCode uint8

const (
	OkSASLCode      SASLCode = 0
	AuthSASLCode    SASLCode = 1
	SysSASLCode     SASLCode = 2
	SysPermSASLCode SASLCode = 3
	SysTempSASLCode SASLCode = 4
)
