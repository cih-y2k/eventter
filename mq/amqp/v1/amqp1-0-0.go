// Code generated by ./generator/main.go. DO NOT EDIT.
package v1

//go:generate go run ./generator ./amqp1-0-0.go  ./types.bare.xml ./transport.bare.xml ./messaging.bare.xml ./security.bare.xml

import (
	"bytes"
	"encoding/hex"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"
)

type UUID [16]byte

func (u UUID) String() string {
	var x [36]byte
	hex.Encode(x[:8], u[:4])
	x[8] = '-'
	hex.Encode(x[9:13], u[4:6])
	x[13] = '-'
	hex.Encode(x[14:18], u[6:8])
	x[18] = '-'
	hex.Encode(x[19:23], u[8:10])
	x[23] = '-'
	hex.Encode(x[24:], u[10:])
	return string(x[:])
}

type Frame interface {
	GetFrameMeta() *FrameMeta
	Descriptor() uint64
	MarshalBuffer(buf *bytes.Buffer) error
	UnmarshalBuffer(buf *bytes.Buffer) error
}

type FrameMeta struct {
	Size       uint32
	DataOffset uint8
	Type       uint8
	Channel    uint16
	Payload    []byte
}

type AMQPFrame interface {
	isAMQPFrame()
}

type ErrorCondition interface {
	isErrorCondition()
}

type Section interface {
	isSection()
}

type MessageID interface {
	isMessageID()
}

type Address interface {
	isAddress()
}

type DeliveryState interface {
	isDeliveryState()
}

type Outcome interface {
	isOutcome()
}

type DistributionMode interface {
	isDistributionMode()
}

type LifetimePolicy interface {
	isLifetimePolicy()
}

type SASLFrame interface {
	isSASLFrame()
}

const (
	NullEncoding = 0x40
)

const (
	BooleanEncoding      = 0x56
	BooleanTrueEncoding  = 0x41
	BooleanFalseEncoding = 0x42
)

const (
	UbyteEncoding = 0x50
)

const (
	UshortEncoding = 0x60
)

const (
	UintEncoding          = 0x70
	UintSmalluintEncoding = 0x52
	Uint0Encoding         = 0x43
)

const (
	UlongEncoding           = 0x80
	UlongSmallulongEncoding = 0x53
	Ulong0Encoding          = 0x44
)

const (
	ByteEncoding = 0x51
)

const (
	ShortEncoding = 0x61
)

const (
	IntEncoding         = 0x71
	IntSmallintEncoding = 0x54
)

const (
	LongEncoding          = 0x81
	LongSmalllongEncoding = 0x55
)

const (
	FloatIeee754Encoding = 0x72
)

const (
	DoubleIeee754Encoding = 0x82
)

const (
	Decimal32Ieee754Encoding = 0x74
)

const (
	Decimal64Ieee754Encoding = 0x84
)

const (
	Decimal128Ieee754Encoding = 0x94
)

const (
	CharUtf32Encoding = 0x73
)

const (
	TimestampMs64Encoding = 0x83
)

const (
	UUIDEncoding = 0x98
)

const (
	BinaryVbin8Encoding  = 0xa0
	BinaryVbin32Encoding = 0xb0
)

const (
	StringStr8Utf8Encoding  = 0xa1
	StringStr32Utf8Encoding = 0xb1
)

const (
	SymbolSym8Encoding  = 0xa3
	SymbolSym32Encoding = 0xb3
)

const (
	List0Encoding  = 0x45
	List8Encoding  = 0xc0
	List32Encoding = 0xd0
)

const (
	Map8Encoding  = 0xc1
	Map32Encoding = 0xd1
)

const (
	Array8Encoding  = 0xe0
	Array32Encoding = 0xf0
)

const (
	OpenName       = "amqp:open:list"
	OpenDescriptor = 0x0000000000000010
)

type Open struct {
	FrameMeta
	ContainerID         string
	Hostname            string
	MaxFrameSize        uint32
	ChannelMax          uint16
	IdleTimeOut         Milliseconds
	OutgoingLocales     []IETFLanguageTag
	IncomingLocales     []IETFLanguageTag
	OfferedCapabilities []string
	DesiredCapabilities []string
	Properties          *Fields
}

func (*Open) isAMQPFrame() {}

func (t *Open) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Open) Descriptor() uint64 {
	return OpenDescriptor
}

func (t *Open) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Open) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Open) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Open) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	BeginName       = "amqp:begin:list"
	BeginDescriptor = 0x0000000000000011
)

type Begin struct {
	FrameMeta
	RemoteChannel       uint16
	NextOutgoingID      TransferNumber
	IncomingWindow      uint32
	OutgoingWindow      uint32
	HandleMax           Handle
	OfferedCapabilities []string
	DesiredCapabilities []string
	Properties          *Fields
}

func (*Begin) isAMQPFrame() {}

func (t *Begin) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Begin) Descriptor() uint64 {
	return BeginDescriptor
}

func (t *Begin) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Begin) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Begin) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Begin) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	AttachName       = "amqp:attach:list"
	AttachDescriptor = 0x0000000000000012
)

type Attach struct {
	FrameMeta
	Name                 string
	Handle               Handle
	Role                 Role
	SndSettleMode        SenderSettleMode
	RcvSettleMode        ReceiverSettleMode
	Source               *Source
	Target               *Target
	Unsettled            *types.Struct
	IncompleteUnsettled  bool
	InitialDeliveryCount SequenceNo
	MaxMessageSize       uint64
	OfferedCapabilities  []string
	DesiredCapabilities  []string
	Properties           *Fields
}

func (*Attach) isAMQPFrame() {}

func (t *Attach) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Attach) Descriptor() uint64 {
	return AttachDescriptor
}

func (t *Attach) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Attach) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Attach) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Attach) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	FlowName       = "amqp:flow:list"
	FlowDescriptor = 0x0000000000000013
)

type Flow struct {
	FrameMeta
	NextIncomingID TransferNumber
	IncomingWindow uint32
	NextOutgoingID TransferNumber
	OutgoingWindow uint32
	Handle         Handle
	DeliveryCount  SequenceNo
	LinkCredit     uint32
	Available      uint32
	Drain          bool
	Echo           bool
	Properties     *Fields
}

func (*Flow) isAMQPFrame() {}

func (t *Flow) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Flow) Descriptor() uint64 {
	return FlowDescriptor
}

func (t *Flow) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Flow) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Flow) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Flow) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	TransferName       = "amqp:transfer:list"
	TransferDescriptor = 0x0000000000000014
)

type Transfer struct {
	FrameMeta
	Handle        Handle
	DeliveryID    DeliveryNumber
	DeliveryTag   DeliveryTag
	MessageFormat MessageFormat
	Settled       bool
	More          bool
	RcvSettleMode ReceiverSettleMode
	State         DeliveryState
	Resume        bool
	Aborted       bool
	Batchable     bool
}

func (*Transfer) isAMQPFrame() {}

func (t *Transfer) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Transfer) Descriptor() uint64 {
	return TransferDescriptor
}

func (t *Transfer) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Transfer) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Transfer) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Transfer) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	DispositionName       = "amqp:disposition:list"
	DispositionDescriptor = 0x0000000000000015
)

type Disposition struct {
	FrameMeta
	Role      Role
	First     DeliveryNumber
	Last      DeliveryNumber
	Settled   bool
	State     DeliveryState
	Batchable bool
}

func (*Disposition) isAMQPFrame() {}

func (t *Disposition) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Disposition) Descriptor() uint64 {
	return DispositionDescriptor
}

func (t *Disposition) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Disposition) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Disposition) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Disposition) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	DetachName       = "amqp:detach:list"
	DetachDescriptor = 0x0000000000000016
)

type Detach struct {
	FrameMeta
	Handle Handle
	Closed bool
	Error  *Error
}

func (*Detach) isAMQPFrame() {}

func (t *Detach) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Detach) Descriptor() uint64 {
	return DetachDescriptor
}

func (t *Detach) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Detach) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Detach) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Detach) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	EndName       = "amqp:end:list"
	EndDescriptor = 0x0000000000000017
)

type End struct {
	FrameMeta
	Error *Error
}

func (*End) isAMQPFrame() {}

func (t *End) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *End) Descriptor() uint64 {
	return EndDescriptor
}

func (t *End) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *End) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *End) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *End) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	CloseName       = "amqp:close:list"
	CloseDescriptor = 0x0000000000000018
)

type Close struct {
	FrameMeta
	Error *Error
}

func (*Close) isAMQPFrame() {}

func (t *Close) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *Close) Descriptor() uint64 {
	return CloseDescriptor
}

func (t *Close) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Close) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Close) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Close) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	Port            = 5672
	SecurePort      = 5671
	Major           = 1
	Minor           = 0
	Revision        = 0
	MinMaxFrameSize = 512
)

type Role bool

const (
	SenderRole   Role = false
	ReceiverRole Role = true
)

func (t Role) String() string {
	switch t {
	case SenderRole:
		return "sender"
	case ReceiverRole:
		return "receiver"
	default:
		return "<invalid>"
	}
}

func (t *Role) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Role) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Role) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Role) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalBoolean((*bool)(t), constructor, buf)
}

type SenderSettleMode uint8

const (
	UnsettledSenderSettleMode SenderSettleMode = 0
	SettledSenderSettleMode   SenderSettleMode = 1
	MixedSenderSettleMode     SenderSettleMode = 2
)

func (t SenderSettleMode) String() string {
	switch t {
	case UnsettledSenderSettleMode:
		return "unsettled"
	case SettledSenderSettleMode:
		return "settled"
	case MixedSenderSettleMode:
		return "mixed"
	default:
		return "<invalid>"
	}
}

func (t *SenderSettleMode) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SenderSettleMode) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SenderSettleMode) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SenderSettleMode) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUbyte((*uint8)(t), constructor, buf)
}

type ReceiverSettleMode uint8

const (
	FirstReceiverSettleMode  ReceiverSettleMode = 0
	SecondReceiverSettleMode ReceiverSettleMode = 1
)

func (t ReceiverSettleMode) String() string {
	switch t {
	case FirstReceiverSettleMode:
		return "first"
	case SecondReceiverSettleMode:
		return "second"
	default:
		return "<invalid>"
	}
}

func (t *ReceiverSettleMode) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *ReceiverSettleMode) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *ReceiverSettleMode) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *ReceiverSettleMode) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUbyte((*uint8)(t), constructor, buf)
}

type Handle uint32

func (t *Handle) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Handle) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Handle) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Handle) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type Seconds uint32

func (t *Seconds) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Seconds) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Seconds) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Seconds) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type Milliseconds uint32

func (t *Milliseconds) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Milliseconds) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Milliseconds) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Milliseconds) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type DeliveryTag []byte

func (t *DeliveryTag) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeliveryTag) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeliveryTag) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeliveryTag) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalBinary((*[]byte)(t), constructor, buf)
}

type DeliveryNumber uint32

func (t *DeliveryNumber) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeliveryNumber) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeliveryNumber) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeliveryNumber) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type TransferNumber uint32

func (t *TransferNumber) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *TransferNumber) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *TransferNumber) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *TransferNumber) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type SequenceNo uint32

func (t *SequenceNo) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SequenceNo) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SequenceNo) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SequenceNo) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type MessageFormat uint32

func (t *MessageFormat) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *MessageFormat) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *MessageFormat) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *MessageFormat) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type IETFLanguageTag string

func (t *IETFLanguageTag) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *IETFLanguageTag) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *IETFLanguageTag) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *IETFLanguageTag) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

type Fields types.Struct

func (t *Fields) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Fields) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Fields) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Fields) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

const (
	ErrorName       = "amqp:error:list"
	ErrorDescriptor = 0x000000000000001d
)

type Error struct {
	Condition   string
	Description string
	Info        *Fields
}

func (t *Error) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Error) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Error) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Error) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

type AMQPError string

const (
	InternalErrorAMQPError         AMQPError = "amqp:internal-error"
	NotFoundAMQPError              AMQPError = "amqp:not-found"
	UnauthorizedAccessAMQPError    AMQPError = "amqp:unauthorized-access"
	DecodeErrorAMQPError           AMQPError = "amqp:decode-error"
	ResourceLimitExceededAMQPError AMQPError = "amqp:resource-limit-exceeded"
	NotAllowedAMQPError            AMQPError = "amqp:not-allowed"
	InvalidFieldAMQPError          AMQPError = "amqp:invalid-field"
	NotImplementedAMQPError        AMQPError = "amqp:not-implemented"
	ResourceLockedAMQPError        AMQPError = "amqp:resource-locked"
	PreconditionFailedAMQPError    AMQPError = "amqp:precondition-failed"
	ResourceDeletedAMQPError       AMQPError = "amqp:resource-deleted"
	IllegalStateAMQPError          AMQPError = "amqp:illegal-state"
	FrameSizeTooSmallAMQPError     AMQPError = "amqp:frame-size-too-small"
)

func (t AMQPError) String() string {
	return string(t)
}

func (AMQPError) isErrorCondition() {}

func (t *AMQPError) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *AMQPError) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *AMQPError) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *AMQPError) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

type ConnectionError string

const (
	ConnectionForcedConnectionError ConnectionError = "amqp:connection:forced"
	FramingErrorConnectionError     ConnectionError = "amqp:connection:framing-error"
	RedirectConnectionError         ConnectionError = "amqp:connection:redirect"
)

func (t ConnectionError) String() string {
	return string(t)
}

func (ConnectionError) isErrorCondition() {}

func (t *ConnectionError) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *ConnectionError) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *ConnectionError) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *ConnectionError) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

type SessionError string

const (
	WindowViolationSessionError  SessionError = "amqp:session:window-violation"
	ErrantLinkSessionError       SessionError = "amqp:session:errant-link"
	HandleInUseSessionError      SessionError = "amqp:session:handle-in-use"
	UnattachedHandleSessionError SessionError = "amqp:session:unattached-handle"
)

func (t SessionError) String() string {
	return string(t)
}

func (SessionError) isErrorCondition() {}

func (t *SessionError) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SessionError) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SessionError) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SessionError) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

type LinkError string

const (
	DetachForcedLinkError          LinkError = "amqp:link:detach-forced"
	TransferLimitExceededLinkError LinkError = "amqp:link:transfer-limit-exceeded"
	MessageSizeExceededLinkError   LinkError = "amqp:link:message-size-exceeded"
	RedirectLinkError              LinkError = "amqp:link:redirect"
	StolenLinkError                LinkError = "amqp:link:stolen"
)

func (t LinkError) String() string {
	return string(t)
}

func (LinkError) isErrorCondition() {}

func (t *LinkError) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *LinkError) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *LinkError) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *LinkError) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

const ()

const (
	HeaderName       = "amqp:header:list"
	HeaderDescriptor = 0x0000000000000070
)

type Header struct {
	Durable       bool
	Priority      uint8
	Ttl           Milliseconds
	FirstAcquirer bool
	DeliveryCount uint32
}

func (*Header) isSection() {}

func (t *Header) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Header) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Header) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Header) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	DeliveryAnnotationsName       = "amqp:delivery-annotations:map"
	DeliveryAnnotationsDescriptor = 0x0000000000000071
)

type DeliveryAnnotations types.Struct

func (DeliveryAnnotations) isSection() {}

func (t *DeliveryAnnotations) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeliveryAnnotations) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeliveryAnnotations) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeliveryAnnotations) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

const (
	MessageAnnotationsName       = "amqp:message-annotations:map"
	MessageAnnotationsDescriptor = 0x0000000000000072
)

type MessageAnnotations types.Struct

func (MessageAnnotations) isSection() {}

func (t *MessageAnnotations) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *MessageAnnotations) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *MessageAnnotations) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *MessageAnnotations) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

const (
	PropertiesName       = "amqp:properties:list"
	PropertiesDescriptor = 0x0000000000000073
)

type Properties struct {
	MessageID          MessageID
	UserID             []byte
	To                 Address
	Subject            string
	ReplyTo            Address
	CorrelationID      MessageID
	ContentType        string
	ContentEncoding    string
	AbsoluteExpiryTime time.Time
	CreationTime       time.Time
	GroupID            string
	GroupSequence      SequenceNo
	ReplyToGroupID     string
}

func (*Properties) isSection() {}

func (t *Properties) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Properties) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Properties) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Properties) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	ApplicationPropertiesName       = "amqp:application-properties:map"
	ApplicationPropertiesDescriptor = 0x0000000000000074
)

type ApplicationProperties types.Struct

func (ApplicationProperties) isSection() {}

func (t *ApplicationProperties) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *ApplicationProperties) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *ApplicationProperties) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *ApplicationProperties) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

const (
	DataName       = "amqp:data:binary"
	DataDescriptor = 0x0000000000000075
)

type Data []byte

func (Data) isSection() {}

func (t *Data) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Data) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Data) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Data) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalBinary((*[]byte)(t), constructor, buf)
}

const (
	FooterName       = "amqp:footer:map"
	FooterDescriptor = 0x0000000000000078
)

type Footer types.Struct

func (Footer) isSection() {}

func (t *Footer) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Footer) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Footer) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Footer) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

type Annotations types.Struct

func (t *Annotations) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Annotations) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Annotations) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Annotations) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

type MessageIDUlong uint64

func (MessageIDUlong) isMessageID() {}

func (t *MessageIDUlong) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *MessageIDUlong) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *MessageIDUlong) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *MessageIDUlong) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUlong((*uint64)(t), constructor, buf)
}

type MessageIDUUID UUID

func (MessageIDUUID) isMessageID() {}

func (t *MessageIDUUID) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *MessageIDUUID) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *MessageIDUUID) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *MessageIDUUID) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUUID((*UUID)(t), constructor, buf)
}

type MessageIDBinary []byte

func (MessageIDBinary) isMessageID() {}

func (t *MessageIDBinary) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *MessageIDBinary) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *MessageIDBinary) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *MessageIDBinary) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalBinary((*[]byte)(t), constructor, buf)
}

type MessageIDString string

func (MessageIDString) isMessageID() {}

func (t *MessageIDString) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *MessageIDString) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *MessageIDString) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *MessageIDString) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalString((*string)(t), constructor, buf)
}

type AddressString string

func (AddressString) isAddress() {}

func (t *AddressString) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *AddressString) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *AddressString) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *AddressString) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalString((*string)(t), constructor, buf)
}

const (
	ReceivedName       = "amqp:received:list"
	ReceivedDescriptor = 0x0000000000000023
)

type Received struct {
	SectionNumber uint32
	SectionOffset uint64
}

func (*Received) isDeliveryState() {}

func (t *Received) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Received) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Received) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Received) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	AcceptedName       = "amqp:accepted:list"
	AcceptedDescriptor = 0x0000000000000024
)

type Accepted struct {
}

func (*Accepted) isDeliveryState() {}

func (*Accepted) isOutcome() {}

func (t *Accepted) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Accepted) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Accepted) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Accepted) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	RejectedName       = "amqp:rejected:list"
	RejectedDescriptor = 0x0000000000000025
)

type Rejected struct {
	Error *Error
}

func (*Rejected) isDeliveryState() {}

func (*Rejected) isOutcome() {}

func (t *Rejected) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Rejected) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Rejected) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Rejected) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	ReleasedName       = "amqp:released:list"
	ReleasedDescriptor = 0x0000000000000026
)

type Released struct {
}

func (*Released) isDeliveryState() {}

func (*Released) isOutcome() {}

func (t *Released) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Released) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Released) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Released) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	ModifiedName       = "amqp:modified:list"
	ModifiedDescriptor = 0x0000000000000027
)

type Modified struct {
	DeliveryFailed     bool
	UndeliverableHere  bool
	MessageAnnotations *Fields
}

func (*Modified) isDeliveryState() {}

func (*Modified) isOutcome() {}

func (t *Modified) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Modified) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Modified) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Modified) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	SourceName       = "amqp:source:list"
	SourceDescriptor = 0x0000000000000028
)

type Source struct {
	Address               Address
	Durable               TerminusDurability
	ExpiryPolicy          TerminusExpiryPolicy
	Timeout               Seconds
	Dynamic               bool
	DynamicNodeProperties *NodeProperties
	DistributionMode      string
	Filter                *FilterSet
	DefaultOutcome        Outcome
	Outcomes              []string
	Capabilities          []string
}

func (*Source) isSource() {}

func (t *Source) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Source) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Source) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Source) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	TargetName       = "amqp:target:list"
	TargetDescriptor = 0x0000000000000029
)

type Target struct {
	Address               Address
	Durable               TerminusDurability
	ExpiryPolicy          TerminusExpiryPolicy
	Timeout               Seconds
	Dynamic               bool
	DynamicNodeProperties *NodeProperties
	Capabilities          []string
}

func (*Target) isTarget() {}

func (t *Target) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *Target) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *Target) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *Target) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

type TerminusDurability uint32

const (
	NoneTerminusDurability           TerminusDurability = 0
	ConfigurationTerminusDurability  TerminusDurability = 1
	UnsettledStateTerminusDurability TerminusDurability = 2
)

func (t TerminusDurability) String() string {
	switch t {
	case NoneTerminusDurability:
		return "none"
	case ConfigurationTerminusDurability:
		return "configuration"
	case UnsettledStateTerminusDurability:
		return "unsettled-state"
	default:
		return "<invalid>"
	}
}

func (t *TerminusDurability) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *TerminusDurability) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *TerminusDurability) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *TerminusDurability) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUint((*uint32)(t), constructor, buf)
}

type TerminusExpiryPolicy string

const (
	LinkDetachTerminusExpiryPolicy      TerminusExpiryPolicy = "link-detach"
	SessionEndTerminusExpiryPolicy      TerminusExpiryPolicy = "session-end"
	ConnectionCloseTerminusExpiryPolicy TerminusExpiryPolicy = "connection-close"
	NeverTerminusExpiryPolicy           TerminusExpiryPolicy = "never"
)

func (t TerminusExpiryPolicy) String() string {
	return string(t)
}

func (t *TerminusExpiryPolicy) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *TerminusExpiryPolicy) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *TerminusExpiryPolicy) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *TerminusExpiryPolicy) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

type StdDistMode string

const (
	MoveStdDistMode StdDistMode = "move"
	CopyStdDistMode StdDistMode = "copy"
)

func (t StdDistMode) String() string {
	return string(t)
}

func (StdDistMode) isDistributionMode() {}

func (t *StdDistMode) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *StdDistMode) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *StdDistMode) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *StdDistMode) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalSymbol((*string)(t), constructor, buf)
}

type FilterSet types.Struct

func (t *FilterSet) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *FilterSet) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *FilterSet) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *FilterSet) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

type NodeProperties types.Struct

func (t *NodeProperties) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *NodeProperties) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *NodeProperties) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *NodeProperties) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalMap((*types.Struct)(t), constructor, buf)
}

const (
	DeleteOnCloseName       = "amqp:delete-on-close:list"
	DeleteOnCloseDescriptor = 0x000000000000002b
)

type DeleteOnClose struct {
}

func (*DeleteOnClose) isLifetimePolicy() {}

func (t *DeleteOnClose) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeleteOnClose) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeleteOnClose) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeleteOnClose) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	DeleteOnNoLinksName       = "amqp:delete-on-no-links:list"
	DeleteOnNoLinksDescriptor = 0x000000000000002c
)

type DeleteOnNoLinks struct {
}

func (*DeleteOnNoLinks) isLifetimePolicy() {}

func (t *DeleteOnNoLinks) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeleteOnNoLinks) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeleteOnNoLinks) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeleteOnNoLinks) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	DeleteOnNoMessagesName       = "amqp:delete-on-no-messages:list"
	DeleteOnNoMessagesDescriptor = 0x000000000000002d
)

type DeleteOnNoMessages struct {
}

func (*DeleteOnNoMessages) isLifetimePolicy() {}

func (t *DeleteOnNoMessages) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeleteOnNoMessages) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeleteOnNoMessages) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeleteOnNoMessages) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	DeleteOnNoLinksOrMessagesName       = "amqp:delete-on-no-links-or-messages:list"
	DeleteOnNoLinksOrMessagesDescriptor = 0x000000000000002e
)

type DeleteOnNoLinksOrMessages struct {
}

func (*DeleteOnNoLinksOrMessages) isLifetimePolicy() {}

func (t *DeleteOnNoLinksOrMessages) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *DeleteOnNoLinksOrMessages) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *DeleteOnNoLinksOrMessages) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *DeleteOnNoLinksOrMessages) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	TLSMajor    = 1
	TLSMinor    = 0
	TLSRevision = 0
)

const (
	SASLMajor    = 1
	SASLMinor    = 0
	SASLRevision = 0
)

const (
	SASLMechanismsName       = "amqp:sasl-mechanisms:list"
	SASLMechanismsDescriptor = 0x0000000000000040
)

type SASLMechanisms struct {
	FrameMeta
	SASLServerMechanisms []string
}

func (*SASLMechanisms) isSASLFrame() {}

func (t *SASLMechanisms) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *SASLMechanisms) Descriptor() uint64 {
	return SASLMechanismsDescriptor
}

func (t *SASLMechanisms) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SASLMechanisms) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SASLMechanisms) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SASLMechanisms) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	SASLInitName       = "amqp:sasl-init:list"
	SASLInitDescriptor = 0x0000000000000041
)

type SASLInit struct {
	FrameMeta
	Mechanism       string
	InitialResponse []byte
	Hostname        string
}

func (*SASLInit) isSASLFrame() {}

func (t *SASLInit) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *SASLInit) Descriptor() uint64 {
	return SASLInitDescriptor
}

func (t *SASLInit) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SASLInit) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SASLInit) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SASLInit) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	SASLChallengeName       = "amqp:sasl-challenge:list"
	SASLChallengeDescriptor = 0x0000000000000042
)

type SASLChallenge struct {
	FrameMeta
	Challenge []byte
}

func (*SASLChallenge) isSASLFrame() {}

func (t *SASLChallenge) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *SASLChallenge) Descriptor() uint64 {
	return SASLChallengeDescriptor
}

func (t *SASLChallenge) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SASLChallenge) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SASLChallenge) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SASLChallenge) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	SASLResponseName       = "amqp:sasl-response:list"
	SASLResponseDescriptor = 0x0000000000000043
)

type SASLResponse struct {
	FrameMeta
	Response []byte
}

func (*SASLResponse) isSASLFrame() {}

func (t *SASLResponse) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *SASLResponse) Descriptor() uint64 {
	return SASLResponseDescriptor
}

func (t *SASLResponse) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SASLResponse) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SASLResponse) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SASLResponse) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

const (
	SASLOutcomeName       = "amqp:sasl-outcome:list"
	SASLOutcomeDescriptor = 0x0000000000000044
)

type SASLOutcome struct {
	FrameMeta
	Code           SASLCode
	AdditionalData []byte
}

func (*SASLOutcome) isSASLFrame() {}

func (t *SASLOutcome) GetFrameMeta() *FrameMeta {
	return &t.FrameMeta
}

func (t *SASLOutcome) Descriptor() uint64 {
	return SASLOutcomeDescriptor
}

func (t *SASLOutcome) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SASLOutcome) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SASLOutcome) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SASLOutcome) UnmarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

type SASLCode uint8

const (
	OkSASLCode      SASLCode = 0
	AuthSASLCode    SASLCode = 1
	SysSASLCode     SASLCode = 2
	SysPermSASLCode SASLCode = 3
	SysTempSASLCode SASLCode = 4
)

func (t SASLCode) String() string {
	switch t {
	case OkSASLCode:
		return "ok"
	case AuthSASLCode:
		return "auth"
	case SysSASLCode:
		return "sys"
	case SysPermSASLCode:
		return "sys-perm"
	case SysTempSASLCode:
		return "sys-temp"
	default:
		return "<invalid>"
	}
}

func (t *SASLCode) Marshal() ([]byte, error) {
	buf := bytes.Buffer{}
	return buf.Bytes(), t.MarshalBuffer(&buf)
}

func (t *SASLCode) MarshalBuffer(buf *bytes.Buffer) error {
	panic("implement me")
}

func (t *SASLCode) Unmarshal(data []byte) error {
	return t.UnmarshalBuffer(bytes.NewBuffer(data))
}

func (t *SASLCode) UnmarshalBuffer(buf *bytes.Buffer) error {
	constructor, err := buf.ReadByte()
	if err != nil {
		return errors.Wrap(err, "read constructor failed")
	}
	return unmarshalUbyte((*uint8)(t), constructor, buf)
}
