// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cluster_state.proto

package mq

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import client "eventter.io/mq/client"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ClusterNode_State int32

const (
	ClusterNode_DEAD  ClusterNode_State = 0
	ClusterNode_ALIVE ClusterNode_State = 1
)

var ClusterNode_State_name = map[int32]string{
	0: "DEAD",
	1: "ALIVE",
}
var ClusterNode_State_value = map[string]int32{
	"DEAD":  0,
	"ALIVE": 1,
}

func (x ClusterNode_State) String() string {
	return proto.EnumName(ClusterNode_State_name, int32(x))
}
func (ClusterNode_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{5, 0}
}

type UpdateSegmentNodesCommand_Which int32

const (
	UpdateSegmentNodesCommand_OPEN   UpdateSegmentNodesCommand_Which = 0
	UpdateSegmentNodesCommand_CLOSED UpdateSegmentNodesCommand_Which = 1
)

var UpdateSegmentNodesCommand_Which_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
}
var UpdateSegmentNodesCommand_Which_value = map[string]int32{
	"OPEN":   0,
	"CLOSED": 1,
}

func (x UpdateSegmentNodesCommand_Which) String() string {
	return proto.EnumName(UpdateSegmentNodesCommand_Which_name, int32(x))
}
func (UpdateSegmentNodesCommand_Which) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{9, 0}
}

type ClusterState struct {
	Index                uint64              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	CurrentSegmentID     uint64              `protobuf:"varint,2,opt,name=current_segment_id,json=currentSegmentId,proto3" json:"current_segment_id,omitempty"`
	Namespaces           []*ClusterNamespace `protobuf:"bytes,3,rep,name=namespaces" json:"namespaces,omitempty"`
	OpenSegments         []*ClusterSegment   `protobuf:"bytes,4,rep,name=open_segments,json=openSegments" json:"open_segments,omitempty"`
	ClosedSegments       []*ClusterSegment   `protobuf:"bytes,5,rep,name=closed_segments,json=closedSegments" json:"closed_segments,omitempty"`
	Nodes                []*ClusterNode      `protobuf:"bytes,6,rep,name=nodes" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterState) Reset()         { *m = ClusterState{} }
func (m *ClusterState) String() string { return proto.CompactTextString(m) }
func (*ClusterState) ProtoMessage()    {}
func (*ClusterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{0}
}
func (m *ClusterState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterState.Merge(dst, src)
}
func (m *ClusterState) XXX_Size() int {
	return m.Size()
}
func (m *ClusterState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterState.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterState proto.InternalMessageInfo

func (m *ClusterState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ClusterState) GetCurrentSegmentID() uint64 {
	if m != nil {
		return m.CurrentSegmentID
	}
	return 0
}

func (m *ClusterState) GetNamespaces() []*ClusterNamespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *ClusterState) GetOpenSegments() []*ClusterSegment {
	if m != nil {
		return m.OpenSegments
	}
	return nil
}

func (m *ClusterState) GetClosedSegments() []*ClusterSegment {
	if m != nil {
		return m.ClosedSegments
	}
	return nil
}

func (m *ClusterState) GetNodes() []*ClusterNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type ClusterNamespace struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Topics               []*ClusterTopic         `protobuf:"bytes,2,rep,name=topics" json:"topics,omitempty"`
	ConsumerGroups       []*ClusterConsumerGroup `protobuf:"bytes,3,rep,name=consumer_groups,json=consumerGroups" json:"consumer_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClusterNamespace) Reset()         { *m = ClusterNamespace{} }
func (m *ClusterNamespace) String() string { return proto.CompactTextString(m) }
func (*ClusterNamespace) ProtoMessage()    {}
func (*ClusterNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{1}
}
func (m *ClusterNamespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterNamespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterNamespace.Merge(dst, src)
}
func (m *ClusterNamespace) XXX_Size() int {
	return m.Size()
}
func (m *ClusterNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterNamespace proto.InternalMessageInfo

func (m *ClusterNamespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterNamespace) GetTopics() []*ClusterTopic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ClusterNamespace) GetConsumerGroups() []*ClusterConsumerGroup {
	if m != nil {
		return m.ConsumerGroups
	}
	return nil
}

type ClusterTopic struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Shards               uint32        `protobuf:"varint,3,opt,name=shards,proto3" json:"shards,omitempty"`
	ReplicationFactor    uint32        `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	Retention            time.Duration `protobuf:"bytes,5,opt,name=retention,stdduration" json:"retention"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterTopic) Reset()         { *m = ClusterTopic{} }
func (m *ClusterTopic) String() string { return proto.CompactTextString(m) }
func (*ClusterTopic) ProtoMessage()    {}
func (*ClusterTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{2}
}
func (m *ClusterTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterTopic.Merge(dst, src)
}
func (m *ClusterTopic) XXX_Size() int {
	return m.Size()
}
func (m *ClusterTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterTopic.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterTopic proto.InternalMessageInfo

func (m *ClusterTopic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterTopic) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClusterTopic) GetShards() uint32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

func (m *ClusterTopic) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *ClusterTopic) GetRetention() time.Duration {
	if m != nil {
		return m.Retention
	}
	return 0
}

type ClusterConsumerGroup struct {
	Name                 string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bindings             []*ClusterConsumerGroup_Binding `protobuf:"bytes,2,rep,name=bindings" json:"bindings,omitempty"`
	Shards               uint32                          `protobuf:"varint,3,opt,name=shards,proto3" json:"shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ClusterConsumerGroup) Reset()         { *m = ClusterConsumerGroup{} }
func (m *ClusterConsumerGroup) String() string { return proto.CompactTextString(m) }
func (*ClusterConsumerGroup) ProtoMessage()    {}
func (*ClusterConsumerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{3}
}
func (m *ClusterConsumerGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterConsumerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterConsumerGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterConsumerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConsumerGroup.Merge(dst, src)
}
func (m *ClusterConsumerGroup) XXX_Size() int {
	return m.Size()
}
func (m *ClusterConsumerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConsumerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConsumerGroup proto.InternalMessageInfo

func (m *ClusterConsumerGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterConsumerGroup) GetBindings() []*ClusterConsumerGroup_Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

func (m *ClusterConsumerGroup) GetShards() uint32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

type ClusterConsumerGroup_Binding struct {
	TopicName            string   `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	RoutingKey           string   `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterConsumerGroup_Binding) Reset()         { *m = ClusterConsumerGroup_Binding{} }
func (m *ClusterConsumerGroup_Binding) String() string { return proto.CompactTextString(m) }
func (*ClusterConsumerGroup_Binding) ProtoMessage()    {}
func (*ClusterConsumerGroup_Binding) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{3, 0}
}
func (m *ClusterConsumerGroup_Binding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterConsumerGroup_Binding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterConsumerGroup_Binding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterConsumerGroup_Binding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConsumerGroup_Binding.Merge(dst, src)
}
func (m *ClusterConsumerGroup_Binding) XXX_Size() int {
	return m.Size()
}
func (m *ClusterConsumerGroup_Binding) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConsumerGroup_Binding.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConsumerGroup_Binding proto.InternalMessageInfo

func (m *ClusterConsumerGroup_Binding) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *ClusterConsumerGroup_Binding) GetRoutingKey() string {
	if m != nil {
		return m.RoutingKey
	}
	return ""
}

type ClusterSegment struct {
	ID                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic                client.NamespaceName `protobuf:"bytes,2,opt,name=topic" json:"topic"`
	OpenedAt             time.Time            `protobuf:"bytes,3,opt,name=opened_at,json=openedAt,stdtime" json:"opened_at"`
	ClosedAt             time.Time            `protobuf:"bytes,4,opt,name=closed_at,json=closedAt,stdtime" json:"closed_at"`
	Nodes                ClusterSegment_Nodes `protobuf:"bytes,5,opt,name=nodes" json:"nodes"`
	Size_                uint64               `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Sha1                 []byte               `protobuf:"bytes,7,opt,name=sha1,proto3" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClusterSegment) Reset()         { *m = ClusterSegment{} }
func (m *ClusterSegment) String() string { return proto.CompactTextString(m) }
func (*ClusterSegment) ProtoMessage()    {}
func (*ClusterSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{4}
}
func (m *ClusterSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSegment.Merge(dst, src)
}
func (m *ClusterSegment) XXX_Size() int {
	return m.Size()
}
func (m *ClusterSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSegment.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSegment proto.InternalMessageInfo

func (m *ClusterSegment) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterSegment) GetTopic() client.NamespaceName {
	if m != nil {
		return m.Topic
	}
	return client.NamespaceName{}
}

func (m *ClusterSegment) GetOpenedAt() time.Time {
	if m != nil {
		return m.OpenedAt
	}
	return time.Time{}
}

func (m *ClusterSegment) GetClosedAt() time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return time.Time{}
}

func (m *ClusterSegment) GetNodes() ClusterSegment_Nodes {
	if m != nil {
		return m.Nodes
	}
	return ClusterSegment_Nodes{}
}

func (m *ClusterSegment) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ClusterSegment) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type ClusterSegment_Nodes struct {
	PrimaryNodeID        uint64   `protobuf:"varint,1,opt,name=primary_node_id,json=primaryNodeId,proto3" json:"primary_node_id,omitempty"`
	ReplicatingNodeIDs   []uint64 `protobuf:"varint,2,rep,packed,name=replicating_node_ids,json=replicatingNodeIds" json:"replicating_node_ids,omitempty"`
	DoneNodeIDs          []uint64 `protobuf:"varint,3,rep,packed,name=done_node_ids,json=doneNodeIds" json:"done_node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterSegment_Nodes) Reset()         { *m = ClusterSegment_Nodes{} }
func (m *ClusterSegment_Nodes) String() string { return proto.CompactTextString(m) }
func (*ClusterSegment_Nodes) ProtoMessage()    {}
func (*ClusterSegment_Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{4, 0}
}
func (m *ClusterSegment_Nodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterSegment_Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterSegment_Nodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterSegment_Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSegment_Nodes.Merge(dst, src)
}
func (m *ClusterSegment_Nodes) XXX_Size() int {
	return m.Size()
}
func (m *ClusterSegment_Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSegment_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSegment_Nodes proto.InternalMessageInfo

func (m *ClusterSegment_Nodes) GetPrimaryNodeID() uint64 {
	if m != nil {
		return m.PrimaryNodeID
	}
	return 0
}

func (m *ClusterSegment_Nodes) GetReplicatingNodeIDs() []uint64 {
	if m != nil {
		return m.ReplicatingNodeIDs
	}
	return nil
}

func (m *ClusterSegment_Nodes) GetDoneNodeIDs() []uint64 {
	if m != nil {
		return m.DoneNodeIDs
	}
	return nil
}

type ClusterNode struct {
	ID                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	State                ClusterNode_State `protobuf:"varint,3,opt,name=state,proto3,enum=io.eventter.mq.ClusterNode_State" json:"state,omitempty"`
	LastSeenAlive        *time.Time        `protobuf:"bytes,4,opt,name=last_seen_alive,json=lastSeenAlive,stdtime" json:"last_seen_alive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClusterNode) Reset()         { *m = ClusterNode{} }
func (m *ClusterNode) String() string { return proto.CompactTextString(m) }
func (*ClusterNode) ProtoMessage()    {}
func (*ClusterNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{5}
}
func (m *ClusterNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterNode.Merge(dst, src)
}
func (m *ClusterNode) XXX_Size() int {
	return m.Size()
}
func (m *ClusterNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterNode.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterNode proto.InternalMessageInfo

func (m *ClusterNode) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClusterNode) GetState() ClusterNode_State {
	if m != nil {
		return m.State
	}
	return ClusterNode_DEAD
}

func (m *ClusterNode) GetLastSeenAlive() *time.Time {
	if m != nil {
		return m.LastSeenAlive
	}
	return nil
}

type OpenSegmentCommand struct {
	ID                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic                client.NamespaceName `protobuf:"bytes,2,opt,name=topic" json:"topic"`
	OpenedAt             time.Time            `protobuf:"bytes,3,opt,name=opened_at,json=openedAt,stdtime" json:"opened_at"`
	PrimaryNodeID        uint64               `protobuf:"varint,4,opt,name=primary_node_id,json=primaryNodeId,proto3" json:"primary_node_id,omitempty"`
	ReplicatingNodeIDs   []uint64             `protobuf:"varint,5,rep,packed,name=replicating_node_ids,json=replicatingNodeIds" json:"replicating_node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OpenSegmentCommand) Reset()         { *m = OpenSegmentCommand{} }
func (m *OpenSegmentCommand) String() string { return proto.CompactTextString(m) }
func (*OpenSegmentCommand) ProtoMessage()    {}
func (*OpenSegmentCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{6}
}
func (m *OpenSegmentCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenSegmentCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenSegmentCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OpenSegmentCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenSegmentCommand.Merge(dst, src)
}
func (m *OpenSegmentCommand) XXX_Size() int {
	return m.Size()
}
func (m *OpenSegmentCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenSegmentCommand.DiscardUnknown(m)
}

var xxx_messageInfo_OpenSegmentCommand proto.InternalMessageInfo

func (m *OpenSegmentCommand) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OpenSegmentCommand) GetTopic() client.NamespaceName {
	if m != nil {
		return m.Topic
	}
	return client.NamespaceName{}
}

func (m *OpenSegmentCommand) GetOpenedAt() time.Time {
	if m != nil {
		return m.OpenedAt
	}
	return time.Time{}
}

func (m *OpenSegmentCommand) GetPrimaryNodeID() uint64 {
	if m != nil {
		return m.PrimaryNodeID
	}
	return 0
}

func (m *OpenSegmentCommand) GetReplicatingNodeIDs() []uint64 {
	if m != nil {
		return m.ReplicatingNodeIDs
	}
	return nil
}

type CloseSegmentCommand struct {
	ID                   uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DoneNodeID           uint64    `protobuf:"varint,2,opt,name=done_node_id,json=doneNodeId,proto3" json:"done_node_id,omitempty"`
	ClosedAt             time.Time `protobuf:"bytes,4,opt,name=closed_at,json=closedAt,stdtime" json:"closed_at"`
	Size_                uint64    `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Sha1                 []byte    `protobuf:"bytes,6,opt,name=sha1,proto3" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CloseSegmentCommand) Reset()         { *m = CloseSegmentCommand{} }
func (m *CloseSegmentCommand) String() string { return proto.CompactTextString(m) }
func (*CloseSegmentCommand) ProtoMessage()    {}
func (*CloseSegmentCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{7}
}
func (m *CloseSegmentCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseSegmentCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseSegmentCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CloseSegmentCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSegmentCommand.Merge(dst, src)
}
func (m *CloseSegmentCommand) XXX_Size() int {
	return m.Size()
}
func (m *CloseSegmentCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSegmentCommand.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSegmentCommand proto.InternalMessageInfo

func (m *CloseSegmentCommand) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CloseSegmentCommand) GetDoneNodeID() uint64 {
	if m != nil {
		return m.DoneNodeID
	}
	return 0
}

func (m *CloseSegmentCommand) GetClosedAt() time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return time.Time{}
}

func (m *CloseSegmentCommand) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *CloseSegmentCommand) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type UpdateNodeCommand struct {
	ID                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	State                ClusterNode_State `protobuf:"varint,3,opt,name=state,proto3,enum=io.eventter.mq.ClusterNode_State" json:"state,omitempty"`
	LastSeenAlive        *time.Time        `protobuf:"bytes,4,opt,name=last_seen_alive,json=lastSeenAlive,stdtime" json:"last_seen_alive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateNodeCommand) Reset()         { *m = UpdateNodeCommand{} }
func (m *UpdateNodeCommand) String() string { return proto.CompactTextString(m) }
func (*UpdateNodeCommand) ProtoMessage()    {}
func (*UpdateNodeCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{8}
}
func (m *UpdateNodeCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNodeCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNodeCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateNodeCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNodeCommand.Merge(dst, src)
}
func (m *UpdateNodeCommand) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNodeCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNodeCommand.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNodeCommand proto.InternalMessageInfo

func (m *UpdateNodeCommand) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateNodeCommand) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateNodeCommand) GetState() ClusterNode_State {
	if m != nil {
		return m.State
	}
	return ClusterNode_DEAD
}

func (m *UpdateNodeCommand) GetLastSeenAlive() *time.Time {
	if m != nil {
		return m.LastSeenAlive
	}
	return nil
}

type UpdateSegmentNodesCommand struct {
	ID                   uint64                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Which                UpdateSegmentNodesCommand_Which `protobuf:"varint,2,opt,name=which,proto3,enum=io.eventter.mq.UpdateSegmentNodesCommand_Which" json:"which,omitempty"`
	Nodes                ClusterSegment_Nodes            `protobuf:"bytes,3,opt,name=nodes" json:"nodes"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UpdateSegmentNodesCommand) Reset()         { *m = UpdateSegmentNodesCommand{} }
func (m *UpdateSegmentNodesCommand) String() string { return proto.CompactTextString(m) }
func (*UpdateSegmentNodesCommand) ProtoMessage()    {}
func (*UpdateSegmentNodesCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{9}
}
func (m *UpdateSegmentNodesCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSegmentNodesCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSegmentNodesCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateSegmentNodesCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSegmentNodesCommand.Merge(dst, src)
}
func (m *UpdateSegmentNodesCommand) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSegmentNodesCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSegmentNodesCommand.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSegmentNodesCommand proto.InternalMessageInfo

func (m *UpdateSegmentNodesCommand) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateSegmentNodesCommand) GetWhich() UpdateSegmentNodesCommand_Which {
	if m != nil {
		return m.Which
	}
	return UpdateSegmentNodesCommand_OPEN
}

func (m *UpdateSegmentNodesCommand) GetNodes() ClusterSegment_Nodes {
	if m != nil {
		return m.Nodes
	}
	return ClusterSegment_Nodes{}
}

type Command struct {
	// Types that are valid to be assigned to Command:
	//	*Command_ConfigureTopic
	//	*Command_DeleteTopic
	//	*Command_ConfigureConsumerGroup
	//	*Command_DeleteConsumerGroup
	//	*Command_OpenSegment
	//	*Command_CloseSegment
	//	*Command_UpdateNode
	//	*Command_UpdateSegmentNodes
	Command              isCommand_Command `protobuf_oneof:"command"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_915e53765ec0b9ea, []int{10}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(dst, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

type isCommand_Command interface {
	isCommand_Command()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Command_ConfigureTopic struct {
	ConfigureTopic *client.ConfigureTopicRequest `protobuf:"bytes,1,opt,name=configure_topic,json=configureTopic,oneof"`
}
type Command_DeleteTopic struct {
	DeleteTopic *client.DeleteTopicRequest `protobuf:"bytes,2,opt,name=delete_topic,json=deleteTopic,oneof"`
}
type Command_ConfigureConsumerGroup struct {
	ConfigureConsumerGroup *client.ConfigureConsumerGroupRequest `protobuf:"bytes,3,opt,name=configure_consumer_group,json=configureConsumerGroup,oneof"`
}
type Command_DeleteConsumerGroup struct {
	DeleteConsumerGroup *client.DeleteConsumerGroupRequest `protobuf:"bytes,4,opt,name=delete_consumer_group,json=deleteConsumerGroup,oneof"`
}
type Command_OpenSegment struct {
	OpenSegment *OpenSegmentCommand `protobuf:"bytes,5,opt,name=open_segment,json=openSegment,oneof"`
}
type Command_CloseSegment struct {
	CloseSegment *CloseSegmentCommand `protobuf:"bytes,6,opt,name=close_segment,json=closeSegment,oneof"`
}
type Command_UpdateNode struct {
	UpdateNode *UpdateNodeCommand `protobuf:"bytes,7,opt,name=update_node,json=updateNode,oneof"`
}
type Command_UpdateSegmentNodes struct {
	UpdateSegmentNodes *UpdateSegmentNodesCommand `protobuf:"bytes,8,opt,name=update_segment_nodes,json=updateSegmentNodes,oneof"`
}

func (*Command_ConfigureTopic) isCommand_Command()         {}
func (*Command_DeleteTopic) isCommand_Command()            {}
func (*Command_ConfigureConsumerGroup) isCommand_Command() {}
func (*Command_DeleteConsumerGroup) isCommand_Command()    {}
func (*Command_OpenSegment) isCommand_Command()            {}
func (*Command_CloseSegment) isCommand_Command()           {}
func (*Command_UpdateNode) isCommand_Command()             {}
func (*Command_UpdateSegmentNodes) isCommand_Command()     {}

func (m *Command) GetCommand() isCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Command) GetConfigureTopic() *client.ConfigureTopicRequest {
	if x, ok := m.GetCommand().(*Command_ConfigureTopic); ok {
		return x.ConfigureTopic
	}
	return nil
}

func (m *Command) GetDeleteTopic() *client.DeleteTopicRequest {
	if x, ok := m.GetCommand().(*Command_DeleteTopic); ok {
		return x.DeleteTopic
	}
	return nil
}

func (m *Command) GetConfigureConsumerGroup() *client.ConfigureConsumerGroupRequest {
	if x, ok := m.GetCommand().(*Command_ConfigureConsumerGroup); ok {
		return x.ConfigureConsumerGroup
	}
	return nil
}

func (m *Command) GetDeleteConsumerGroup() *client.DeleteConsumerGroupRequest {
	if x, ok := m.GetCommand().(*Command_DeleteConsumerGroup); ok {
		return x.DeleteConsumerGroup
	}
	return nil
}

func (m *Command) GetOpenSegment() *OpenSegmentCommand {
	if x, ok := m.GetCommand().(*Command_OpenSegment); ok {
		return x.OpenSegment
	}
	return nil
}

func (m *Command) GetCloseSegment() *CloseSegmentCommand {
	if x, ok := m.GetCommand().(*Command_CloseSegment); ok {
		return x.CloseSegment
	}
	return nil
}

func (m *Command) GetUpdateNode() *UpdateNodeCommand {
	if x, ok := m.GetCommand().(*Command_UpdateNode); ok {
		return x.UpdateNode
	}
	return nil
}

func (m *Command) GetUpdateSegmentNodes() *UpdateSegmentNodesCommand {
	if x, ok := m.GetCommand().(*Command_UpdateSegmentNodes); ok {
		return x.UpdateSegmentNodes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Command) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Command_OneofMarshaler, _Command_OneofUnmarshaler, _Command_OneofSizer, []interface{}{
		(*Command_ConfigureTopic)(nil),
		(*Command_DeleteTopic)(nil),
		(*Command_ConfigureConsumerGroup)(nil),
		(*Command_DeleteConsumerGroup)(nil),
		(*Command_OpenSegment)(nil),
		(*Command_CloseSegment)(nil),
		(*Command_UpdateNode)(nil),
		(*Command_UpdateSegmentNodes)(nil),
	}
}

func _Command_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Command)
	// command
	switch x := m.Command.(type) {
	case *Command_ConfigureTopic:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigureTopic); err != nil {
			return err
		}
	case *Command_DeleteTopic:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteTopic); err != nil {
			return err
		}
	case *Command_ConfigureConsumerGroup:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigureConsumerGroup); err != nil {
			return err
		}
	case *Command_DeleteConsumerGroup:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteConsumerGroup); err != nil {
			return err
		}
	case *Command_OpenSegment:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenSegment); err != nil {
			return err
		}
	case *Command_CloseSegment:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseSegment); err != nil {
			return err
		}
	case *Command_UpdateNode:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateNode); err != nil {
			return err
		}
	case *Command_UpdateSegmentNodes:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSegmentNodes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Command.Command has unexpected type %T", x)
	}
	return nil
}

func _Command_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Command)
	switch tag {
	case 1: // command.configure_topic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(client.ConfigureTopicRequest)
		err := b.DecodeMessage(msg)
		m.Command = &Command_ConfigureTopic{msg}
		return true, err
	case 2: // command.delete_topic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(client.DeleteTopicRequest)
		err := b.DecodeMessage(msg)
		m.Command = &Command_DeleteTopic{msg}
		return true, err
	case 3: // command.configure_consumer_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(client.ConfigureConsumerGroupRequest)
		err := b.DecodeMessage(msg)
		m.Command = &Command_ConfigureConsumerGroup{msg}
		return true, err
	case 4: // command.delete_consumer_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(client.DeleteConsumerGroupRequest)
		err := b.DecodeMessage(msg)
		m.Command = &Command_DeleteConsumerGroup{msg}
		return true, err
	case 5: // command.open_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpenSegmentCommand)
		err := b.DecodeMessage(msg)
		m.Command = &Command_OpenSegment{msg}
		return true, err
	case 6: // command.close_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloseSegmentCommand)
		err := b.DecodeMessage(msg)
		m.Command = &Command_CloseSegment{msg}
		return true, err
	case 7: // command.update_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateNodeCommand)
		err := b.DecodeMessage(msg)
		m.Command = &Command_UpdateNode{msg}
		return true, err
	case 8: // command.update_segment_nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateSegmentNodesCommand)
		err := b.DecodeMessage(msg)
		m.Command = &Command_UpdateSegmentNodes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Command_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Command)
	// command
	switch x := m.Command.(type) {
	case *Command_ConfigureTopic:
		s := proto.Size(x.ConfigureTopic)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_DeleteTopic:
		s := proto.Size(x.DeleteTopic)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_ConfigureConsumerGroup:
		s := proto.Size(x.ConfigureConsumerGroup)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_DeleteConsumerGroup:
		s := proto.Size(x.DeleteConsumerGroup)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_OpenSegment:
		s := proto.Size(x.OpenSegment)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_CloseSegment:
		s := proto.Size(x.CloseSegment)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_UpdateNode:
		s := proto.Size(x.UpdateNode)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_UpdateSegmentNodes:
		s := proto.Size(x.UpdateSegmentNodes)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ClusterState)(nil), "io.eventter.mq.ClusterState")
	proto.RegisterType((*ClusterNamespace)(nil), "io.eventter.mq.ClusterNamespace")
	proto.RegisterType((*ClusterTopic)(nil), "io.eventter.mq.ClusterTopic")
	proto.RegisterType((*ClusterConsumerGroup)(nil), "io.eventter.mq.ClusterConsumerGroup")
	proto.RegisterType((*ClusterConsumerGroup_Binding)(nil), "io.eventter.mq.ClusterConsumerGroup.Binding")
	proto.RegisterType((*ClusterSegment)(nil), "io.eventter.mq.ClusterSegment")
	proto.RegisterType((*ClusterSegment_Nodes)(nil), "io.eventter.mq.ClusterSegment.Nodes")
	proto.RegisterType((*ClusterNode)(nil), "io.eventter.mq.ClusterNode")
	proto.RegisterType((*OpenSegmentCommand)(nil), "io.eventter.mq.OpenSegmentCommand")
	proto.RegisterType((*CloseSegmentCommand)(nil), "io.eventter.mq.CloseSegmentCommand")
	proto.RegisterType((*UpdateNodeCommand)(nil), "io.eventter.mq.UpdateNodeCommand")
	proto.RegisterType((*UpdateSegmentNodesCommand)(nil), "io.eventter.mq.UpdateSegmentNodesCommand")
	proto.RegisterType((*Command)(nil), "io.eventter.mq.Command")
	proto.RegisterEnum("io.eventter.mq.ClusterNode_State", ClusterNode_State_name, ClusterNode_State_value)
	proto.RegisterEnum("io.eventter.mq.UpdateSegmentNodesCommand_Which", UpdateSegmentNodesCommand_Which_name, UpdateSegmentNodesCommand_Which_value)
}
func (m *ClusterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Index))
	}
	if m.CurrentSegmentID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CurrentSegmentID))
	}
	if len(m.Namespaces) > 0 {
		for _, msg := range m.Namespaces {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OpenSegments) > 0 {
		for _, msg := range m.OpenSegments {
			dAtA[i] = 0x22
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ClosedSegments) > 0 {
		for _, msg := range m.ClosedSegments {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterNamespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterNamespace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Topics) > 0 {
		for _, msg := range m.Topics {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ConsumerGroups) > 0 {
		for _, msg := range m.ConsumerGroups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterTopic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Shards != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Shards))
	}
	if m.ReplicationFactor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ReplicationFactor))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Retention)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Retention, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *ClusterConsumerGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Bindings) > 0 {
		for _, msg := range m.Bindings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Shards != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Shards))
	}
	return i, nil
}

func (m *ClusterConsumerGroup_Binding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterConsumerGroup_Binding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	if len(m.RoutingKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.RoutingKey)))
		i += copy(dAtA[i:], m.RoutingKey)
	}
	return i, nil
}

func (m *ClusterSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterSegment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Topic.Size()))
	n2, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OpenedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClosedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Nodes.Size()))
	n5, err := m.Nodes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.Size_ != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Size_))
	}
	if len(m.Sha1) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	return i, nil
}

func (m *ClusterSegment_Nodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterSegment_Nodes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PrimaryNodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.PrimaryNodeID))
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		dAtA7 := make([]byte, len(m.ReplicatingNodeIDs)*10)
		var j6 int
		for _, num := range m.ReplicatingNodeIDs {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.DoneNodeIDs) > 0 {
		dAtA9 := make([]byte, len(m.DoneNodeIDs)*10)
		var j8 int
		for _, num := range m.DoneNodeIDs {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *ClusterNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)))
		n10, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAlive, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *OpenSegmentCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenSegmentCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Topic.Size()))
	n11, err := m.Topic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)))
	n12, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OpenedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.PrimaryNodeID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.PrimaryNodeID))
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		dAtA14 := make([]byte, len(m.ReplicatingNodeIDs)*10)
		var j13 int
		for _, num := range m.ReplicatingNodeIDs {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	return i, nil
}

func (m *CloseSegmentCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSegmentCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if m.DoneNodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DoneNodeID))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)))
	n15, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClosedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Size_))
	}
	if len(m.Sha1) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	return i, nil
}

func (m *UpdateNodeCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNodeCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)))
		n16, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAlive, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *UpdateSegmentNodesCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSegmentNodesCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if m.Which != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Which))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Nodes.Size()))
	n17, err := m.Nodes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	return i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Command != nil {
		nn18, err := m.Command.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	return i, nil
}

func (m *Command_ConfigureTopic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConfigureTopic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ConfigureTopic.Size()))
		n19, err := m.ConfigureTopic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Command_DeleteTopic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteTopic != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DeleteTopic.Size()))
		n20, err := m.DeleteTopic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Command_ConfigureConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConfigureConsumerGroup != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ConfigureConsumerGroup.Size()))
		n21, err := m.ConfigureConsumerGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Command_DeleteConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteConsumerGroup != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DeleteConsumerGroup.Size()))
		n22, err := m.DeleteConsumerGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Command_OpenSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OpenSegment != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.OpenSegment.Size()))
		n23, err := m.OpenSegment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Command_CloseSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CloseSegment != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CloseSegment.Size()))
		n24, err := m.CloseSegment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Command_UpdateNode) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateNode != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.UpdateNode.Size()))
		n25, err := m.UpdateNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Command_UpdateSegmentNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateSegmentNodes != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.UpdateSegmentNodes.Size()))
		n26, err := m.UpdateSegmentNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func encodeVarintClusterState(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterState) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovClusterState(uint64(m.Index))
	}
	if m.CurrentSegmentID != 0 {
		n += 1 + sovClusterState(uint64(m.CurrentSegmentID))
	}
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.OpenSegments) > 0 {
		for _, e := range m.OpenSegments {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.ClosedSegments) > 0 {
		for _, e := range m.ClosedSegments {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	return n
}

func (m *ClusterNamespace) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.ConsumerGroups) > 0 {
		for _, e := range m.ConsumerGroups {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	return n
}

func (m *ClusterTopic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.Shards != 0 {
		n += 1 + sovClusterState(uint64(m.Shards))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovClusterState(uint64(m.ReplicationFactor))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Retention)
	n += 1 + l + sovClusterState(uint64(l))
	return n
}

func (m *ClusterConsumerGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if len(m.Bindings) > 0 {
		for _, e := range m.Bindings {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if m.Shards != 0 {
		n += 1 + sovClusterState(uint64(m.Shards))
	}
	return n
}

func (m *ClusterConsumerGroup_Binding) Size() (n int) {
	var l int
	_ = l
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	l = len(m.RoutingKey)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterSegment) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = m.Topic.Size()
	n += 1 + l + sovClusterState(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)
	n += 1 + l + sovClusterState(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)
	n += 1 + l + sovClusterState(uint64(l))
	l = m.Nodes.Size()
	n += 1 + l + sovClusterState(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovClusterState(uint64(m.Size_))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterSegment_Nodes) Size() (n int) {
	var l int
	_ = l
	if m.PrimaryNodeID != 0 {
		n += 1 + sovClusterState(uint64(m.PrimaryNodeID))
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		l = 0
		for _, e := range m.ReplicatingNodeIDs {
			l += sovClusterState(uint64(e))
		}
		n += 1 + sovClusterState(uint64(l)) + l
	}
	if len(m.DoneNodeIDs) > 0 {
		l = 0
		for _, e := range m.DoneNodeIDs {
			l += sovClusterState(uint64(e))
		}
		n += 1 + sovClusterState(uint64(l)) + l
	}
	return n
}

func (m *ClusterNode) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovClusterState(uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *OpenSegmentCommand) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = m.Topic.Size()
	n += 1 + l + sovClusterState(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)
	n += 1 + l + sovClusterState(uint64(l))
	if m.PrimaryNodeID != 0 {
		n += 1 + sovClusterState(uint64(m.PrimaryNodeID))
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		l = 0
		for _, e := range m.ReplicatingNodeIDs {
			l += sovClusterState(uint64(e))
		}
		n += 1 + sovClusterState(uint64(l)) + l
	}
	return n
}

func (m *CloseSegmentCommand) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	if m.DoneNodeID != 0 {
		n += 1 + sovClusterState(uint64(m.DoneNodeID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)
	n += 1 + l + sovClusterState(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovClusterState(uint64(m.Size_))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *UpdateNodeCommand) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovClusterState(uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *UpdateSegmentNodesCommand) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	if m.Which != 0 {
		n += 1 + sovClusterState(uint64(m.Which))
	}
	l = m.Nodes.Size()
	n += 1 + l + sovClusterState(uint64(l))
	return n
}

func (m *Command) Size() (n int) {
	var l int
	_ = l
	if m.Command != nil {
		n += m.Command.Size()
	}
	return n
}

func (m *Command_ConfigureTopic) Size() (n int) {
	var l int
	_ = l
	if m.ConfigureTopic != nil {
		l = m.ConfigureTopic.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_DeleteTopic) Size() (n int) {
	var l int
	_ = l
	if m.DeleteTopic != nil {
		l = m.DeleteTopic.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_ConfigureConsumerGroup) Size() (n int) {
	var l int
	_ = l
	if m.ConfigureConsumerGroup != nil {
		l = m.ConfigureConsumerGroup.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_DeleteConsumerGroup) Size() (n int) {
	var l int
	_ = l
	if m.DeleteConsumerGroup != nil {
		l = m.DeleteConsumerGroup.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_OpenSegment) Size() (n int) {
	var l int
	_ = l
	if m.OpenSegment != nil {
		l = m.OpenSegment.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_CloseSegment) Size() (n int) {
	var l int
	_ = l
	if m.CloseSegment != nil {
		l = m.CloseSegment.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_UpdateNode) Size() (n int) {
	var l int
	_ = l
	if m.UpdateNode != nil {
		l = m.UpdateNode.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *Command_UpdateSegmentNodes) Size() (n int) {
	var l int
	_ = l
	if m.UpdateSegmentNodes != nil {
		l = m.UpdateSegmentNodes.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func sovClusterState(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClusterState(x uint64) (n int) {
	return sovClusterState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSegmentID", wireType)
			}
			m.CurrentSegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &ClusterNamespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenSegments = append(m.OpenSegments, &ClusterSegment{})
			if err := m.OpenSegments[len(m.OpenSegments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedSegments = append(m.ClosedSegments, &ClusterSegment{})
			if err := m.ClosedSegments[len(m.ClosedSegments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ClusterNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterNamespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterNamespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterNamespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &ClusterTopic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerGroups = append(m.ConsumerGroups, &ClusterConsumerGroup{})
			if err := m.ConsumerGroups[len(m.ConsumerGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Retention, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterConsumerGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterConsumerGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterConsumerGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bindings = append(m.Bindings, &ClusterConsumerGroup_Binding{})
			if err := m.Bindings[len(m.Bindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterConsumerGroup_Binding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutingKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OpenedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterSegment_Nodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNodeID", wireType)
			}
			m.PrimaryNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClusterState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatingNodeIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DoneNodeIDs = append(m.DoneNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClusterState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DoneNodeIDs = append(m.DoneNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneNodeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ClusterNode_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAlive == nil {
				m.LastSeenAlive = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAlive, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenSegmentCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenSegmentCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenSegmentCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OpenedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNodeID", wireType)
			}
			m.PrimaryNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClusterState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatingNodeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSegmentCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSegmentCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSegmentCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneNodeID", wireType)
			}
			m.DoneNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNodeCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNodeCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNodeCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ClusterNode_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAlive == nil {
				m.LastSeenAlive = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAlive, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSegmentNodesCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSegmentNodesCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSegmentNodesCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Which", wireType)
			}
			m.Which = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Which |= (UpdateSegmentNodesCommand_Which(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigureTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &client.ConfigureTopicRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_ConfigureTopic{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &client.DeleteTopicRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_DeleteTopic{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigureConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &client.ConfigureConsumerGroupRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_ConfigureConsumerGroup{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &client.DeleteConsumerGroupRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_DeleteConsumerGroup{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenSegmentCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_OpenSegment{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseSegmentCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_CloseSegment{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateNodeCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_UpdateNode{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSegmentNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateSegmentNodesCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &Command_UpdateSegmentNodes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClusterState
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClusterState(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClusterState = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterState   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cluster_state.proto", fileDescriptor_cluster_state_915e53765ec0b9ea) }

var fileDescriptor_cluster_state_915e53765ec0b9ea = []byte{
	// 1228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4b, 0x73, 0x1b, 0xc5,
	0x13, 0xd7, 0xca, 0x5a, 0xd9, 0x6a, 0x3d, 0xac, 0x8c, 0xf5, 0xf7, 0x7f, 0x63, 0x62, 0xc9, 0x2c,
	0xa1, 0xca, 0x50, 0x64, 0x4d, 0x14, 0xaa, 0xa8, 0xdc, 0xa2, 0x87, 0xb1, 0x0c, 0x21, 0x76, 0x8d,
	0x03, 0x54, 0x51, 0x45, 0x89, 0xf5, 0xce, 0x58, 0xde, 0x42, 0xda, 0x95, 0x77, 0x66, 0x03, 0xe6,
	0x53, 0xe4, 0x06, 0xdf, 0x81, 0x03, 0x37, 0xce, 0x70, 0x73, 0x71, 0xe2, 0xc6, 0x81, 0x2a, 0x91,
	0x12, 0x47, 0xbe, 0x04, 0x35, 0x33, 0xbb, 0x92, 0xac, 0x47, 0x22, 0x1e, 0x87, 0x9c, 0xb4, 0x33,
	0xdd, 0xfd, 0x9b, 0x7e, 0xfc, 0xba, 0x67, 0x04, 0x1b, 0x4e, 0x37, 0x64, 0x9c, 0x06, 0x6d, 0xc6,
	0x6d, 0x4e, 0xad, 0x7e, 0xe0, 0x73, 0x1f, 0x15, 0x5c, 0xdf, 0xa2, 0x4f, 0xa8, 0xc7, 0x39, 0x0d,
	0xac, 0xde, 0xc5, 0xd6, 0xff, 0x9d, 0xae, 0x4b, 0x3d, 0xbe, 0x17, 0xef, 0xf5, 0x2e, 0x94, 0xe2,
	0x56, 0xa9, 0xe3, 0x77, 0x7c, 0xf9, 0xb9, 0x27, 0xbe, 0xa2, 0xdd, 0x72, 0xc7, 0xf7, 0x3b, 0x5d,
	0xba, 0x27, 0x57, 0xa7, 0xe1, 0xd9, 0x1e, 0x09, 0x03, 0x9b, 0xbb, 0xbe, 0x17, 0xc9, 0x2b, 0xd3,
	0x72, 0xee, 0xf6, 0x28, 0xe3, 0x76, 0xaf, 0xaf, 0x14, 0xcc, 0x3f, 0x93, 0x90, 0x6b, 0x28, 0xbf,
	0x4e, 0x84, 0x5b, 0xa8, 0x04, 0xba, 0xeb, 0x11, 0xfa, 0x95, 0xa1, 0xed, 0x68, 0xbb, 0x29, 0xac,
	0x16, 0xa8, 0x0e, 0xc8, 0x09, 0x83, 0x80, 0x7a, 0xbc, 0xcd, 0x68, 0xa7, 0x27, 0x7e, 0x5d, 0x62,
	0x24, 0x85, 0x4a, 0xbd, 0x34, 0x1c, 0x54, 0x8a, 0x0d, 0x25, 0x3d, 0x51, 0xc2, 0xc3, 0x26, 0x2e,
	0x3a, 0xd7, 0x77, 0x08, 0x7a, 0x00, 0xe0, 0xd9, 0x3d, 0xca, 0xfa, 0xb6, 0x43, 0x99, 0xb1, 0xb2,
	0xb3, 0xb2, 0x9b, 0xad, 0xee, 0x58, 0xd7, 0xe3, 0xb7, 0x22, 0x5f, 0x1e, 0xc5, 0x8a, 0x78, 0xc2,
	0x06, 0x35, 0x20, 0xef, 0xf7, 0xa9, 0x17, 0xbb, 0xc0, 0x8c, 0x94, 0x04, 0x29, 0x2f, 0x00, 0x89,
	0x8e, 0xc6, 0x39, 0x61, 0x14, 0x2d, 0x18, 0x3a, 0x80, 0x75, 0xa7, 0xeb, 0x33, 0x4a, 0xc6, 0x30,
	0xfa, 0x52, 0x30, 0x05, 0x65, 0x36, 0x02, 0xba, 0x0b, 0xba, 0xe7, 0x13, 0xca, 0x8c, 0xb4, 0x34,
	0x7f, 0x65, 0x51, 0x28, 0x3e, 0xa1, 0x58, 0x69, 0x9a, 0xdf, 0x69, 0x50, 0x9c, 0x8e, 0x10, 0x21,
	0x48, 0x89, 0x18, 0x65, 0xc2, 0x33, 0x58, 0x7e, 0xa3, 0x77, 0x20, 0xcd, 0xfd, 0xbe, 0xeb, 0x30,
	0x23, 0x29, 0xc1, 0x6f, 0x2d, 0x00, 0x7f, 0x2c, 0x94, 0x70, 0xa4, 0x8b, 0x3e, 0x84, 0x75, 0xc7,
	0xf7, 0x58, 0xd8, 0xa3, 0x41, 0xbb, 0x13, 0xf8, 0x61, 0x3f, 0x4e, 0xf3, 0xed, 0x05, 0xe6, 0x8d,
	0x48, 0xfb, 0x40, 0x28, 0xe3, 0x82, 0x33, 0xb9, 0x64, 0xe6, 0x8f, 0xda, 0x88, 0x1b, 0xf2, 0x9c,
	0xb9, 0x9e, 0x22, 0x48, 0xf1, 0xcb, 0x3e, 0x95, 0x5c, 0xc8, 0x60, 0xf9, 0x8d, 0x36, 0x21, 0xcd,
	0xce, 0xed, 0x80, 0x88, 0xe3, 0xb5, 0xdd, 0x3c, 0x8e, 0x56, 0xe8, 0x0e, 0xa0, 0x80, 0xf6, 0xbb,
	0xae, 0x23, 0x29, 0xda, 0x3e, 0xb3, 0x1d, 0xee, 0x07, 0x46, 0x4a, 0xea, 0xdc, 0x98, 0x90, 0xbc,
	0x27, 0x05, 0xa8, 0x06, 0x99, 0x80, 0x72, 0xea, 0x89, 0x2d, 0x43, 0xdf, 0xd1, 0x76, 0xb3, 0xd5,
	0x9b, 0x96, 0x22, 0xb4, 0x15, 0x13, 0xda, 0x6a, 0x46, 0x84, 0xaf, 0xaf, 0x5d, 0x0d, 0x2a, 0x89,
	0x6f, 0x7f, 0xaf, 0x68, 0x78, 0x6c, 0x65, 0xfe, 0xaa, 0x41, 0x69, 0x5e, 0xac, 0x73, 0x43, 0x69,
	0xc1, 0xda, 0xa9, 0xeb, 0x11, 0xd7, 0xeb, 0xc4, 0x69, 0x7f, 0x6b, 0x99, 0xbc, 0x59, 0x75, 0x65,
	0x84, 0x47, 0xd6, 0x8b, 0x12, 0xb0, 0x75, 0x08, 0xab, 0x91, 0x32, 0xda, 0x06, 0x90, 0x55, 0x6b,
	0x4f, 0xb8, 0x91, 0x91, 0x3b, 0x82, 0x19, 0xa8, 0x02, 0xd9, 0xc0, 0x0f, 0xb9, 0xeb, 0x75, 0xda,
	0x5f, 0xd0, 0xcb, 0x28, 0xbb, 0x10, 0x6d, 0x7d, 0x40, 0x2f, 0xcd, 0x6f, 0x52, 0x50, 0xb8, 0x4e,
	0x50, 0xb4, 0x09, 0x49, 0x97, 0xa8, 0xbe, 0xad, 0xa7, 0x87, 0x83, 0x4a, 0xf2, 0xb0, 0x89, 0x93,
	0x2e, 0x41, 0xf7, 0x41, 0x97, 0xc0, 0x12, 0x25, 0x5b, 0xdd, 0x9e, 0x0e, 0x6a, 0x44, 0x45, 0xf1,
	0x51, 0x4f, 0x89, 0x3c, 0x62, 0x65, 0x21, 0x4a, 0x20, 0x9a, 0x87, 0x92, 0xb6, 0xcd, 0x65, 0x2c,
	0xd9, 0xea, 0xd6, 0x4c, 0x09, 0x1e, 0xc7, 0x33, 0x45, 0xd5, 0xe0, 0xa9, 0xa8, 0xc1, 0x9a, 0x32,
	0xab, 0x71, 0x01, 0x11, 0xf5, 0x9b, 0xcd, 0x65, 0xad, 0x97, 0x86, 0x50, 0x66, 0x35, 0x8e, 0x1e,
	0xc4, 0x9d, 0xa6, 0x48, 0x70, 0xfb, 0xf9, 0x8d, 0x6a, 0x89, 0x8e, 0x63, 0x71, 0x1c, 0xd2, 0x50,
	0x94, 0x9b, 0xb9, 0x5f, 0x53, 0x23, 0x2d, 0x87, 0x9a, 0xfc, 0x96, 0x7b, 0xe7, 0xf6, 0x5d, 0x63,
	0x75, 0x47, 0xdb, 0xcd, 0x61, 0xf9, 0xbd, 0xf5, 0x93, 0x06, 0xba, 0x34, 0x47, 0xf7, 0x61, 0xbd,
	0x1f, 0xb8, 0x3d, 0x3b, 0xb8, 0x6c, 0x0b, 0x88, 0xf6, 0x28, 0xb3, 0x37, 0x86, 0x83, 0x4a, 0xfe,
	0x58, 0x89, 0x84, 0xea, 0x61, 0x13, 0xe7, 0xfb, 0x13, 0x4b, 0x82, 0x5a, 0x50, 0x1a, 0x91, 0xd9,
	0xeb, 0xc4, 0xe6, 0x8a, 0x53, 0xa9, 0xfa, 0xe6, 0x70, 0x50, 0x41, 0x78, 0x2c, 0x57, 0x18, 0x0c,
	0xa3, 0x60, 0x6a, 0x8f, 0x30, 0x74, 0x0f, 0xf2, 0xc4, 0xf7, 0xe8, 0x18, 0x62, 0x45, 0x42, 0xac,
	0x0f, 0x07, 0x95, 0x6c, 0xd3, 0xf7, 0x68, 0x6c, 0x9b, 0x25, 0xf1, 0x82, 0x30, 0xf3, 0x99, 0x06,
	0xd9, 0x89, 0xd9, 0xb3, 0x90, 0x16, 0x06, 0xac, 0xda, 0x84, 0x04, 0x94, 0xb1, 0x88, 0x5e, 0xf1,
	0x12, 0xbd, 0x0b, 0xba, 0xbc, 0xa3, 0x64, 0xc5, 0x0b, 0xd5, 0x57, 0x9f, 0x33, 0xd9, 0x2c, 0x79,
	0x6b, 0x60, 0xa5, 0x8f, 0x5a, 0xb0, 0xde, 0xb5, 0x99, 0xb8, 0x23, 0xa8, 0xd7, 0xb6, 0xbb, 0xee,
	0x13, 0xba, 0x44, 0xc5, 0x53, 0xb2, 0xda, 0x79, 0x61, 0x78, 0x42, 0xa9, 0x57, 0x13, 0x66, 0xe6,
	0x2d, 0xd0, 0xd5, 0x7d, 0xb4, 0x06, 0xa9, 0xe6, 0x7e, 0xad, 0x59, 0x4c, 0xa0, 0x0c, 0xe8, 0xb5,
	0x87, 0x87, 0x1f, 0xef, 0x17, 0x35, 0xf3, 0xfb, 0x24, 0xa0, 0xa3, 0xf1, 0x50, 0x6f, 0xf8, 0xbd,
	0x9e, 0xed, 0x91, 0x97, 0xb4, 0x01, 0xe6, 0x30, 0x29, 0xf5, 0x2f, 0x99, 0xa4, 0xff, 0x5d, 0x26,
	0x99, 0x3f, 0x6b, 0xb0, 0xd1, 0x10, 0xfd, 0xb4, 0x64, 0xca, 0xde, 0x86, 0xdc, 0x24, 0xf3, 0xa2,
	0xab, 0xbe, 0x30, 0x1c, 0x54, 0x60, 0x4c, 0x3c, 0x0c, 0x63, 0xde, 0xfd, 0x17, 0x7d, 0x1e, 0x77,
	0xa9, 0x3e, 0xa7, 0x4b, 0xd3, 0xe3, 0x2e, 0x35, 0xaf, 0x34, 0xb8, 0xf1, 0x51, 0x9f, 0xd8, 0x5c,
	0x9e, 0xfd, 0xa2, 0x50, 0x5e, 0x6a, 0x9e, 0xff, 0xa6, 0xc1, 0x4d, 0x15, 0x4a, 0x54, 0x18, 0x39,
	0x7d, 0x5e, 0x14, 0xd2, 0x3e, 0xe8, 0x5f, 0x9e, 0xbb, 0xce, 0xb9, 0x0c, 0xa8, 0x50, 0xdd, 0x9b,
	0x76, 0x7c, 0x21, 0xa2, 0xf5, 0x89, 0x30, 0xc3, 0xca, 0x7a, 0x3c, 0x57, 0x57, 0xfe, 0xe1, 0x5c,
	0x35, 0xb7, 0x41, 0x97, 0x88, 0xa2, 0x4d, 0x8f, 0x8e, 0xf7, 0x1f, 0x15, 0x13, 0x08, 0x20, 0xdd,
	0x78, 0x78, 0x74, 0xb2, 0xdf, 0x2c, 0x6a, 0xe6, 0x0f, 0x3a, 0xac, 0xc6, 0xb1, 0x1c, 0xcb, 0xc7,
	0xc9, 0x99, 0xdb, 0x09, 0x03, 0xda, 0x56, 0xed, 0xa8, 0xc9, 0x63, 0x5f, 0x9f, 0x39, 0x36, 0x56,
	0x53, 0xaf, 0x1b, 0x7a, 0x11, 0x52, 0xc6, 0x5b, 0x09, 0xf9, 0x3e, 0x99, 0x10, 0xa0, 0x03, 0xc8,
	0x11, 0xda, 0xa5, 0x3c, 0x86, 0x53, 0xdd, 0x6d, 0x4e, 0xc3, 0x35, 0xa5, 0xce, 0x14, 0x56, 0x96,
	0x8c, 0x77, 0x91, 0x0b, 0xc6, 0xd8, 0xb5, 0xeb, 0x2f, 0xa8, 0x28, 0x35, 0x77, 0x16, 0xfa, 0x78,
	0xfd, 0x09, 0x35, 0xc2, 0xdf, 0x74, 0xe6, 0x2a, 0xa0, 0xcf, 0xe1, 0x7f, 0x91, 0xcf, 0x53, 0xe7,
	0x28, 0xfe, 0xbc, 0x39, 0xdf, 0xf9, 0x05, 0x87, 0x6c, 0x90, 0x59, 0xa9, 0xc8, 0xca, 0xe4, 0x23,
	0x39, 0xba, 0x33, 0x67, 0xb2, 0x32, 0x3b, 0x3e, 0x45, 0x56, 0x26, 0x5e, 0xca, 0xe8, 0x7d, 0xc8,
	0xcb, 0xce, 0x1c, 0x21, 0xa5, 0x25, 0xd2, 0x6b, 0xb3, 0x2c, 0x99, 0x19, 0x2b, 0xad, 0x04, 0xce,
	0x39, 0x13, 0xdb, 0xa8, 0x09, 0xd9, 0x50, 0x72, 0x52, 0x0e, 0x14, 0x79, 0xe5, 0x66, 0x67, 0xfb,
	0x6d, 0xa6, 0xa7, 0x5b, 0x09, 0x0c, 0xe1, 0x68, 0x13, 0x7d, 0x06, 0xa5, 0x08, 0x25, 0xfe, 0x13,
	0xa2, 0xe8, 0xbb, 0x26, 0xe1, 0xde, 0x58, 0xba, 0x0b, 0x5a, 0x09, 0x8c, 0xc2, 0x19, 0x61, 0x3d,
	0x03, 0xab, 0x8e, 0x52, 0xa8, 0x97, 0xae, 0x86, 0x65, 0xed, 0x97, 0x61, 0x59, 0x7b, 0x36, 0x2c,
	0x6b, 0x4f, 0xff, 0x28, 0x27, 0x3e, 0x4d, 0xf6, 0x2e, 0x4e, 0xd3, 0xb2, 0xab, 0xef, 0xfd, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xc6, 0x14, 0xf1, 0xfc, 0xca, 0x0d, 0x00, 0x00,
}
