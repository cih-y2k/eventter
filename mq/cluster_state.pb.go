// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cluster_state.proto

package mq

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import client "eventter.io/mq/client"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ClusterSegment_Type int32

const (
	ClusterSegment_INVALID                       ClusterSegment_Type = 0
	ClusterSegment_TOPIC                         ClusterSegment_Type = 1
	ClusterSegment_CONSUMER_GROUP_OFFSET_COMMITS ClusterSegment_Type = 2
)

var ClusterSegment_Type_name = map[int32]string{
	0: "INVALID",
	1: "TOPIC",
	2: "CONSUMER_GROUP_OFFSET_COMMITS",
}
var ClusterSegment_Type_value = map[string]int32{
	"INVALID":                       0,
	"TOPIC":                         1,
	"CONSUMER_GROUP_OFFSET_COMMITS": 2,
}

func (x ClusterSegment_Type) String() string {
	return proto.EnumName(ClusterSegment_Type_name, int32(x))
}
func (ClusterSegment_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{4, 0}
}

type ClusterNode_State int32

const (
	ClusterNode_DEAD  ClusterNode_State = 0
	ClusterNode_ALIVE ClusterNode_State = 1
)

var ClusterNode_State_name = map[int32]string{
	0: "DEAD",
	1: "ALIVE",
}
var ClusterNode_State_value = map[string]int32{
	"DEAD":  0,
	"ALIVE": 1,
}

func (x ClusterNode_State) String() string {
	return proto.EnumName(ClusterNode_State_name, int32(x))
}
func (ClusterNode_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{5, 0}
}

type ClusterCommandSegmentNodesUpdate_Which int32

const (
	ClusterCommandSegmentNodesUpdate_INVALID ClusterCommandSegmentNodesUpdate_Which = 0
	ClusterCommandSegmentNodesUpdate_OPEN    ClusterCommandSegmentNodesUpdate_Which = 1
	ClusterCommandSegmentNodesUpdate_CLOSED  ClusterCommandSegmentNodesUpdate_Which = 2
)

var ClusterCommandSegmentNodesUpdate_Which_name = map[int32]string{
	0: "INVALID",
	1: "OPEN",
	2: "CLOSED",
}
var ClusterCommandSegmentNodesUpdate_Which_value = map[string]int32{
	"INVALID": 0,
	"OPEN":    1,
	"CLOSED":  2,
}

func (x ClusterCommandSegmentNodesUpdate_Which) String() string {
	return proto.EnumName(ClusterCommandSegmentNodesUpdate_Which_name, int32(x))
}
func (ClusterCommandSegmentNodesUpdate_Which) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{15, 0}
}

type ClusterCommandSegmentDelete_Which int32

const (
	ClusterCommandSegmentDelete_INVALID ClusterCommandSegmentDelete_Which = 0
	ClusterCommandSegmentDelete_OPEN    ClusterCommandSegmentDelete_Which = 1
	ClusterCommandSegmentDelete_CLOSED  ClusterCommandSegmentDelete_Which = 2
)

var ClusterCommandSegmentDelete_Which_name = map[int32]string{
	0: "INVALID",
	1: "OPEN",
	2: "CLOSED",
}
var ClusterCommandSegmentDelete_Which_value = map[string]int32{
	"INVALID": 0,
	"OPEN":    1,
	"CLOSED":  2,
}

func (x ClusterCommandSegmentDelete_Which) String() string {
	return proto.EnumName(ClusterCommandSegmentDelete_Which_name, int32(x))
}
func (ClusterCommandSegmentDelete_Which) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{16, 0}
}

type ClusterState struct {
	Index                uint64              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	CurrentSegmentID     uint64              `protobuf:"varint,2,opt,name=current_segment_id,json=currentSegmentId,proto3" json:"current_segment_id,omitempty"`
	Namespaces           []*ClusterNamespace `protobuf:"bytes,3,rep,name=namespaces" json:"namespaces,omitempty"`
	OpenSegments         []*ClusterSegment   `protobuf:"bytes,4,rep,name=open_segments,json=openSegments" json:"open_segments,omitempty"`
	ClosedSegments       []*ClusterSegment   `protobuf:"bytes,5,rep,name=closed_segments,json=closedSegments" json:"closed_segments,omitempty"`
	Nodes                []*ClusterNode      `protobuf:"bytes,6,rep,name=nodes" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterState) Reset()         { *m = ClusterState{} }
func (m *ClusterState) String() string { return proto.CompactTextString(m) }
func (*ClusterState) ProtoMessage()    {}
func (*ClusterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{0}
}
func (m *ClusterState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterState.Merge(dst, src)
}
func (m *ClusterState) XXX_Size() int {
	return m.Size()
}
func (m *ClusterState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterState.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterState proto.InternalMessageInfo

func (m *ClusterState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ClusterState) GetCurrentSegmentID() uint64 {
	if m != nil {
		return m.CurrentSegmentID
	}
	return 0
}

func (m *ClusterState) GetNamespaces() []*ClusterNamespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *ClusterState) GetOpenSegments() []*ClusterSegment {
	if m != nil {
		return m.OpenSegments
	}
	return nil
}

func (m *ClusterState) GetClosedSegments() []*ClusterSegment {
	if m != nil {
		return m.ClosedSegments
	}
	return nil
}

func (m *ClusterState) GetNodes() []*ClusterNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type ClusterNamespace struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Topics               []*ClusterTopic         `protobuf:"bytes,2,rep,name=topics" json:"topics,omitempty"`
	ConsumerGroups       []*ClusterConsumerGroup `protobuf:"bytes,3,rep,name=consumer_groups,json=consumerGroups" json:"consumer_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClusterNamespace) Reset()         { *m = ClusterNamespace{} }
func (m *ClusterNamespace) String() string { return proto.CompactTextString(m) }
func (*ClusterNamespace) ProtoMessage()    {}
func (*ClusterNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{1}
}
func (m *ClusterNamespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterNamespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterNamespace.Merge(dst, src)
}
func (m *ClusterNamespace) XXX_Size() int {
	return m.Size()
}
func (m *ClusterNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterNamespace proto.InternalMessageInfo

func (m *ClusterNamespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterNamespace) GetTopics() []*ClusterTopic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ClusterNamespace) GetConsumerGroups() []*ClusterConsumerGroup {
	if m != nil {
		return m.ConsumerGroups
	}
	return nil
}

type ClusterTopic struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Shards               uint32        `protobuf:"varint,3,opt,name=shards,proto3" json:"shards,omitempty"`
	ReplicationFactor    uint32        `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	Retention            time.Duration `protobuf:"bytes,5,opt,name=retention,stdduration" json:"retention"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterTopic) Reset()         { *m = ClusterTopic{} }
func (m *ClusterTopic) String() string { return proto.CompactTextString(m) }
func (*ClusterTopic) ProtoMessage()    {}
func (*ClusterTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{2}
}
func (m *ClusterTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterTopic.Merge(dst, src)
}
func (m *ClusterTopic) XXX_Size() int {
	return m.Size()
}
func (m *ClusterTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterTopic.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterTopic proto.InternalMessageInfo

func (m *ClusterTopic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterTopic) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClusterTopic) GetShards() uint32 {
	if m != nil {
		return m.Shards
	}
	return 0
}

func (m *ClusterTopic) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *ClusterTopic) GetRetention() time.Duration {
	if m != nil {
		return m.Retention
	}
	return 0
}

type ClusterConsumerGroup struct {
	Name                 string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bindings             []*ClusterConsumerGroup_Binding      `protobuf:"bytes,2,rep,name=bindings" json:"bindings,omitempty"`
	Size_                uint32                               `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	OffsetCommits        []*ClusterConsumerGroup_OffsetCommit `protobuf:"bytes,4,rep,name=offset_commits,json=offsetCommits" json:"offset_commits,omitempty"`
	CreatedAt            time.Time                            `protobuf:"bytes,5,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ClusterConsumerGroup) Reset()         { *m = ClusterConsumerGroup{} }
func (m *ClusterConsumerGroup) String() string { return proto.CompactTextString(m) }
func (*ClusterConsumerGroup) ProtoMessage()    {}
func (*ClusterConsumerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{3}
}
func (m *ClusterConsumerGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterConsumerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterConsumerGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterConsumerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConsumerGroup.Merge(dst, src)
}
func (m *ClusterConsumerGroup) XXX_Size() int {
	return m.Size()
}
func (m *ClusterConsumerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConsumerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConsumerGroup proto.InternalMessageInfo

func (m *ClusterConsumerGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterConsumerGroup) GetBindings() []*ClusterConsumerGroup_Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

func (m *ClusterConsumerGroup) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ClusterConsumerGroup) GetOffsetCommits() []*ClusterConsumerGroup_OffsetCommit {
	if m != nil {
		return m.OffsetCommits
	}
	return nil
}

func (m *ClusterConsumerGroup) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type ClusterConsumerGroup_Binding struct {
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// Types that are valid to be assigned to By:
	//	*ClusterConsumerGroup_Binding_RoutingKey
	//	*ClusterConsumerGroup_Binding_HeadersAll
	//	*ClusterConsumerGroup_Binding_HeadersAny
	By                   isClusterConsumerGroup_Binding_By `protobuf_oneof:"by"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ClusterConsumerGroup_Binding) Reset()         { *m = ClusterConsumerGroup_Binding{} }
func (m *ClusterConsumerGroup_Binding) String() string { return proto.CompactTextString(m) }
func (*ClusterConsumerGroup_Binding) ProtoMessage()    {}
func (*ClusterConsumerGroup_Binding) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{3, 0}
}
func (m *ClusterConsumerGroup_Binding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterConsumerGroup_Binding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterConsumerGroup_Binding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterConsumerGroup_Binding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConsumerGroup_Binding.Merge(dst, src)
}
func (m *ClusterConsumerGroup_Binding) XXX_Size() int {
	return m.Size()
}
func (m *ClusterConsumerGroup_Binding) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConsumerGroup_Binding.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConsumerGroup_Binding proto.InternalMessageInfo

type isClusterConsumerGroup_Binding_By interface {
	isClusterConsumerGroup_Binding_By()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClusterConsumerGroup_Binding_RoutingKey struct {
	RoutingKey string `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3,oneof"`
}
type ClusterConsumerGroup_Binding_HeadersAll struct {
	HeadersAll *types.Struct `protobuf:"bytes,3,opt,name=headers_all,json=headersAll,oneof"`
}
type ClusterConsumerGroup_Binding_HeadersAny struct {
	HeadersAny *types.Struct `protobuf:"bytes,4,opt,name=headers_any,json=headersAny,oneof"`
}

func (*ClusterConsumerGroup_Binding_RoutingKey) isClusterConsumerGroup_Binding_By() {}
func (*ClusterConsumerGroup_Binding_HeadersAll) isClusterConsumerGroup_Binding_By() {}
func (*ClusterConsumerGroup_Binding_HeadersAny) isClusterConsumerGroup_Binding_By() {}

func (m *ClusterConsumerGroup_Binding) GetBy() isClusterConsumerGroup_Binding_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *ClusterConsumerGroup_Binding) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *ClusterConsumerGroup_Binding) GetRoutingKey() string {
	if x, ok := m.GetBy().(*ClusterConsumerGroup_Binding_RoutingKey); ok {
		return x.RoutingKey
	}
	return ""
}

func (m *ClusterConsumerGroup_Binding) GetHeadersAll() *types.Struct {
	if x, ok := m.GetBy().(*ClusterConsumerGroup_Binding_HeadersAll); ok {
		return x.HeadersAll
	}
	return nil
}

func (m *ClusterConsumerGroup_Binding) GetHeadersAny() *types.Struct {
	if x, ok := m.GetBy().(*ClusterConsumerGroup_Binding_HeadersAny); ok {
		return x.HeadersAny
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClusterConsumerGroup_Binding) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClusterConsumerGroup_Binding_OneofMarshaler, _ClusterConsumerGroup_Binding_OneofUnmarshaler, _ClusterConsumerGroup_Binding_OneofSizer, []interface{}{
		(*ClusterConsumerGroup_Binding_RoutingKey)(nil),
		(*ClusterConsumerGroup_Binding_HeadersAll)(nil),
		(*ClusterConsumerGroup_Binding_HeadersAny)(nil),
	}
}

func _ClusterConsumerGroup_Binding_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClusterConsumerGroup_Binding)
	// by
	switch x := m.By.(type) {
	case *ClusterConsumerGroup_Binding_RoutingKey:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RoutingKey)
	case *ClusterConsumerGroup_Binding_HeadersAll:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadersAll); err != nil {
			return err
		}
	case *ClusterConsumerGroup_Binding_HeadersAny:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeadersAny); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClusterConsumerGroup_Binding.By has unexpected type %T", x)
	}
	return nil
}

func _ClusterConsumerGroup_Binding_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClusterConsumerGroup_Binding)
	switch tag {
	case 2: // by.routing_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.By = &ClusterConsumerGroup_Binding_RoutingKey{x}
		return true, err
	case 3: // by.headers_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Struct)
		err := b.DecodeMessage(msg)
		m.By = &ClusterConsumerGroup_Binding_HeadersAll{msg}
		return true, err
	case 4: // by.headers_any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.Struct)
		err := b.DecodeMessage(msg)
		m.By = &ClusterConsumerGroup_Binding_HeadersAny{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClusterConsumerGroup_Binding_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClusterConsumerGroup_Binding)
	// by
	switch x := m.By.(type) {
	case *ClusterConsumerGroup_Binding_RoutingKey:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.RoutingKey)))
		n += len(x.RoutingKey)
	case *ClusterConsumerGroup_Binding_HeadersAll:
		s := proto.Size(x.HeadersAll)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterConsumerGroup_Binding_HeadersAny:
		s := proto.Size(x.HeadersAny)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ClusterConsumerGroup_OffsetCommit struct {
	SegmentID            uint64   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterConsumerGroup_OffsetCommit) Reset()         { *m = ClusterConsumerGroup_OffsetCommit{} }
func (m *ClusterConsumerGroup_OffsetCommit) String() string { return proto.CompactTextString(m) }
func (*ClusterConsumerGroup_OffsetCommit) ProtoMessage()    {}
func (*ClusterConsumerGroup_OffsetCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{3, 1}
}
func (m *ClusterConsumerGroup_OffsetCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterConsumerGroup_OffsetCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterConsumerGroup_OffsetCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterConsumerGroup_OffsetCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterConsumerGroup_OffsetCommit.Merge(dst, src)
}
func (m *ClusterConsumerGroup_OffsetCommit) XXX_Size() int {
	return m.Size()
}
func (m *ClusterConsumerGroup_OffsetCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterConsumerGroup_OffsetCommit.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterConsumerGroup_OffsetCommit proto.InternalMessageInfo

func (m *ClusterConsumerGroup_OffsetCommit) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *ClusterConsumerGroup_OffsetCommit) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ClusterSegment struct {
	ID                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                client.NamespaceName `protobuf:"bytes,2,opt,name=owner" json:"owner"`
	Type                 ClusterSegment_Type  `protobuf:"varint,3,opt,name=type,proto3,enum=io.eventter.mq.ClusterSegment_Type" json:"type,omitempty"`
	CreatedAt            time.Time            `protobuf:"bytes,4,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	ClosedAt             time.Time            `protobuf:"bytes,5,opt,name=closed_at,json=closedAt,stdtime" json:"closed_at"`
	Nodes                ClusterSegment_Nodes `protobuf:"bytes,6,opt,name=nodes" json:"nodes"`
	Size_                int64                `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	Sha1                 []byte               `protobuf:"bytes,8,opt,name=sha1,proto3" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClusterSegment) Reset()         { *m = ClusterSegment{} }
func (m *ClusterSegment) String() string { return proto.CompactTextString(m) }
func (*ClusterSegment) ProtoMessage()    {}
func (*ClusterSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{4}
}
func (m *ClusterSegment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterSegment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSegment.Merge(dst, src)
}
func (m *ClusterSegment) XXX_Size() int {
	return m.Size()
}
func (m *ClusterSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSegment.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSegment proto.InternalMessageInfo

func (m *ClusterSegment) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterSegment) GetOwner() client.NamespaceName {
	if m != nil {
		return m.Owner
	}
	return client.NamespaceName{}
}

func (m *ClusterSegment) GetType() ClusterSegment_Type {
	if m != nil {
		return m.Type
	}
	return ClusterSegment_INVALID
}

func (m *ClusterSegment) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *ClusterSegment) GetClosedAt() time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return time.Time{}
}

func (m *ClusterSegment) GetNodes() ClusterSegment_Nodes {
	if m != nil {
		return m.Nodes
	}
	return ClusterSegment_Nodes{}
}

func (m *ClusterSegment) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ClusterSegment) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type ClusterSegment_Nodes struct {
	PrimaryNodeID        uint64   `protobuf:"varint,1,opt,name=primary_node_id,json=primaryNodeId,proto3" json:"primary_node_id,omitempty"`
	DoneNodeIDs          []uint64 `protobuf:"varint,2,rep,packed,name=done_node_ids,json=doneNodeIds" json:"done_node_ids,omitempty"`
	ReplicatingNodeIDs   []uint64 `protobuf:"varint,3,rep,packed,name=replicating_node_ids,json=replicatingNodeIds" json:"replicating_node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterSegment_Nodes) Reset()         { *m = ClusterSegment_Nodes{} }
func (m *ClusterSegment_Nodes) String() string { return proto.CompactTextString(m) }
func (*ClusterSegment_Nodes) ProtoMessage()    {}
func (*ClusterSegment_Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{4, 0}
}
func (m *ClusterSegment_Nodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterSegment_Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterSegment_Nodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterSegment_Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSegment_Nodes.Merge(dst, src)
}
func (m *ClusterSegment_Nodes) XXX_Size() int {
	return m.Size()
}
func (m *ClusterSegment_Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSegment_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSegment_Nodes proto.InternalMessageInfo

func (m *ClusterSegment_Nodes) GetPrimaryNodeID() uint64 {
	if m != nil {
		return m.PrimaryNodeID
	}
	return 0
}

func (m *ClusterSegment_Nodes) GetDoneNodeIDs() []uint64 {
	if m != nil {
		return m.DoneNodeIDs
	}
	return nil
}

func (m *ClusterSegment_Nodes) GetReplicatingNodeIDs() []uint64 {
	if m != nil {
		return m.ReplicatingNodeIDs
	}
	return nil
}

type ClusterNode struct {
	ID                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	State                ClusterNode_State `protobuf:"varint,3,opt,name=state,proto3,enum=io.eventter.mq.ClusterNode_State" json:"state,omitempty"`
	LastSeenAlive        *time.Time        `protobuf:"bytes,4,opt,name=last_seen_alive,json=lastSeenAlive,stdtime" json:"last_seen_alive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClusterNode) Reset()         { *m = ClusterNode{} }
func (m *ClusterNode) String() string { return proto.CompactTextString(m) }
func (*ClusterNode) ProtoMessage()    {}
func (*ClusterNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{5}
}
func (m *ClusterNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterNode.Merge(dst, src)
}
func (m *ClusterNode) XXX_Size() int {
	return m.Size()
}
func (m *ClusterNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterNode.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterNode proto.InternalMessageInfo

func (m *ClusterNode) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClusterNode) GetState() ClusterNode_State {
	if m != nil {
		return m.State
	}
	return ClusterNode_DEAD
}

func (m *ClusterNode) GetLastSeenAlive() *time.Time {
	if m != nil {
		return m.LastSeenAlive
	}
	return nil
}

type ClusterCommandNamespaceCreate struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterCommandNamespaceCreate) Reset()         { *m = ClusterCommandNamespaceCreate{} }
func (m *ClusterCommandNamespaceCreate) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandNamespaceCreate) ProtoMessage()    {}
func (*ClusterCommandNamespaceCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{6}
}
func (m *ClusterCommandNamespaceCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandNamespaceCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandNamespaceCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandNamespaceCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandNamespaceCreate.Merge(dst, src)
}
func (m *ClusterCommandNamespaceCreate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandNamespaceCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandNamespaceCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandNamespaceCreate proto.InternalMessageInfo

func (m *ClusterCommandNamespaceCreate) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ClusterCommandNamespaceDelete struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterCommandNamespaceDelete) Reset()         { *m = ClusterCommandNamespaceDelete{} }
func (m *ClusterCommandNamespaceDelete) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandNamespaceDelete) ProtoMessage()    {}
func (*ClusterCommandNamespaceDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{7}
}
func (m *ClusterCommandNamespaceDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandNamespaceDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandNamespaceDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandNamespaceDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandNamespaceDelete.Merge(dst, src)
}
func (m *ClusterCommandNamespaceDelete) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandNamespaceDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandNamespaceDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandNamespaceDelete proto.InternalMessageInfo

func (m *ClusterCommandNamespaceDelete) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ClusterCommandTopicCreate struct {
	Namespace            string        `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Topic                *ClusterTopic `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterCommandTopicCreate) Reset()         { *m = ClusterCommandTopicCreate{} }
func (m *ClusterCommandTopicCreate) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandTopicCreate) ProtoMessage()    {}
func (*ClusterCommandTopicCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{8}
}
func (m *ClusterCommandTopicCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandTopicCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandTopicCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandTopicCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandTopicCreate.Merge(dst, src)
}
func (m *ClusterCommandTopicCreate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandTopicCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandTopicCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandTopicCreate proto.InternalMessageInfo

func (m *ClusterCommandTopicCreate) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterCommandTopicCreate) GetTopic() *ClusterTopic {
	if m != nil {
		return m.Topic
	}
	return nil
}

type ClusterCommandTopicDelete struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterCommandTopicDelete) Reset()         { *m = ClusterCommandTopicDelete{} }
func (m *ClusterCommandTopicDelete) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandTopicDelete) ProtoMessage()    {}
func (*ClusterCommandTopicDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{9}
}
func (m *ClusterCommandTopicDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandTopicDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandTopicDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandTopicDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandTopicDelete.Merge(dst, src)
}
func (m *ClusterCommandTopicDelete) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandTopicDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandTopicDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandTopicDelete proto.InternalMessageInfo

func (m *ClusterCommandTopicDelete) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterCommandTopicDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterCommandConsumerGroupCreate struct {
	Namespace            string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ConsumerGroup        *ClusterConsumerGroup `protobuf:"bytes,2,opt,name=consumer_group,json=consumerGroup" json:"consumer_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClusterCommandConsumerGroupCreate) Reset()         { *m = ClusterCommandConsumerGroupCreate{} }
func (m *ClusterCommandConsumerGroupCreate) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandConsumerGroupCreate) ProtoMessage()    {}
func (*ClusterCommandConsumerGroupCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{10}
}
func (m *ClusterCommandConsumerGroupCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandConsumerGroupCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandConsumerGroupCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandConsumerGroupCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandConsumerGroupCreate.Merge(dst, src)
}
func (m *ClusterCommandConsumerGroupCreate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandConsumerGroupCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandConsumerGroupCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandConsumerGroupCreate proto.InternalMessageInfo

func (m *ClusterCommandConsumerGroupCreate) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterCommandConsumerGroupCreate) GetConsumerGroup() *ClusterConsumerGroup {
	if m != nil {
		return m.ConsumerGroup
	}
	return nil
}

type ClusterCommandConsumerGroupDelete struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterCommandConsumerGroupDelete) Reset()         { *m = ClusterCommandConsumerGroupDelete{} }
func (m *ClusterCommandConsumerGroupDelete) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandConsumerGroupDelete) ProtoMessage()    {}
func (*ClusterCommandConsumerGroupDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{11}
}
func (m *ClusterCommandConsumerGroupDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandConsumerGroupDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandConsumerGroupDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandConsumerGroupDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandConsumerGroupDelete.Merge(dst, src)
}
func (m *ClusterCommandConsumerGroupDelete) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandConsumerGroupDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandConsumerGroupDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandConsumerGroupDelete proto.InternalMessageInfo

func (m *ClusterCommandConsumerGroupDelete) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterCommandConsumerGroupDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterCommandSegmentCreate struct {
	ID                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                client.NamespaceName `protobuf:"bytes,2,opt,name=owner" json:"owner"`
	Type                 ClusterSegment_Type  `protobuf:"varint,3,opt,name=type,proto3,enum=io.eventter.mq.ClusterSegment_Type" json:"type,omitempty"`
	OpenedAt             time.Time            `protobuf:"bytes,4,opt,name=opened_at,json=openedAt,stdtime" json:"opened_at"`
	PrimaryNodeID        uint64               `protobuf:"varint,5,opt,name=primary_node_id,json=primaryNodeId,proto3" json:"primary_node_id,omitempty"`
	ReplicatingNodeIDs   []uint64             `protobuf:"varint,6,rep,packed,name=replicating_node_ids,json=replicatingNodeIds" json:"replicating_node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ClusterCommandSegmentCreate) Reset()         { *m = ClusterCommandSegmentCreate{} }
func (m *ClusterCommandSegmentCreate) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandSegmentCreate) ProtoMessage()    {}
func (*ClusterCommandSegmentCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{12}
}
func (m *ClusterCommandSegmentCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandSegmentCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandSegmentCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandSegmentCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandSegmentCreate.Merge(dst, src)
}
func (m *ClusterCommandSegmentCreate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandSegmentCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandSegmentCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandSegmentCreate proto.InternalMessageInfo

func (m *ClusterCommandSegmentCreate) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterCommandSegmentCreate) GetOwner() client.NamespaceName {
	if m != nil {
		return m.Owner
	}
	return client.NamespaceName{}
}

func (m *ClusterCommandSegmentCreate) GetType() ClusterSegment_Type {
	if m != nil {
		return m.Type
	}
	return ClusterSegment_INVALID
}

func (m *ClusterCommandSegmentCreate) GetOpenedAt() time.Time {
	if m != nil {
		return m.OpenedAt
	}
	return time.Time{}
}

func (m *ClusterCommandSegmentCreate) GetPrimaryNodeID() uint64 {
	if m != nil {
		return m.PrimaryNodeID
	}
	return 0
}

func (m *ClusterCommandSegmentCreate) GetReplicatingNodeIDs() []uint64 {
	if m != nil {
		return m.ReplicatingNodeIDs
	}
	return nil
}

type ClusterCommandSegmentClose struct {
	ID                   uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DoneNodeID           uint64    `protobuf:"varint,2,opt,name=done_node_id,json=doneNodeId,proto3" json:"done_node_id,omitempty"`
	ClosedAt             time.Time `protobuf:"bytes,4,opt,name=closed_at,json=closedAt,stdtime" json:"closed_at"`
	Size_                int64     `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Sha1                 []byte    `protobuf:"bytes,6,opt,name=sha1,proto3" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ClusterCommandSegmentClose) Reset()         { *m = ClusterCommandSegmentClose{} }
func (m *ClusterCommandSegmentClose) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandSegmentClose) ProtoMessage()    {}
func (*ClusterCommandSegmentClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{13}
}
func (m *ClusterCommandSegmentClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandSegmentClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandSegmentClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandSegmentClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandSegmentClose.Merge(dst, src)
}
func (m *ClusterCommandSegmentClose) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandSegmentClose) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandSegmentClose.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandSegmentClose proto.InternalMessageInfo

func (m *ClusterCommandSegmentClose) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterCommandSegmentClose) GetDoneNodeID() uint64 {
	if m != nil {
		return m.DoneNodeID
	}
	return 0
}

func (m *ClusterCommandSegmentClose) GetClosedAt() time.Time {
	if m != nil {
		return m.ClosedAt
	}
	return time.Time{}
}

func (m *ClusterCommandSegmentClose) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ClusterCommandSegmentClose) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type ClusterCommandNodeUpdate struct {
	ID                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	State                ClusterNode_State `protobuf:"varint,3,opt,name=state,proto3,enum=io.eventter.mq.ClusterNode_State" json:"state,omitempty"`
	LastSeenAlive        *time.Time        `protobuf:"bytes,4,opt,name=last_seen_alive,json=lastSeenAlive,stdtime" json:"last_seen_alive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClusterCommandNodeUpdate) Reset()         { *m = ClusterCommandNodeUpdate{} }
func (m *ClusterCommandNodeUpdate) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandNodeUpdate) ProtoMessage()    {}
func (*ClusterCommandNodeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{14}
}
func (m *ClusterCommandNodeUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandNodeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandNodeUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandNodeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandNodeUpdate.Merge(dst, src)
}
func (m *ClusterCommandNodeUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandNodeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandNodeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandNodeUpdate proto.InternalMessageInfo

func (m *ClusterCommandNodeUpdate) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterCommandNodeUpdate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClusterCommandNodeUpdate) GetState() ClusterNode_State {
	if m != nil {
		return m.State
	}
	return ClusterNode_DEAD
}

func (m *ClusterCommandNodeUpdate) GetLastSeenAlive() *time.Time {
	if m != nil {
		return m.LastSeenAlive
	}
	return nil
}

type ClusterCommandSegmentNodesUpdate struct {
	ID                   uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Which                ClusterCommandSegmentNodesUpdate_Which `protobuf:"varint,2,opt,name=which,proto3,enum=io.eventter.mq.ClusterCommandSegmentNodesUpdate_Which" json:"which,omitempty"`
	Nodes                ClusterSegment_Nodes                   `protobuf:"bytes,3,opt,name=nodes" json:"nodes"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ClusterCommandSegmentNodesUpdate) Reset()         { *m = ClusterCommandSegmentNodesUpdate{} }
func (m *ClusterCommandSegmentNodesUpdate) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandSegmentNodesUpdate) ProtoMessage()    {}
func (*ClusterCommandSegmentNodesUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{15}
}
func (m *ClusterCommandSegmentNodesUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandSegmentNodesUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandSegmentNodesUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandSegmentNodesUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandSegmentNodesUpdate.Merge(dst, src)
}
func (m *ClusterCommandSegmentNodesUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandSegmentNodesUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandSegmentNodesUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandSegmentNodesUpdate proto.InternalMessageInfo

func (m *ClusterCommandSegmentNodesUpdate) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterCommandSegmentNodesUpdate) GetWhich() ClusterCommandSegmentNodesUpdate_Which {
	if m != nil {
		return m.Which
	}
	return ClusterCommandSegmentNodesUpdate_INVALID
}

func (m *ClusterCommandSegmentNodesUpdate) GetNodes() ClusterSegment_Nodes {
	if m != nil {
		return m.Nodes
	}
	return ClusterSegment_Nodes{}
}

type ClusterCommandSegmentDelete struct {
	ID                   uint64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Which                ClusterCommandSegmentDelete_Which `protobuf:"varint,2,opt,name=which,proto3,enum=io.eventter.mq.ClusterCommandSegmentDelete_Which" json:"which,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ClusterCommandSegmentDelete) Reset()         { *m = ClusterCommandSegmentDelete{} }
func (m *ClusterCommandSegmentDelete) String() string { return proto.CompactTextString(m) }
func (*ClusterCommandSegmentDelete) ProtoMessage()    {}
func (*ClusterCommandSegmentDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{16}
}
func (m *ClusterCommandSegmentDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandSegmentDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandSegmentDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandSegmentDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandSegmentDelete.Merge(dst, src)
}
func (m *ClusterCommandSegmentDelete) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandSegmentDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandSegmentDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandSegmentDelete proto.InternalMessageInfo

func (m *ClusterCommandSegmentDelete) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ClusterCommandSegmentDelete) GetWhich() ClusterCommandSegmentDelete_Which {
	if m != nil {
		return m.Which
	}
	return ClusterCommandSegmentDelete_INVALID
}

type ClusterCommandConsumerGroupOffsetCommitsUpdate struct {
	Namespace            string                               `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OffsetCommits        []*ClusterConsumerGroup_OffsetCommit `protobuf:"bytes,3,rep,name=offset_commits,json=offsetCommits" json:"offset_commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) Reset() {
	*m = ClusterCommandConsumerGroupOffsetCommitsUpdate{}
}
func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*ClusterCommandConsumerGroupOffsetCommitsUpdate) ProtoMessage() {}
func (*ClusterCommandConsumerGroupOffsetCommitsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{17}
}
func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommandConsumerGroupOffsetCommitsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommandConsumerGroupOffsetCommitsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommandConsumerGroupOffsetCommitsUpdate.Merge(dst, src)
}
func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommandConsumerGroupOffsetCommitsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommandConsumerGroupOffsetCommitsUpdate proto.InternalMessageInfo

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) GetOffsetCommits() []*ClusterConsumerGroup_OffsetCommit {
	if m != nil {
		return m.OffsetCommits
	}
	return nil
}

type ClusterCommand struct {
	// Types that are valid to be assigned to Command:
	//	*ClusterCommand_CreateNamespace
	//	*ClusterCommand_DeleteNamespace
	//	*ClusterCommand_CreateTopic
	//	*ClusterCommand_DeleteTopic
	//	*ClusterCommand_CreateConsumerGroup
	//	*ClusterCommand_DeleteConsumerGroup
	//	*ClusterCommand_UpdateConsumerGroupOffsetCommits
	//	*ClusterCommand_CreateSegment
	//	*ClusterCommand_DeleteSegment
	//	*ClusterCommand_CloseSegment
	//	*ClusterCommand_UpdateSegmentNodes
	//	*ClusterCommand_UpdateNode
	Command              isClusterCommand_Command `protobuf_oneof:"command"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ClusterCommand) Reset()         { *m = ClusterCommand{} }
func (m *ClusterCommand) String() string { return proto.CompactTextString(m) }
func (*ClusterCommand) ProtoMessage()    {}
func (*ClusterCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_cluster_state_ec9ac1e793240dde, []int{18}
}
func (m *ClusterCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClusterCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterCommand.Merge(dst, src)
}
func (m *ClusterCommand) XXX_Size() int {
	return m.Size()
}
func (m *ClusterCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterCommand proto.InternalMessageInfo

type isClusterCommand_Command interface {
	isClusterCommand_Command()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClusterCommand_CreateNamespace struct {
	CreateNamespace *ClusterCommandNamespaceCreate `protobuf:"bytes,10,opt,name=create_namespace,json=createNamespace,oneof"`
}
type ClusterCommand_DeleteNamespace struct {
	DeleteNamespace *ClusterCommandNamespaceDelete `protobuf:"bytes,11,opt,name=delete_namespace,json=deleteNamespace,oneof"`
}
type ClusterCommand_CreateTopic struct {
	CreateTopic *ClusterCommandTopicCreate `protobuf:"bytes,20,opt,name=create_topic,json=createTopic,oneof"`
}
type ClusterCommand_DeleteTopic struct {
	DeleteTopic *ClusterCommandTopicDelete `protobuf:"bytes,21,opt,name=delete_topic,json=deleteTopic,oneof"`
}
type ClusterCommand_CreateConsumerGroup struct {
	CreateConsumerGroup *ClusterCommandConsumerGroupCreate `protobuf:"bytes,30,opt,name=create_consumer_group,json=createConsumerGroup,oneof"`
}
type ClusterCommand_DeleteConsumerGroup struct {
	DeleteConsumerGroup *ClusterCommandConsumerGroupDelete `protobuf:"bytes,31,opt,name=delete_consumer_group,json=deleteConsumerGroup,oneof"`
}
type ClusterCommand_UpdateConsumerGroupOffsetCommits struct {
	UpdateConsumerGroupOffsetCommits *ClusterCommandConsumerGroupOffsetCommitsUpdate `protobuf:"bytes,32,opt,name=update_consumer_group_offset_commits,json=updateConsumerGroupOffsetCommits,oneof"`
}
type ClusterCommand_CreateSegment struct {
	CreateSegment *ClusterCommandSegmentCreate `protobuf:"bytes,40,opt,name=create_segment,json=createSegment,oneof"`
}
type ClusterCommand_DeleteSegment struct {
	DeleteSegment *ClusterCommandSegmentDelete `protobuf:"bytes,41,opt,name=delete_segment,json=deleteSegment,oneof"`
}
type ClusterCommand_CloseSegment struct {
	CloseSegment *ClusterCommandSegmentClose `protobuf:"bytes,42,opt,name=close_segment,json=closeSegment,oneof"`
}
type ClusterCommand_UpdateSegmentNodes struct {
	UpdateSegmentNodes *ClusterCommandSegmentNodesUpdate `protobuf:"bytes,43,opt,name=update_segment_nodes,json=updateSegmentNodes,oneof"`
}
type ClusterCommand_UpdateNode struct {
	UpdateNode *ClusterCommandNodeUpdate `protobuf:"bytes,50,opt,name=update_node,json=updateNode,oneof"`
}

func (*ClusterCommand_CreateNamespace) isClusterCommand_Command()                  {}
func (*ClusterCommand_DeleteNamespace) isClusterCommand_Command()                  {}
func (*ClusterCommand_CreateTopic) isClusterCommand_Command()                      {}
func (*ClusterCommand_DeleteTopic) isClusterCommand_Command()                      {}
func (*ClusterCommand_CreateConsumerGroup) isClusterCommand_Command()              {}
func (*ClusterCommand_DeleteConsumerGroup) isClusterCommand_Command()              {}
func (*ClusterCommand_UpdateConsumerGroupOffsetCommits) isClusterCommand_Command() {}
func (*ClusterCommand_CreateSegment) isClusterCommand_Command()                    {}
func (*ClusterCommand_DeleteSegment) isClusterCommand_Command()                    {}
func (*ClusterCommand_CloseSegment) isClusterCommand_Command()                     {}
func (*ClusterCommand_UpdateSegmentNodes) isClusterCommand_Command()               {}
func (*ClusterCommand_UpdateNode) isClusterCommand_Command()                       {}

func (m *ClusterCommand) GetCommand() isClusterCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ClusterCommand) GetCreateNamespace() *ClusterCommandNamespaceCreate {
	if x, ok := m.GetCommand().(*ClusterCommand_CreateNamespace); ok {
		return x.CreateNamespace
	}
	return nil
}

func (m *ClusterCommand) GetDeleteNamespace() *ClusterCommandNamespaceDelete {
	if x, ok := m.GetCommand().(*ClusterCommand_DeleteNamespace); ok {
		return x.DeleteNamespace
	}
	return nil
}

func (m *ClusterCommand) GetCreateTopic() *ClusterCommandTopicCreate {
	if x, ok := m.GetCommand().(*ClusterCommand_CreateTopic); ok {
		return x.CreateTopic
	}
	return nil
}

func (m *ClusterCommand) GetDeleteTopic() *ClusterCommandTopicDelete {
	if x, ok := m.GetCommand().(*ClusterCommand_DeleteTopic); ok {
		return x.DeleteTopic
	}
	return nil
}

func (m *ClusterCommand) GetCreateConsumerGroup() *ClusterCommandConsumerGroupCreate {
	if x, ok := m.GetCommand().(*ClusterCommand_CreateConsumerGroup); ok {
		return x.CreateConsumerGroup
	}
	return nil
}

func (m *ClusterCommand) GetDeleteConsumerGroup() *ClusterCommandConsumerGroupDelete {
	if x, ok := m.GetCommand().(*ClusterCommand_DeleteConsumerGroup); ok {
		return x.DeleteConsumerGroup
	}
	return nil
}

func (m *ClusterCommand) GetUpdateConsumerGroupOffsetCommits() *ClusterCommandConsumerGroupOffsetCommitsUpdate {
	if x, ok := m.GetCommand().(*ClusterCommand_UpdateConsumerGroupOffsetCommits); ok {
		return x.UpdateConsumerGroupOffsetCommits
	}
	return nil
}

func (m *ClusterCommand) GetCreateSegment() *ClusterCommandSegmentCreate {
	if x, ok := m.GetCommand().(*ClusterCommand_CreateSegment); ok {
		return x.CreateSegment
	}
	return nil
}

func (m *ClusterCommand) GetDeleteSegment() *ClusterCommandSegmentDelete {
	if x, ok := m.GetCommand().(*ClusterCommand_DeleteSegment); ok {
		return x.DeleteSegment
	}
	return nil
}

func (m *ClusterCommand) GetCloseSegment() *ClusterCommandSegmentClose {
	if x, ok := m.GetCommand().(*ClusterCommand_CloseSegment); ok {
		return x.CloseSegment
	}
	return nil
}

func (m *ClusterCommand) GetUpdateSegmentNodes() *ClusterCommandSegmentNodesUpdate {
	if x, ok := m.GetCommand().(*ClusterCommand_UpdateSegmentNodes); ok {
		return x.UpdateSegmentNodes
	}
	return nil
}

func (m *ClusterCommand) GetUpdateNode() *ClusterCommandNodeUpdate {
	if x, ok := m.GetCommand().(*ClusterCommand_UpdateNode); ok {
		return x.UpdateNode
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClusterCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClusterCommand_OneofMarshaler, _ClusterCommand_OneofUnmarshaler, _ClusterCommand_OneofSizer, []interface{}{
		(*ClusterCommand_CreateNamespace)(nil),
		(*ClusterCommand_DeleteNamespace)(nil),
		(*ClusterCommand_CreateTopic)(nil),
		(*ClusterCommand_DeleteTopic)(nil),
		(*ClusterCommand_CreateConsumerGroup)(nil),
		(*ClusterCommand_DeleteConsumerGroup)(nil),
		(*ClusterCommand_UpdateConsumerGroupOffsetCommits)(nil),
		(*ClusterCommand_CreateSegment)(nil),
		(*ClusterCommand_DeleteSegment)(nil),
		(*ClusterCommand_CloseSegment)(nil),
		(*ClusterCommand_UpdateSegmentNodes)(nil),
		(*ClusterCommand_UpdateNode)(nil),
	}
}

func _ClusterCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClusterCommand)
	// command
	switch x := m.Command.(type) {
	case *ClusterCommand_CreateNamespace:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateNamespace); err != nil {
			return err
		}
	case *ClusterCommand_DeleteNamespace:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteNamespace); err != nil {
			return err
		}
	case *ClusterCommand_CreateTopic:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateTopic); err != nil {
			return err
		}
	case *ClusterCommand_DeleteTopic:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteTopic); err != nil {
			return err
		}
	case *ClusterCommand_CreateConsumerGroup:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateConsumerGroup); err != nil {
			return err
		}
	case *ClusterCommand_DeleteConsumerGroup:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteConsumerGroup); err != nil {
			return err
		}
	case *ClusterCommand_UpdateConsumerGroupOffsetCommits:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateConsumerGroupOffsetCommits); err != nil {
			return err
		}
	case *ClusterCommand_CreateSegment:
		_ = b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateSegment); err != nil {
			return err
		}
	case *ClusterCommand_DeleteSegment:
		_ = b.EncodeVarint(41<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteSegment); err != nil {
			return err
		}
	case *ClusterCommand_CloseSegment:
		_ = b.EncodeVarint(42<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseSegment); err != nil {
			return err
		}
	case *ClusterCommand_UpdateSegmentNodes:
		_ = b.EncodeVarint(43<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSegmentNodes); err != nil {
			return err
		}
	case *ClusterCommand_UpdateNode:
		_ = b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateNode); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClusterCommand.Command has unexpected type %T", x)
	}
	return nil
}

func _ClusterCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClusterCommand)
	switch tag {
	case 10: // command.create_namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandNamespaceCreate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_CreateNamespace{msg}
		return true, err
	case 11: // command.delete_namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandNamespaceDelete)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_DeleteNamespace{msg}
		return true, err
	case 20: // command.create_topic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandTopicCreate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_CreateTopic{msg}
		return true, err
	case 21: // command.delete_topic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandTopicDelete)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_DeleteTopic{msg}
		return true, err
	case 30: // command.create_consumer_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandConsumerGroupCreate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_CreateConsumerGroup{msg}
		return true, err
	case 31: // command.delete_consumer_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandConsumerGroupDelete)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_DeleteConsumerGroup{msg}
		return true, err
	case 32: // command.update_consumer_group_offset_commits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandConsumerGroupOffsetCommitsUpdate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_UpdateConsumerGroupOffsetCommits{msg}
		return true, err
	case 40: // command.create_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandSegmentCreate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_CreateSegment{msg}
		return true, err
	case 41: // command.delete_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandSegmentDelete)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_DeleteSegment{msg}
		return true, err
	case 42: // command.close_segment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandSegmentClose)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_CloseSegment{msg}
		return true, err
	case 43: // command.update_segment_nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandSegmentNodesUpdate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_UpdateSegmentNodes{msg}
		return true, err
	case 50: // command.update_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClusterCommandNodeUpdate)
		err := b.DecodeMessage(msg)
		m.Command = &ClusterCommand_UpdateNode{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClusterCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClusterCommand)
	// command
	switch x := m.Command.(type) {
	case *ClusterCommand_CreateNamespace:
		s := proto.Size(x.CreateNamespace)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_DeleteNamespace:
		s := proto.Size(x.DeleteNamespace)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_CreateTopic:
		s := proto.Size(x.CreateTopic)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_DeleteTopic:
		s := proto.Size(x.DeleteTopic)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_CreateConsumerGroup:
		s := proto.Size(x.CreateConsumerGroup)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_DeleteConsumerGroup:
		s := proto.Size(x.DeleteConsumerGroup)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_UpdateConsumerGroupOffsetCommits:
		s := proto.Size(x.UpdateConsumerGroupOffsetCommits)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_CreateSegment:
		s := proto.Size(x.CreateSegment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_DeleteSegment:
		s := proto.Size(x.DeleteSegment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_CloseSegment:
		s := proto.Size(x.CloseSegment)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_UpdateSegmentNodes:
		s := proto.Size(x.UpdateSegmentNodes)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClusterCommand_UpdateNode:
		s := proto.Size(x.UpdateNode)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ClusterState)(nil), "io.eventter.mq.ClusterState")
	proto.RegisterType((*ClusterNamespace)(nil), "io.eventter.mq.ClusterNamespace")
	proto.RegisterType((*ClusterTopic)(nil), "io.eventter.mq.ClusterTopic")
	proto.RegisterType((*ClusterConsumerGroup)(nil), "io.eventter.mq.ClusterConsumerGroup")
	proto.RegisterType((*ClusterConsumerGroup_Binding)(nil), "io.eventter.mq.ClusterConsumerGroup.Binding")
	proto.RegisterType((*ClusterConsumerGroup_OffsetCommit)(nil), "io.eventter.mq.ClusterConsumerGroup.OffsetCommit")
	proto.RegisterType((*ClusterSegment)(nil), "io.eventter.mq.ClusterSegment")
	proto.RegisterType((*ClusterSegment_Nodes)(nil), "io.eventter.mq.ClusterSegment.Nodes")
	proto.RegisterType((*ClusterNode)(nil), "io.eventter.mq.ClusterNode")
	proto.RegisterType((*ClusterCommandNamespaceCreate)(nil), "io.eventter.mq.ClusterCommandNamespaceCreate")
	proto.RegisterType((*ClusterCommandNamespaceDelete)(nil), "io.eventter.mq.ClusterCommandNamespaceDelete")
	proto.RegisterType((*ClusterCommandTopicCreate)(nil), "io.eventter.mq.ClusterCommandTopicCreate")
	proto.RegisterType((*ClusterCommandTopicDelete)(nil), "io.eventter.mq.ClusterCommandTopicDelete")
	proto.RegisterType((*ClusterCommandConsumerGroupCreate)(nil), "io.eventter.mq.ClusterCommandConsumerGroupCreate")
	proto.RegisterType((*ClusterCommandConsumerGroupDelete)(nil), "io.eventter.mq.ClusterCommandConsumerGroupDelete")
	proto.RegisterType((*ClusterCommandSegmentCreate)(nil), "io.eventter.mq.ClusterCommandSegmentCreate")
	proto.RegisterType((*ClusterCommandSegmentClose)(nil), "io.eventter.mq.ClusterCommandSegmentClose")
	proto.RegisterType((*ClusterCommandNodeUpdate)(nil), "io.eventter.mq.ClusterCommandNodeUpdate")
	proto.RegisterType((*ClusterCommandSegmentNodesUpdate)(nil), "io.eventter.mq.ClusterCommandSegmentNodesUpdate")
	proto.RegisterType((*ClusterCommandSegmentDelete)(nil), "io.eventter.mq.ClusterCommandSegmentDelete")
	proto.RegisterType((*ClusterCommandConsumerGroupOffsetCommitsUpdate)(nil), "io.eventter.mq.ClusterCommandConsumerGroupOffsetCommitsUpdate")
	proto.RegisterType((*ClusterCommand)(nil), "io.eventter.mq.ClusterCommand")
	proto.RegisterEnum("io.eventter.mq.ClusterSegment_Type", ClusterSegment_Type_name, ClusterSegment_Type_value)
	proto.RegisterEnum("io.eventter.mq.ClusterNode_State", ClusterNode_State_name, ClusterNode_State_value)
	proto.RegisterEnum("io.eventter.mq.ClusterCommandSegmentNodesUpdate_Which", ClusterCommandSegmentNodesUpdate_Which_name, ClusterCommandSegmentNodesUpdate_Which_value)
	proto.RegisterEnum("io.eventter.mq.ClusterCommandSegmentDelete_Which", ClusterCommandSegmentDelete_Which_name, ClusterCommandSegmentDelete_Which_value)
}
func (m *ClusterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Index))
	}
	if m.CurrentSegmentID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CurrentSegmentID))
	}
	if len(m.Namespaces) > 0 {
		for _, msg := range m.Namespaces {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OpenSegments) > 0 {
		for _, msg := range m.OpenSegments {
			dAtA[i] = 0x22
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ClosedSegments) > 0 {
		for _, msg := range m.ClosedSegments {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterNamespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterNamespace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Topics) > 0 {
		for _, msg := range m.Topics {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ConsumerGroups) > 0 {
		for _, msg := range m.ConsumerGroups {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterTopic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Shards != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Shards))
	}
	if m.ReplicationFactor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ReplicationFactor))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Retention)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Retention, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *ClusterConsumerGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Bindings) > 0 {
		for _, msg := range m.Bindings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Size_))
	}
	if len(m.OffsetCommits) > 0 {
		for _, msg := range m.OffsetCommits {
			dAtA[i] = 0x22
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *ClusterConsumerGroup_Binding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterConsumerGroup_Binding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopicName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	if m.By != nil {
		nn3, err := m.By.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *ClusterConsumerGroup_Binding_RoutingKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(len(m.RoutingKey)))
	i += copy(dAtA[i:], m.RoutingKey)
	return i, nil
}
func (m *ClusterConsumerGroup_Binding_HeadersAll) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeadersAll != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.HeadersAll.Size()))
		n4, err := m.HeadersAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ClusterConsumerGroup_Binding_HeadersAny) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HeadersAny != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.HeadersAny.Size()))
		n5, err := m.HeadersAny.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ClusterConsumerGroup_OffsetCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterConsumerGroup_OffsetCommit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.SegmentID))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *ClusterSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterSegment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Owner.Size()))
	n6, err := m.Owner.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Type))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x2a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)))
	n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClosedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x32
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Nodes.Size()))
	n9, err := m.Nodes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.Size_ != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Size_))
	}
	if len(m.Sha1) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	return i, nil
}

func (m *ClusterSegment_Nodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterSegment_Nodes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PrimaryNodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.PrimaryNodeID))
	}
	if len(m.DoneNodeIDs) > 0 {
		dAtA11 := make([]byte, len(m.DoneNodeIDs)*10)
		var j10 int
		for _, num := range m.DoneNodeIDs {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		dAtA13 := make([]byte, len(m.ReplicatingNodeIDs)*10)
		var j12 int
		for _, num := range m.ReplicatingNodeIDs {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	return i, nil
}

func (m *ClusterNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)))
		n14, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAlive, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ClusterCommandNamespaceCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandNamespaceCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	return i, nil
}

func (m *ClusterCommandNamespaceDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandNamespaceDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	return i, nil
}

func (m *ClusterCommandTopicCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandTopicCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.Topic != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Topic.Size()))
		n15, err := m.Topic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *ClusterCommandTopicDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandTopicDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ClusterCommandConsumerGroupCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandConsumerGroupCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.ConsumerGroup != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ConsumerGroup.Size()))
		n16, err := m.ConsumerGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *ClusterCommandConsumerGroupDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandConsumerGroupDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ClusterCommandSegmentCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandSegmentCreate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Owner.Size()))
	n17, err := m.Owner.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Type))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)))
	n18, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.OpenedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if m.PrimaryNodeID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.PrimaryNodeID))
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		dAtA20 := make([]byte, len(m.ReplicatingNodeIDs)*10)
		var j19 int
		for _, num := range m.ReplicatingNodeIDs {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func (m *ClusterCommandSegmentClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandSegmentClose) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if m.DoneNodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DoneNodeID))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)))
	n21, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClosedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Size_))
	}
	if len(m.Sha1) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	return i, nil
}

func (m *ClusterCommandNodeUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandNodeUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)))
		n22, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastSeenAlive, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ClusterCommandSegmentNodesUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandSegmentNodesUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if m.Which != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Which))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintClusterState(dAtA, i, uint64(m.Nodes.Size()))
	n23, err := m.Nodes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func (m *ClusterCommandSegmentDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandSegmentDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.ID))
	}
	if m.Which != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.Which))
	}
	return i, nil
}

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.OffsetCommits) > 0 {
		for _, msg := range m.OffsetCommits {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClusterState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Command != nil {
		nn24, err := m.Command.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	return i, nil
}

func (m *ClusterCommand_CreateNamespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateNamespace != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CreateNamespace.Size()))
		n25, err := m.CreateNamespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *ClusterCommand_DeleteNamespace) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteNamespace != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DeleteNamespace.Size()))
		n26, err := m.DeleteNamespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *ClusterCommand_CreateTopic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateTopic != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CreateTopic.Size()))
		n27, err := m.CreateTopic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *ClusterCommand_DeleteTopic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteTopic != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DeleteTopic.Size()))
		n28, err := m.DeleteTopic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *ClusterCommand_CreateConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateConsumerGroup != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CreateConsumerGroup.Size()))
		n29, err := m.CreateConsumerGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *ClusterCommand_DeleteConsumerGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteConsumerGroup != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DeleteConsumerGroup.Size()))
		n30, err := m.DeleteConsumerGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *ClusterCommand_UpdateConsumerGroupOffsetCommits) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateConsumerGroupOffsetCommits != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.UpdateConsumerGroupOffsetCommits.Size()))
		n31, err := m.UpdateConsumerGroupOffsetCommits.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *ClusterCommand_CreateSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateSegment != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CreateSegment.Size()))
		n32, err := m.CreateSegment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *ClusterCommand_DeleteSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteSegment != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.DeleteSegment.Size()))
		n33, err := m.DeleteSegment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *ClusterCommand_CloseSegment) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CloseSegment != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.CloseSegment.Size()))
		n34, err := m.CloseSegment.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *ClusterCommand_UpdateSegmentNodes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateSegmentNodes != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.UpdateSegmentNodes.Size()))
		n35, err := m.UpdateSegmentNodes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *ClusterCommand_UpdateNode) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateNode != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintClusterState(dAtA, i, uint64(m.UpdateNode.Size()))
		n36, err := m.UpdateNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func encodeVarintClusterState(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterState) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovClusterState(uint64(m.Index))
	}
	if m.CurrentSegmentID != 0 {
		n += 1 + sovClusterState(uint64(m.CurrentSegmentID))
	}
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.OpenSegments) > 0 {
		for _, e := range m.OpenSegments {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.ClosedSegments) > 0 {
		for _, e := range m.ClosedSegments {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	return n
}

func (m *ClusterNamespace) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if len(m.ConsumerGroups) > 0 {
		for _, e := range m.ConsumerGroups {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	return n
}

func (m *ClusterTopic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.Shards != 0 {
		n += 1 + sovClusterState(uint64(m.Shards))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovClusterState(uint64(m.ReplicationFactor))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Retention)
	n += 1 + l + sovClusterState(uint64(l))
	return n
}

func (m *ClusterConsumerGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if len(m.Bindings) > 0 {
		for _, e := range m.Bindings {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	if m.Size_ != 0 {
		n += 1 + sovClusterState(uint64(m.Size_))
	}
	if len(m.OffsetCommits) > 0 {
		for _, e := range m.OffsetCommits {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovClusterState(uint64(l))
	return n
}

func (m *ClusterConsumerGroup_Binding) Size() (n int) {
	var l int
	_ = l
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.By != nil {
		n += m.By.Size()
	}
	return n
}

func (m *ClusterConsumerGroup_Binding_RoutingKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoutingKey)
	n += 1 + l + sovClusterState(uint64(l))
	return n
}
func (m *ClusterConsumerGroup_Binding_HeadersAll) Size() (n int) {
	var l int
	_ = l
	if m.HeadersAll != nil {
		l = m.HeadersAll.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterConsumerGroup_Binding_HeadersAny) Size() (n int) {
	var l int
	_ = l
	if m.HeadersAny != nil {
		l = m.HeadersAny.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterConsumerGroup_OffsetCommit) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovClusterState(uint64(m.SegmentID))
	}
	if m.Offset != 0 {
		n += 1 + sovClusterState(uint64(m.Offset))
	}
	return n
}

func (m *ClusterSegment) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = m.Owner.Size()
	n += 1 + l + sovClusterState(uint64(l))
	if m.Type != 0 {
		n += 1 + sovClusterState(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovClusterState(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)
	n += 1 + l + sovClusterState(uint64(l))
	l = m.Nodes.Size()
	n += 1 + l + sovClusterState(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovClusterState(uint64(m.Size_))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterSegment_Nodes) Size() (n int) {
	var l int
	_ = l
	if m.PrimaryNodeID != 0 {
		n += 1 + sovClusterState(uint64(m.PrimaryNodeID))
	}
	if len(m.DoneNodeIDs) > 0 {
		l = 0
		for _, e := range m.DoneNodeIDs {
			l += sovClusterState(uint64(e))
		}
		n += 1 + sovClusterState(uint64(l)) + l
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		l = 0
		for _, e := range m.ReplicatingNodeIDs {
			l += sovClusterState(uint64(e))
		}
		n += 1 + sovClusterState(uint64(l)) + l
	}
	return n
}

func (m *ClusterNode) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovClusterState(uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandNamespaceCreate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandNamespaceDelete) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandTopicCreate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandTopicDelete) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandConsumerGroupCreate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.ConsumerGroup != nil {
		l = m.ConsumerGroup.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandConsumerGroupDelete) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandSegmentCreate) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = m.Owner.Size()
	n += 1 + l + sovClusterState(uint64(l))
	if m.Type != 0 {
		n += 1 + sovClusterState(uint64(m.Type))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.OpenedAt)
	n += 1 + l + sovClusterState(uint64(l))
	if m.PrimaryNodeID != 0 {
		n += 1 + sovClusterState(uint64(m.PrimaryNodeID))
	}
	if len(m.ReplicatingNodeIDs) > 0 {
		l = 0
		for _, e := range m.ReplicatingNodeIDs {
			l += sovClusterState(uint64(e))
		}
		n += 1 + sovClusterState(uint64(l)) + l
	}
	return n
}

func (m *ClusterCommandSegmentClose) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	if m.DoneNodeID != 0 {
		n += 1 + sovClusterState(uint64(m.DoneNodeID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClosedAt)
	n += 1 + l + sovClusterState(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovClusterState(uint64(m.Size_))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandNodeUpdate) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovClusterState(uint64(m.State))
	}
	if m.LastSeenAlive != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastSeenAlive)
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}

func (m *ClusterCommandSegmentNodesUpdate) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	if m.Which != 0 {
		n += 1 + sovClusterState(uint64(m.Which))
	}
	l = m.Nodes.Size()
	n += 1 + l + sovClusterState(uint64(l))
	return n
}

func (m *ClusterCommandSegmentDelete) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovClusterState(uint64(m.ID))
	}
	if m.Which != 0 {
		n += 1 + sovClusterState(uint64(m.Which))
	}
	return n
}

func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClusterState(uint64(l))
	}
	if len(m.OffsetCommits) > 0 {
		for _, e := range m.OffsetCommits {
			l = e.Size()
			n += 1 + l + sovClusterState(uint64(l))
		}
	}
	return n
}

func (m *ClusterCommand) Size() (n int) {
	var l int
	_ = l
	if m.Command != nil {
		n += m.Command.Size()
	}
	return n
}

func (m *ClusterCommand_CreateNamespace) Size() (n int) {
	var l int
	_ = l
	if m.CreateNamespace != nil {
		l = m.CreateNamespace.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_DeleteNamespace) Size() (n int) {
	var l int
	_ = l
	if m.DeleteNamespace != nil {
		l = m.DeleteNamespace.Size()
		n += 1 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_CreateTopic) Size() (n int) {
	var l int
	_ = l
	if m.CreateTopic != nil {
		l = m.CreateTopic.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_DeleteTopic) Size() (n int) {
	var l int
	_ = l
	if m.DeleteTopic != nil {
		l = m.DeleteTopic.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_CreateConsumerGroup) Size() (n int) {
	var l int
	_ = l
	if m.CreateConsumerGroup != nil {
		l = m.CreateConsumerGroup.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_DeleteConsumerGroup) Size() (n int) {
	var l int
	_ = l
	if m.DeleteConsumerGroup != nil {
		l = m.DeleteConsumerGroup.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_UpdateConsumerGroupOffsetCommits) Size() (n int) {
	var l int
	_ = l
	if m.UpdateConsumerGroupOffsetCommits != nil {
		l = m.UpdateConsumerGroupOffsetCommits.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_CreateSegment) Size() (n int) {
	var l int
	_ = l
	if m.CreateSegment != nil {
		l = m.CreateSegment.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_DeleteSegment) Size() (n int) {
	var l int
	_ = l
	if m.DeleteSegment != nil {
		l = m.DeleteSegment.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_CloseSegment) Size() (n int) {
	var l int
	_ = l
	if m.CloseSegment != nil {
		l = m.CloseSegment.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_UpdateSegmentNodes) Size() (n int) {
	var l int
	_ = l
	if m.UpdateSegmentNodes != nil {
		l = m.UpdateSegmentNodes.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}
func (m *ClusterCommand_UpdateNode) Size() (n int) {
	var l int
	_ = l
	if m.UpdateNode != nil {
		l = m.UpdateNode.Size()
		n += 2 + l + sovClusterState(uint64(l))
	}
	return n
}

func sovClusterState(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClusterState(x uint64) (n int) {
	return sovClusterState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSegmentID", wireType)
			}
			m.CurrentSegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &ClusterNamespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenSegments = append(m.OpenSegments, &ClusterSegment{})
			if err := m.OpenSegments[len(m.OpenSegments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedSegments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosedSegments = append(m.ClosedSegments, &ClusterSegment{})
			if err := m.ClosedSegments[len(m.ClosedSegments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &ClusterNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterNamespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterNamespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterNamespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &ClusterTopic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerGroups = append(m.ConsumerGroups, &ClusterConsumerGroup{})
			if err := m.ConsumerGroups[len(m.ConsumerGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			m.Shards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shards |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Retention, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterConsumerGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterConsumerGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterConsumerGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bindings = append(m.Bindings, &ClusterConsumerGroup_Binding{})
			if err := m.Bindings[len(m.Bindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetCommits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffsetCommits = append(m.OffsetCommits, &ClusterConsumerGroup_OffsetCommit{})
			if err := m.OffsetCommits[len(m.OffsetCommits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterConsumerGroup_Binding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutingKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.By = &ClusterConsumerGroup_Binding_RoutingKey{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.By = &ClusterConsumerGroup_Binding_HeadersAll{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersAny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.By = &ClusterConsumerGroup_Binding_HeadersAny{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterConsumerGroup_OffsetCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffsetCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffsetCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ClusterSegment_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterSegment_Nodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNodeID", wireType)
			}
			m.PrimaryNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DoneNodeIDs = append(m.DoneNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClusterState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DoneNodeIDs = append(m.DoneNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneNodeIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClusterState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatingNodeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ClusterNode_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAlive == nil {
				m.LastSeenAlive = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAlive, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandNamespaceCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandNamespaceCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandNamespaceCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandNamespaceDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandNamespaceDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandNamespaceDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandTopicCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandTopicCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandTopicCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &ClusterTopic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandTopicDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandTopicDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandTopicDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandConsumerGroupCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandConsumerGroupCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandConsumerGroupCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsumerGroup == nil {
				m.ConsumerGroup = &ClusterConsumerGroup{}
			}
			if err := m.ConsumerGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandConsumerGroupDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandConsumerGroupDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandConsumerGroupDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandSegmentCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandSegmentCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandSegmentCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ClusterSegment_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.OpenedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNodeID", wireType)
			}
			m.PrimaryNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClusterState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReplicatingNodeIDs = append(m.ReplicatingNodeIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatingNodeIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandSegmentClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandSegmentClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandSegmentClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneNodeID", wireType)
			}
			m.DoneNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoneNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClosedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandNodeUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandNodeUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandNodeUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ClusterNode_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAlive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSeenAlive == nil {
				m.LastSeenAlive = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastSeenAlive, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandSegmentNodesUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandSegmentNodesUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandSegmentNodesUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Which", wireType)
			}
			m.Which = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Which |= (ClusterCommandSegmentNodesUpdate_Which(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nodes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandSegmentDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandSegmentDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandSegmentDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Which", wireType)
			}
			m.Which = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Which |= (ClusterCommandSegmentDelete_Which(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommandConsumerGroupOffsetCommitsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommandConsumerGroupOffsetCommitsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommandConsumerGroupOffsetCommitsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetCommits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffsetCommits = append(m.OffsetCommits, &ClusterConsumerGroup_OffsetCommit{})
			if err := m.OffsetCommits[len(m.OffsetCommits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandNamespaceCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_CreateNamespace{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandNamespaceDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_DeleteNamespace{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandTopicCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_CreateTopic{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandTopicDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_DeleteTopic{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandConsumerGroupCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_CreateConsumerGroup{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteConsumerGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandConsumerGroupDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_DeleteConsumerGroup{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateConsumerGroupOffsetCommits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandConsumerGroupOffsetCommitsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_UpdateConsumerGroupOffsetCommits{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandSegmentCreate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_CreateSegment{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandSegmentDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_DeleteSegment{v}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSegment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandSegmentClose{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_CloseSegment{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSegmentNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandSegmentNodesUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_UpdateSegmentNodes{v}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClusterCommandNodeUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &ClusterCommand_UpdateNode{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClusterState
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClusterState
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClusterState(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClusterState = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterState   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cluster_state.proto", fileDescriptor_cluster_state_ec9ac1e793240dde) }

var fileDescriptor_cluster_state_ec9ac1e793240dde = []byte{
	// 1674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x73, 0xe2, 0xc8,
	0x19, 0x46, 0x18, 0xb0, 0x79, 0xf9, 0x30, 0xdb, 0x66, 0x1c, 0xd6, 0x6b, 0x1b, 0xac, 0xec, 0xc1,
	0x3b, 0xbb, 0x8b, 0xd7, 0x6c, 0x2a, 0x5b, 0x9b, 0xaa, 0xa4, 0x96, 0x0f, 0x8f, 0xa1, 0xc6, 0x36,
	0x4e, 0x83, 0x37, 0xa9, 0xb9, 0xa8, 0x64, 0xa9, 0x8d, 0x55, 0x01, 0x89, 0x95, 0xc4, 0x4e, 0xc8,
	0x4f, 0xc8, 0x21, 0x35, 0x97, 0x54, 0xe5, 0x37, 0x24, 0x7f, 0x21, 0x87, 0xe4, 0x36, 0x73, 0x4a,
	0xf2, 0x07, 0xc8, 0x14, 0x39, 0xe6, 0x94, 0x4b, 0xce, 0xa9, 0xfe, 0x90, 0x40, 0x0c, 0x60, 0x70,
	0xe5, 0x30, 0x27, 0xa9, 0x3f, 0x9e, 0xa7, 0xdf, 0xf7, 0xed, 0xb7, 0x9f, 0xb7, 0x1b, 0x76, 0xb4,
	0xee, 0xc0, 0x71, 0x89, 0xad, 0x38, 0xae, 0xea, 0x92, 0x62, 0xdf, 0xb6, 0x5c, 0x0b, 0xa5, 0x0d,
	0xab, 0x48, 0xbe, 0x27, 0xa6, 0xeb, 0x12, 0xbb, 0xd8, 0xfb, 0x6e, 0x6f, 0x47, 0xeb, 0x1a, 0xc4,
	0x74, 0x4f, 0xf8, 0x87, 0x4f, 0xda, 0xcb, 0x76, 0xac, 0x8e, 0xc5, 0x7e, 0x4f, 0xe8, 0x9f, 0xe8,
	0x3d, 0xec, 0x58, 0x56, 0xa7, 0x4b, 0x4e, 0x58, 0xeb, 0x76, 0x70, 0x77, 0xa2, 0x0f, 0x6c, 0xd5,
	0x35, 0x2c, 0x53, 0x8c, 0xef, 0xcf, 0x8e, 0x3b, 0xae, 0x3d, 0xd0, 0x3c, 0xce, 0xfc, 0xec, 0xa8,
	0x6b, 0xf4, 0x88, 0xe3, 0xaa, 0xbd, 0x3e, 0x9f, 0x20, 0xff, 0x3b, 0x0c, 0xc9, 0x2a, 0xb7, 0xb8,
	0x45, 0x0d, 0x46, 0x59, 0x88, 0x1a, 0xa6, 0x4e, 0x7e, 0x9d, 0x93, 0x0a, 0xd2, 0x71, 0x04, 0xf3,
	0x06, 0xaa, 0x00, 0xd2, 0x06, 0xb6, 0x4d, 0x4c, 0x57, 0x71, 0x48, 0xa7, 0x47, 0xbf, 0x86, 0x9e,
	0x0b, 0xd3, 0x29, 0x95, 0xec, 0x78, 0x94, 0xcf, 0x54, 0xf9, 0x68, 0x8b, 0x0f, 0x36, 0x6a, 0x38,
	0xa3, 0x05, 0x7b, 0x74, 0xf4, 0x0d, 0x80, 0xa9, 0xf6, 0x88, 0xd3, 0x57, 0x35, 0xe2, 0xe4, 0x36,
	0x0a, 0x1b, 0xc7, 0x89, 0x52, 0xa1, 0x18, 0x8c, 0x4c, 0x51, 0xd8, 0x72, 0xe5, 0x4d, 0xc4, 0x53,
	0x18, 0x54, 0x85, 0x94, 0xd5, 0x27, 0xa6, 0x67, 0x82, 0x93, 0x8b, 0x30, 0x92, 0xc3, 0x05, 0x24,
	0x62, 0x69, 0x9c, 0xa4, 0x20, 0xd1, 0x70, 0xd0, 0x39, 0x6c, 0x6b, 0x5d, 0xcb, 0x21, 0xfa, 0x84,
	0x26, 0xba, 0x12, 0x4d, 0x9a, 0xc3, 0x7c, 0xa2, 0x53, 0x88, 0x9a, 0x96, 0x4e, 0x9c, 0x5c, 0x8c,
	0xc1, 0x3f, 0x5a, 0xe4, 0x8a, 0xa5, 0x13, 0xcc, 0x67, 0xca, 0x7f, 0x92, 0x20, 0x33, 0xeb, 0x21,
	0x42, 0x10, 0xa1, 0x3e, 0xb2, 0x80, 0xc7, 0x31, 0xfb, 0x47, 0x3f, 0x82, 0x98, 0x6b, 0xf5, 0x0d,
	0xcd, 0xc9, 0x85, 0x19, 0xf9, 0xfe, 0x02, 0xf2, 0x36, 0x9d, 0x84, 0xc5, 0x5c, 0x74, 0x09, 0xdb,
	0x9a, 0x65, 0x3a, 0x83, 0x1e, 0xb1, 0x95, 0x8e, 0x6d, 0x0d, 0xfa, 0x5e, 0x98, 0x3f, 0x5e, 0x00,
	0xaf, 0x8a, 0xd9, 0xe7, 0x74, 0x32, 0x4e, 0x6b, 0xd3, 0x4d, 0x47, 0xfe, 0x8b, 0xe4, 0xe7, 0x06,
	0x5b, 0x67, 0xae, 0xa5, 0x08, 0x22, 0xee, 0xb0, 0x4f, 0x58, 0x2e, 0xc4, 0x31, 0xfb, 0x47, 0xbb,
	0x10, 0x73, 0xee, 0x55, 0x5b, 0xa7, 0xcb, 0x4b, 0xc7, 0x29, 0x2c, 0x5a, 0xe8, 0x73, 0x40, 0x36,
	0xe9, 0x77, 0x0d, 0x8d, 0x25, 0xb0, 0x72, 0xa7, 0x6a, 0xae, 0x65, 0xe7, 0x22, 0x6c, 0xce, 0x07,
	0x53, 0x23, 0xcf, 0xd8, 0x00, 0x2a, 0x43, 0xdc, 0x26, 0x2e, 0x31, 0x69, 0x57, 0x2e, 0x5a, 0x90,
	0x8e, 0x13, 0xa5, 0x0f, 0x8b, 0x3c, 0xa1, 0x8b, 0x5e, 0x42, 0x17, 0x6b, 0xe2, 0x38, 0x54, 0xb6,
	0x5e, 0x8f, 0xf2, 0xa1, 0x3f, 0xfc, 0x33, 0x2f, 0xe1, 0x09, 0x4a, 0x7e, 0x13, 0x81, 0xec, 0x3c,
	0x5f, 0xe7, 0xba, 0x52, 0x87, 0xad, 0x5b, 0xc3, 0xd4, 0x0d, 0xb3, 0xe3, 0x85, 0xfd, 0xb3, 0x55,
	0xe2, 0x56, 0xac, 0x70, 0x10, 0xf6, 0xd1, 0x94, 0xdd, 0x31, 0x7e, 0x43, 0x84, 0xfb, 0xec, 0x1f,
	0xfd, 0x12, 0xd2, 0xd6, 0xdd, 0x9d, 0x43, 0x5c, 0x45, 0xb3, 0x7a, 0x3d, 0xc3, 0xcf, 0xde, 0xd3,
	0x95, 0xd6, 0x68, 0x32, 0x68, 0x95, 0x21, 0x71, 0xca, 0x9a, 0x6a, 0xd1, 0x63, 0x01, 0x9a, 0x4d,
	0x54, 0x97, 0xe8, 0x8a, 0xea, 0x8a, 0x40, 0xed, 0xbd, 0x13, 0xa8, 0xb6, 0x77, 0xf2, 0x79, 0xa4,
	0x5e, 0xb1, 0x48, 0x09, 0x5c, 0xd9, 0xdd, 0x7b, 0x23, 0xc1, 0xa6, 0x70, 0x04, 0x1d, 0x00, 0xb0,
	0x8c, 0x52, 0xa6, 0x42, 0x14, 0x67, 0x3d, 0x34, 0x6b, 0xd1, 0x11, 0x24, 0x6c, 0x6b, 0xe0, 0x1a,
	0x66, 0x47, 0xf9, 0x15, 0x19, 0xf2, 0x9d, 0xaf, 0x87, 0x30, 0x88, 0xce, 0xe7, 0x64, 0x88, 0x7e,
	0x02, 0x89, 0x7b, 0xa2, 0xea, 0xc4, 0x76, 0x14, 0xb5, 0xdb, 0x65, 0x71, 0x48, 0x94, 0x7e, 0xf0,
	0x8e, 0x4d, 0x2d, 0xa6, 0x55, 0x14, 0x2b, 0x66, 0x97, 0xbb, 0xdd, 0x00, 0xd6, 0x1c, 0xb2, 0xf4,
	0x58, 0x0d, 0x6b, 0x0e, 0x2b, 0x11, 0x08, 0xdf, 0x0e, 0xf7, 0xda, 0x90, 0x9c, 0x8e, 0x17, 0xfa,
	0x0c, 0x60, 0x4a, 0xb5, 0x98, 0xb0, 0x55, 0x52, 0xe3, 0x51, 0x3e, 0x3e, 0x91, 0xab, 0xb8, 0xe3,
	0xeb, 0xd4, 0x2e, 0xc4, 0x78, 0x7c, 0x99, 0x67, 0x1b, 0x58, 0xb4, 0xe4, 0xdf, 0x47, 0x21, 0x1d,
	0x94, 0x04, 0xb4, 0x0b, 0x61, 0x9f, 0x30, 0x36, 0x1e, 0xe5, 0xc3, 0x8d, 0x1a, 0x0e, 0x1b, 0x3a,
	0xfa, 0x1a, 0xa2, 0xd6, 0x4b, 0x93, 0xd8, 0x8c, 0x21, 0x51, 0x3a, 0x98, 0xdd, 0x62, 0xff, 0xf0,
	0xd3, 0x9f, 0x4a, 0x84, 0xee, 0x07, 0xe6, 0x08, 0xf4, 0x95, 0x38, 0x4f, 0x34, 0x64, 0xe9, 0xd2,
	0x0f, 0x97, 0x6b, 0x52, 0xb1, 0x3d, 0xec, 0x13, 0x71, 0xe8, 0x82, 0x59, 0x10, 0x79, 0x54, 0x16,
	0xd0, 0x23, 0x27, 0xc4, 0x71, 0xcd, 0x4c, 0xda, 0xe2, 0xb0, 0xb2, 0x8b, 0xbe, 0x99, 0xc8, 0xa2,
	0xb4, 0x44, 0x7a, 0x3c, 0x0f, 0xa8, 0x3c, 0x3a, 0x5e, 0x08, 0x18, 0xd0, 0x3f, 0x3d, 0x9b, 0x2c,
	0xfc, 0xfc, 0xf4, 0xd0, 0xbe, 0x7b, 0xf5, 0x34, 0xb7, 0x55, 0x90, 0x8e, 0x93, 0x98, 0xfd, 0xef,
	0xfd, 0x55, 0x82, 0x28, 0x83, 0xa3, 0xaf, 0x61, 0xbb, 0x6f, 0x1b, 0x3d, 0xd5, 0x1e, 0x2a, 0x94,
	0x62, 0xb2, 0xcb, 0x1f, 0x8c, 0x47, 0xf9, 0xd4, 0x35, 0x1f, 0xa2, 0x53, 0x1b, 0x35, 0x9c, 0xea,
	0x4f, 0x35, 0x75, 0xf4, 0x25, 0xa4, 0x74, 0xcb, 0x24, 0x1e, 0x8e, 0x9f, 0xfc, 0x48, 0x65, 0x7b,
	0x3c, 0xca, 0x27, 0x6a, 0x96, 0x49, 0x38, 0xca, 0xc1, 0x09, 0xdd, 0x6b, 0xe8, 0x0e, 0xaa, 0x43,
	0xd6, 0x97, 0x2b, 0xb3, 0x33, 0xc1, 0x6e, 0x30, 0xec, 0xee, 0x78, 0x94, 0x47, 0x78, 0x32, 0xee,
	0x51, 0x20, 0x7b, 0xa6, 0x4f, 0x77, 0xe4, 0x32, 0x44, 0xe8, 0x1e, 0xa2, 0x04, 0x6c, 0x36, 0xae,
	0xbe, 0x2d, 0x5f, 0x34, 0x6a, 0x99, 0x10, 0x8a, 0x43, 0xb4, 0xdd, 0xbc, 0x6e, 0x54, 0x33, 0x12,
	0x3a, 0x82, 0x83, 0x6a, 0xf3, 0xaa, 0x75, 0x73, 0x79, 0x86, 0x95, 0x73, 0xdc, 0xbc, 0xb9, 0x56,
	0x9a, 0xcf, 0x9e, 0xb5, 0xce, 0xda, 0x4a, 0xb5, 0x79, 0x79, 0xd9, 0x68, 0xb7, 0x32, 0x61, 0xf9,
	0xad, 0x04, 0x89, 0xa9, 0x5a, 0xb3, 0x30, 0x29, 0x73, 0xb0, 0xa9, 0xea, 0xba, 0x4d, 0x1c, 0x47,
	0x88, 0xb5, 0xd7, 0x44, 0x5f, 0x41, 0x94, 0xdd, 0x56, 0x44, 0xd2, 0x1d, 0x2d, 0xa9, 0x64, 0x45,
	0x76, 0x4b, 0xc0, 0x7c, 0x3e, 0xaa, 0xc3, 0x76, 0x57, 0x75, 0xe8, 0x9d, 0x80, 0x98, 0x8a, 0xda,
	0x35, 0xbe, 0x27, 0x2b, 0x24, 0x5e, 0x84, 0x25, 0x4c, 0x8a, 0x02, 0x5b, 0x84, 0x98, 0x65, 0x0a,
	0x93, 0xf7, 0x21, 0xca, 0xef, 0x1f, 0x5b, 0x10, 0xa9, 0x9d, 0x95, 0x45, 0x14, 0xca, 0x17, 0x8d,
	0x6f, 0xcf, 0x32, 0x92, 0xfc, 0x53, 0x38, 0xf0, 0x55, 0xb1, 0xd7, 0x53, 0x4d, 0xdd, 0x3f, 0x40,
	0x55, 0x96, 0xba, 0x68, 0x1f, 0xe2, 0xfe, 0x3d, 0xc1, 0x13, 0x2c, 0xbf, 0x63, 0x09, 0xbc, 0x46,
	0xba, 0xe4, 0x41, 0x78, 0x0f, 0x3e, 0x0c, 0xc2, 0x59, 0x35, 0x5c, 0x65, 0x65, 0x54, 0x82, 0x28,
	0xd3, 0x4d, 0x21, 0x04, 0xcb, 0xcb, 0x38, 0x9f, 0x2a, 0x5f, 0xce, 0x5d, 0x6e, 0x15, 0x4b, 0xfd,
	0xaa, 0x16, 0x9e, 0x54, 0x35, 0xf9, 0x77, 0x12, 0x1c, 0x05, 0xf9, 0x02, 0x95, 0x65, 0x25, 0x37,
	0x9e, 0x43, 0x3a, 0x78, 0xb1, 0x10, 0xfe, 0xac, 0x76, 0xaf, 0x48, 0x05, 0xee, 0x15, 0xf2, 0xcd,
	0x52, 0x7b, 0x1e, 0xed, 0xe7, 0x7f, 0xc2, 0xf0, 0x51, 0x90, 0x57, 0x48, 0x8c, 0xf0, 0xf0, 0x7d,
	0xd2, 0xea, 0x32, 0xc4, 0xe9, 0x9d, 0x74, 0x7d, 0xa9, 0xde, 0xe2, 0xb0, 0xb2, 0x3b, 0x4f, 0xf2,
	0xa2, 0x2b, 0x4a, 0xde, 0x22, 0xf5, 0x8a, 0xad, 0xad, 0x5e, 0xff, 0x90, 0x60, 0x6f, 0x7e, 0xcc,
	0x69, 0x35, 0x58, 0x18, 0xf2, 0x2f, 0x20, 0x39, 0xad, 0xb9, 0xe2, 0x1d, 0x91, 0x1e, 0x8f, 0xf2,
	0x30, 0x91, 0x5c, 0x0c, 0x13, 0xc5, 0x0d, 0xd6, 0xa5, 0xc8, 0xa3, 0xea, 0x92, 0x57, 0x55, 0xa2,
	0x73, 0xaa, 0x4a, 0x6c, 0x52, 0x55, 0xe4, 0xbf, 0x49, 0x90, 0x9b, 0x51, 0x0b, 0x4b, 0x27, 0x37,
	0x7d, 0x7d, 0x59, 0x12, 0xbd, 0xd7, 0xda, 0xfa, 0x5f, 0x09, 0x0a, 0x73, 0x77, 0x89, 0x15, 0xcf,
	0x07, 0x3c, 0xbb, 0x80, 0xe8, 0xcb, 0x7b, 0x43, 0xbb, 0x67, 0x7e, 0xa5, 0x4b, 0x3f, 0x5e, 0x78,
	0xe2, 0x17, 0x10, 0x17, 0x7f, 0x41, 0xd1, 0x98, 0x93, 0x4c, 0x2e, 0x07, 0x1b, 0x8f, 0xbc, 0x1c,
	0xc8, 0x4f, 0x21, 0xca, 0x18, 0x83, 0x15, 0x73, 0x0b, 0x22, 0xcd, 0xeb, 0xb3, 0xab, 0x8c, 0x84,
	0x00, 0x62, 0xd5, 0x8b, 0x66, 0xeb, 0xac, 0x96, 0x09, 0xcb, 0x7f, 0x94, 0x16, 0x48, 0x82, 0x10,
	0x99, 0x45, 0x3e, 0x9f, 0x07, 0x7d, 0x3e, 0x5d, 0xc9, 0x67, 0xce, 0x19, 0x70, 0x77, 0x2d, 0x63,
	0xff, 0x2c, 0x41, 0x71, 0x89, 0x2e, 0x4e, 0x5f, 0x68, 0xbd, 0x3d, 0x5b, 0x5b, 0x24, 0xe7, 0x3c,
	0x42, 0x36, 0xfe, 0x3f, 0x8f, 0x10, 0xf9, 0xb7, 0x71, 0xff, 0x76, 0x2c, 0xcc, 0x47, 0x2f, 0x20,
	0xc3, 0x6f, 0x96, 0xca, 0xc4, 0x4a, 0x60, 0xfb, 0xfe, 0xf9, 0xf2, 0x88, 0xce, 0x54, 0xf7, 0x7a,
	0x08, 0x6f, 0x73, 0xa2, 0xc9, 0xa3, 0xf9, 0x05, 0x64, 0x74, 0x16, 0xf0, 0x29, 0xee, 0xc4, 0x5a,
	0xdc, 0x7c, 0xbf, 0x28, 0x37, 0x27, 0x9a, 0x70, 0x5f, 0x41, 0x52, 0xd8, 0xcd, 0x6b, 0x77, 0x96,
	0xf1, 0x7e, 0xb2, 0x9c, 0x77, 0xea, 0x4e, 0x50, 0x0f, 0xe1, 0x04, 0x27, 0xe0, 0xcf, 0xe6, 0x2b,
	0x48, 0x0a, 0x5b, 0x39, 0xdf, 0x93, 0x95, 0xf9, 0x7c, 0x1b, 0x13, 0x9c, 0x80, 0xf3, 0x75, 0xe0,
	0x89, 0xb0, 0x6f, 0xa6, 0x28, 0x1f, 0x32, 0xe2, 0x07, 0xd2, 0x75, 0x4e, 0xf5, 0xaf, 0x87, 0xf0,
	0x0e, 0x67, 0x0c, 0x3e, 0x92, 0x3b, 0xf0, 0x44, 0x18, 0x3e, 0xb3, 0x50, 0x7e, 0xed, 0x85, 0x7c,
	0x4f, 0x76, 0x38, 0x63, 0x70, 0xa1, 0x57, 0x12, 0x7c, 0x3c, 0x60, 0x39, 0x3d, 0xb3, 0x92, 0x32,
	0x93, 0xad, 0x05, 0xb6, 0xf0, 0xcf, 0xd6, 0x58, 0x78, 0xce, 0xb9, 0xa9, 0x87, 0x70, 0x81, 0xaf,
	0xb6, 0x78, 0x26, 0x6a, 0x43, 0x5a, 0x04, 0x59, 0xbc, 0x0c, 0x73, 0xc7, 0x6c, 0xed, 0x4f, 0x57,
	0x12, 0x03, 0x3f, 0xae, 0x29, 0x4e, 0xe2, 0x3d, 0x18, 0xdb, 0x90, 0x16, 0x11, 0xf5, 0x58, 0x3f,
	0x59, 0x83, 0xd5, 0x0f, 0x62, 0x8a, 0x93, 0x78, 0xac, 0x3f, 0x87, 0x14, 0x2b, 0x73, 0x3e, 0xe9,
	0x53, 0x46, 0xfa, 0x74, 0x35, 0x53, 0x29, 0xb2, 0x1e, 0xc2, 0x49, 0x46, 0xe1, 0x51, 0xea, 0x90,
	0x15, 0x1b, 0xe2, 0xbd, 0x9c, 0xb9, 0x6e, 0x7f, 0xca, 0x98, 0xbf, 0x58, 0xb7, 0x0a, 0xd4, 0x43,
	0x18, 0x71, 0xbe, 0xe9, 0x31, 0xf4, 0x1c, 0x12, 0x62, 0x15, 0xca, 0x9e, 0x2b, 0x31, 0xf2, 0xe3,
	0x07, 0x0e, 0xb0, 0x5f, 0x8d, 0xe9, 0xdb, 0x9f, 0xc3, 0x69, 0x5f, 0x25, 0x0e, 0x9b, 0x1a, 0x9f,
	0x52, 0xc9, 0xbe, 0x1e, 0x1f, 0x4a, 0x7f, 0x1f, 0x1f, 0x4a, 0x6f, 0xc7, 0x87, 0xd2, 0xab, 0x7f,
	0x1d, 0x86, 0x5e, 0x84, 0x7b, 0xdf, 0xdd, 0xc6, 0x58, 0xc1, 0xfc, 0xf2, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x65, 0x51, 0x49, 0xea, 0xa3, 0x15, 0x00, 0x00,
}
