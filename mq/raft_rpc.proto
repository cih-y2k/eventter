syntax = "proto3";

package io.eventter.mq;

option go_package = "mq";

message AppendEntriesRequest {
    uint64 term = 1;
    bytes leader = 2;
    uint64 prev_log_entry = 3;
    uint64 prev_log_term = 4;
    repeated Entry entries = 5;
    uint64 leader_commit_index = 6;

    message Entry {
        uint64 index = 1;
        uint64 term = 2;
        Type type = 3;
        bytes data = 4;

        enum Type {
            COMMAND = 0;
            NOOP = 1;
            ADD_PEER = 2;
            REMOVE_PEER = 3;
            BARRIER = 4;
            CONFIGURATION = 5;
        }
    }
}

message AppendEntriesResponse {
    uint64 term = 1;
    uint64 last_log = 2;
    bool success = 3;
    bool no_retry_backoff = 4;
}

message RequestVoteRequest {
    uint64 term = 1;
    bytes candidate = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message RequestVoteResponse {
    uint64 term = 1;
    bool granted = 2;
}

message InstallSnapshotRequest {
    message Request {
        uint64 term = 1;
        bytes leader = 2;
        uint64 last_log_index = 3;
        uint64 last_log_term = 4;
        bytes configuration = 5;
        uint64 configuration_index = 6;
        int64 size = 7;
    }
    oneof body {
        Request request = 1;
        bytes data = 2;
    }
}

message InstallSnapshotResponse {
    uint64 term = 1;
    bool success = 2;
}

service RaftRPC {
    rpc DoAppendEntries (stream AppendEntriesRequest) returns (stream AppendEntriesResponse);
    rpc DoRequestVote (RequestVoteRequest) returns (RequestVoteResponse);
    rpc DoInstallSnapshot (stream InstallSnapshotRequest) returns (InstallSnapshotResponse);
}
