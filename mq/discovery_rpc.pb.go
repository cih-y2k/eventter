// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: discovery_rpc.proto

package mq

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DiscoveryTunnelledData struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveryTunnelledData) Reset()         { *m = DiscoveryTunnelledData{} }
func (m *DiscoveryTunnelledData) String() string { return proto.CompactTextString(m) }
func (*DiscoveryTunnelledData) ProtoMessage()    {}
func (*DiscoveryTunnelledData) Descriptor() ([]byte, []int) {
	return fileDescriptor_discovery_rpc_95fade601b414461, []int{0}
}
func (m *DiscoveryTunnelledData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveryTunnelledData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveryTunnelledData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DiscoveryTunnelledData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryTunnelledData.Merge(dst, src)
}
func (m *DiscoveryTunnelledData) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveryTunnelledData) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryTunnelledData.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryTunnelledData proto.InternalMessageInfo

func (m *DiscoveryTunnelledData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DiscoveryTunnelledData)(nil), "io.eventter.mq.DiscoveryTunnelledData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DiscoveryRPC service

type DiscoveryRPCClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (DiscoveryRPC_TunnelClient, error)
}

type discoveryRPCClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryRPCClient(cc *grpc.ClientConn) DiscoveryRPCClient {
	return &discoveryRPCClient{cc}
}

func (c *discoveryRPCClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (DiscoveryRPC_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiscoveryRPC_serviceDesc.Streams[0], "/io.eventter.mq.DiscoveryRPC/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryRPCTunnelClient{stream}
	return x, nil
}

type DiscoveryRPC_TunnelClient interface {
	Send(*DiscoveryTunnelledData) error
	Recv() (*DiscoveryTunnelledData, error)
	grpc.ClientStream
}

type discoveryRPCTunnelClient struct {
	grpc.ClientStream
}

func (x *discoveryRPCTunnelClient) Send(m *DiscoveryTunnelledData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoveryRPCTunnelClient) Recv() (*DiscoveryTunnelledData, error) {
	m := new(DiscoveryTunnelledData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DiscoveryRPC service

type DiscoveryRPCServer interface {
	Tunnel(DiscoveryRPC_TunnelServer) error
}

func RegisterDiscoveryRPCServer(s *grpc.Server, srv DiscoveryRPCServer) {
	s.RegisterService(&_DiscoveryRPC_serviceDesc, srv)
}

func _DiscoveryRPC_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryRPCServer).Tunnel(&discoveryRPCTunnelServer{stream})
}

type DiscoveryRPC_TunnelServer interface {
	Send(*DiscoveryTunnelledData) error
	Recv() (*DiscoveryTunnelledData, error)
	grpc.ServerStream
}

type discoveryRPCTunnelServer struct {
	grpc.ServerStream
}

func (x *discoveryRPCTunnelServer) Send(m *DiscoveryTunnelledData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoveryRPCTunnelServer) Recv() (*DiscoveryTunnelledData, error) {
	m := new(DiscoveryTunnelledData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DiscoveryRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.eventter.mq.DiscoveryRPC",
	HandlerType: (*DiscoveryRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tunnel",
			Handler:       _DiscoveryRPC_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "discovery_rpc.proto",
}

func (m *DiscoveryTunnelledData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveryTunnelledData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiscoveryRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintDiscoveryRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DiscoveryTunnelledData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDiscoveryRpc(uint64(l))
	}
	return n
}

func sovDiscoveryRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiscoveryRpc(x uint64) (n int) {
	return sovDiscoveryRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiscoveryTunnelledData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiscoveryRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveryTunnelledData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveryTunnelledData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiscoveryRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiscoveryRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiscoveryRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiscoveryRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiscoveryRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiscoveryRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveryRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiscoveryRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiscoveryRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiscoveryRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiscoveryRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiscoveryRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiscoveryRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("discovery_rpc.proto", fileDescriptor_discovery_rpc_95fade601b414461) }

var fileDescriptor_discovery_rpc_95fade601b414461 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xc9, 0x2c, 0x4e,
	0xce, 0x2f, 0x4b, 0x2d, 0xaa, 0x8c, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0xcb, 0xcc, 0xd7, 0x4b, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0x49, 0x2d, 0xd2, 0xcb, 0x2d, 0x54,
	0xd2, 0xe1, 0x12, 0x73, 0x81, 0x29, 0x0b, 0x29, 0xcd, 0xcb, 0x4b, 0xcd, 0xc9, 0x49, 0x4d, 0x71,
	0x49, 0x2c, 0x49, 0x14, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x09, 0x02, 0xb3, 0x8d, 0x72, 0xb8, 0x78, 0xe0, 0xaa, 0x83, 0x02, 0x9c, 0x85, 0x62, 0xb8,
	0xd8, 0x20, 0x9a, 0x84, 0xd4, 0xf4, 0x50, 0x0d, 0xd6, 0xc3, 0x6e, 0xaa, 0x14, 0x91, 0xea, 0x34,
	0x18, 0x0d, 0x18, 0x9d, 0x44, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0xa2, 0x98, 0x72, 0x0b, 0x93, 0xd8, 0xc0, 0x1e, 0x31, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x64, 0xf5, 0xc4, 0x40, 0xdf, 0x00, 0x00, 0x00,
}
