syntax = "proto3";

package io.eventter.mq;

import "client/eventtermq.proto";
import "cluster_state.proto";
import "gogoproto/gogo.proto";

option go_package = "mq";

message DebugRequest {
}

message DebugResponse {
    // Cluster state dumped to string.
    string cluster_state = 1;
    // Open segments info dumped to string.
    repeated string segments = 2;
}

message SegmentOpenRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    uint64 node_id = 1 [(gogoproto.customname) = "NodeID"];
    NamespaceName owner = 2 [(gogoproto.nullable) = false];
    ClusterSegment.Type type = 3;
}

message SegmentOpenResponse {
    uint64 segment_id = 1 [(gogoproto.customname) = "SegmentID"];
    uint64 primary_node_id = 2 [(gogoproto.customname) = "PrimaryNodeID"];
}

message SegmentCloseRequest {
    // If true and node is not a leader, request will fail.
    bool leader_only = 99;
    uint64 segment_id = 1 [(gogoproto.customname) = "SegmentID"];
    uint64 node_id = 2 [(gogoproto.customname) = "NodeID"];
    int64 size = 3;
    bytes sha1 = 4;
    ClusterUpdateOffsetCommitsCommand offset_commits_update = 5;
}

message SegmentCloseResponse {
}

message SegmentSumRequest {
    uint64 segment_id = 1 [(gogoproto.customname) = "SegmentID"];
    int64 size = 2;
}

message SegmentSumResponse {
    uint64 segment_id = 1 [(gogoproto.customname) = "SegmentID"];
    int64 size = 2;
    bytes sha1 = 3;
}

message SegmentReadRequest {
    uint64 segment_id = 1 [(gogoproto.customname) = "SegmentID"];
    // Read will start at this offset.
    int64 offset = 2;
    // If true, will wait for new messages written to segment.
    bool wait = 3;
}

message SegmentReadResponse {
    uint64 segment_id = 1 [(gogoproto.customname) = "SegmentID"];
    int64 offset = 2;
    bytes data = 3;
}

service NodeRPC {
    rpc Debug (DebugRequest) returns (DebugResponse);
    rpc SegmentOpen (SegmentOpenRequest) returns (SegmentOpenResponse);
    rpc SegmentRotate (SegmentCloseRequest) returns (SegmentOpenResponse);
    rpc SegmentClose (SegmentCloseRequest) returns (SegmentCloseResponse);
    rpc SegmentReplicaClose (SegmentCloseRequest) returns (SegmentCloseResponse);
    rpc SegmentSum (SegmentSumRequest) returns (SegmentSumResponse);
    rpc SegmentRead (SegmentReadRequest) returns (stream SegmentReadResponse);
}
