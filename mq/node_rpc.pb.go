// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node_rpc.proto

package mq

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import client "eventter.io/mq/client"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DebugRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugRequest) Reset()         { *m = DebugRequest{} }
func (m *DebugRequest) String() string { return proto.CompactTextString(m) }
func (*DebugRequest) ProtoMessage()    {}
func (*DebugRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{0}
}
func (m *DebugRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DebugRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugRequest.Merge(dst, src)
}
func (m *DebugRequest) XXX_Size() int {
	return m.Size()
}
func (m *DebugRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugRequest proto.InternalMessageInfo

type DebugResponse struct {
	// Cluster state dumped to string.
	ClusterState string `protobuf:"bytes,1,opt,name=cluster_state,json=clusterState,proto3" json:"cluster_state,omitempty"`
	// Open segments info dumped to string.
	Segments             []string `protobuf:"bytes,2,rep,name=segments" json:"segments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugResponse) Reset()         { *m = DebugResponse{} }
func (m *DebugResponse) String() string { return proto.CompactTextString(m) }
func (*DebugResponse) ProtoMessage()    {}
func (*DebugResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{1}
}
func (m *DebugResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DebugResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugResponse.Merge(dst, src)
}
func (m *DebugResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugResponse proto.InternalMessageInfo

func (m *DebugResponse) GetClusterState() string {
	if m != nil {
		return m.ClusterState
	}
	return ""
}

func (m *DebugResponse) GetSegments() []string {
	if m != nil {
		return m.Segments
	}
	return nil
}

type SegmentOpenRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool                 `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	NodeID               uint64               `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Owner                client.NamespaceName `protobuf:"bytes,2,opt,name=owner" json:"owner"`
	Type                 ClusterSegment_Type  `protobuf:"varint,3,opt,name=type,proto3,enum=io.eventter.mq.ClusterSegment_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SegmentOpenRequest) Reset()         { *m = SegmentOpenRequest{} }
func (m *SegmentOpenRequest) String() string { return proto.CompactTextString(m) }
func (*SegmentOpenRequest) ProtoMessage()    {}
func (*SegmentOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{2}
}
func (m *SegmentOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentOpenRequest.Merge(dst, src)
}
func (m *SegmentOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentOpenRequest proto.InternalMessageInfo

func (m *SegmentOpenRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *SegmentOpenRequest) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *SegmentOpenRequest) GetOwner() client.NamespaceName {
	if m != nil {
		return m.Owner
	}
	return client.NamespaceName{}
}

func (m *SegmentOpenRequest) GetType() ClusterSegment_Type {
	if m != nil {
		return m.Type
	}
	return ClusterSegment_INVALID
}

type SegmentOpenResponse struct {
	SegmentID            uint64   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	PrimaryNodeID        uint64   `protobuf:"varint,2,opt,name=primary_node_id,json=primaryNodeId,proto3" json:"primary_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentOpenResponse) Reset()         { *m = SegmentOpenResponse{} }
func (m *SegmentOpenResponse) String() string { return proto.CompactTextString(m) }
func (*SegmentOpenResponse) ProtoMessage()    {}
func (*SegmentOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{3}
}
func (m *SegmentOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentOpenResponse.Merge(dst, src)
}
func (m *SegmentOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *SegmentOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentOpenResponse proto.InternalMessageInfo

func (m *SegmentOpenResponse) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentOpenResponse) GetPrimaryNodeID() uint64 {
	if m != nil {
		return m.PrimaryNodeID
	}
	return 0
}

type SegmentCloseRequest struct {
	// If true and node is not a leader, request will fail.
	LeaderOnly           bool                               `protobuf:"varint,99,opt,name=leader_only,json=leaderOnly,proto3" json:"leader_only,omitempty"`
	SegmentID            uint64                             `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	NodeID               uint64                             `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Size_                int64                              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Sha1                 []byte                             `protobuf:"bytes,4,opt,name=sha1,proto3" json:"sha1,omitempty"`
	OffsetCommitsUpdate  *ClusterUpdateOffsetCommitsCommand `protobuf:"bytes,5,opt,name=offset_commits_update,json=offsetCommitsUpdate" json:"offset_commits_update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SegmentCloseRequest) Reset()         { *m = SegmentCloseRequest{} }
func (m *SegmentCloseRequest) String() string { return proto.CompactTextString(m) }
func (*SegmentCloseRequest) ProtoMessage()    {}
func (*SegmentCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{4}
}
func (m *SegmentCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentCloseRequest.Merge(dst, src)
}
func (m *SegmentCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentCloseRequest proto.InternalMessageInfo

func (m *SegmentCloseRequest) GetLeaderOnly() bool {
	if m != nil {
		return m.LeaderOnly
	}
	return false
}

func (m *SegmentCloseRequest) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentCloseRequest) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *SegmentCloseRequest) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *SegmentCloseRequest) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

func (m *SegmentCloseRequest) GetOffsetCommitsUpdate() *ClusterUpdateOffsetCommitsCommand {
	if m != nil {
		return m.OffsetCommitsUpdate
	}
	return nil
}

type SegmentCloseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentCloseResponse) Reset()         { *m = SegmentCloseResponse{} }
func (m *SegmentCloseResponse) String() string { return proto.CompactTextString(m) }
func (*SegmentCloseResponse) ProtoMessage()    {}
func (*SegmentCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{5}
}
func (m *SegmentCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentCloseResponse.Merge(dst, src)
}
func (m *SegmentCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *SegmentCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentCloseResponse proto.InternalMessageInfo

type SegmentSumRequest struct {
	SegmentID            uint64   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Size_                int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentSumRequest) Reset()         { *m = SegmentSumRequest{} }
func (m *SegmentSumRequest) String() string { return proto.CompactTextString(m) }
func (*SegmentSumRequest) ProtoMessage()    {}
func (*SegmentSumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{6}
}
func (m *SegmentSumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentSumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentSumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentSumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentSumRequest.Merge(dst, src)
}
func (m *SegmentSumRequest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentSumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentSumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentSumRequest proto.InternalMessageInfo

func (m *SegmentSumRequest) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentSumRequest) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type SegmentSumResponse struct {
	SegmentID            uint64   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Size_                int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sha1                 []byte   `protobuf:"bytes,3,opt,name=sha1,proto3" json:"sha1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentSumResponse) Reset()         { *m = SegmentSumResponse{} }
func (m *SegmentSumResponse) String() string { return proto.CompactTextString(m) }
func (*SegmentSumResponse) ProtoMessage()    {}
func (*SegmentSumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{7}
}
func (m *SegmentSumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentSumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentSumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentSumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentSumResponse.Merge(dst, src)
}
func (m *SegmentSumResponse) XXX_Size() int {
	return m.Size()
}
func (m *SegmentSumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentSumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentSumResponse proto.InternalMessageInfo

func (m *SegmentSumResponse) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentSumResponse) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *SegmentSumResponse) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type SegmentReadRequest struct {
	SegmentID uint64 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// Read will start at this offset.
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// If true, will wait for new messages written to segment.
	Wait                 bool     `protobuf:"varint,3,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentReadRequest) Reset()         { *m = SegmentReadRequest{} }
func (m *SegmentReadRequest) String() string { return proto.CompactTextString(m) }
func (*SegmentReadRequest) ProtoMessage()    {}
func (*SegmentReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{8}
}
func (m *SegmentReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentReadRequest.Merge(dst, src)
}
func (m *SegmentReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *SegmentReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentReadRequest proto.InternalMessageInfo

func (m *SegmentReadRequest) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SegmentReadRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type SegmentReadResponse struct {
	SegmentID            uint64   `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentReadResponse) Reset()         { *m = SegmentReadResponse{} }
func (m *SegmentReadResponse) String() string { return proto.CompactTextString(m) }
func (*SegmentReadResponse) ProtoMessage()    {}
func (*SegmentReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_rpc_830b06f95029e55e, []int{9}
}
func (m *SegmentReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SegmentReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentReadResponse.Merge(dst, src)
}
func (m *SegmentReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *SegmentReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentReadResponse proto.InternalMessageInfo

func (m *SegmentReadResponse) GetSegmentID() uint64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentReadResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SegmentReadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DebugRequest)(nil), "io.eventter.mq.DebugRequest")
	proto.RegisterType((*DebugResponse)(nil), "io.eventter.mq.DebugResponse")
	proto.RegisterType((*SegmentOpenRequest)(nil), "io.eventter.mq.SegmentOpenRequest")
	proto.RegisterType((*SegmentOpenResponse)(nil), "io.eventter.mq.SegmentOpenResponse")
	proto.RegisterType((*SegmentCloseRequest)(nil), "io.eventter.mq.SegmentCloseRequest")
	proto.RegisterType((*SegmentCloseResponse)(nil), "io.eventter.mq.SegmentCloseResponse")
	proto.RegisterType((*SegmentSumRequest)(nil), "io.eventter.mq.SegmentSumRequest")
	proto.RegisterType((*SegmentSumResponse)(nil), "io.eventter.mq.SegmentSumResponse")
	proto.RegisterType((*SegmentReadRequest)(nil), "io.eventter.mq.SegmentReadRequest")
	proto.RegisterType((*SegmentReadResponse)(nil), "io.eventter.mq.SegmentReadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeRPC service

type NodeRPCClient interface {
	Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
	SegmentOpen(ctx context.Context, in *SegmentOpenRequest, opts ...grpc.CallOption) (*SegmentOpenResponse, error)
	SegmentRotate(ctx context.Context, in *SegmentCloseRequest, opts ...grpc.CallOption) (*SegmentOpenResponse, error)
	SegmentClose(ctx context.Context, in *SegmentCloseRequest, opts ...grpc.CallOption) (*SegmentCloseResponse, error)
	SegmentReplicaClose(ctx context.Context, in *SegmentCloseRequest, opts ...grpc.CallOption) (*SegmentCloseResponse, error)
	SegmentSum(ctx context.Context, in *SegmentSumRequest, opts ...grpc.CallOption) (*SegmentSumResponse, error)
	SegmentRead(ctx context.Context, in *SegmentReadRequest, opts ...grpc.CallOption) (NodeRPC_SegmentReadClient, error)
}

type nodeRPCClient struct {
	cc *grpc.ClientConn
}

func NewNodeRPCClient(cc *grpc.ClientConn) NodeRPCClient {
	return &nodeRPCClient{cc}
}

func (c *nodeRPCClient) Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	out := new(DebugResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.NodeRPC/Debug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SegmentOpen(ctx context.Context, in *SegmentOpenRequest, opts ...grpc.CallOption) (*SegmentOpenResponse, error) {
	out := new(SegmentOpenResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.NodeRPC/SegmentOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SegmentRotate(ctx context.Context, in *SegmentCloseRequest, opts ...grpc.CallOption) (*SegmentOpenResponse, error) {
	out := new(SegmentOpenResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.NodeRPC/SegmentRotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SegmentClose(ctx context.Context, in *SegmentCloseRequest, opts ...grpc.CallOption) (*SegmentCloseResponse, error) {
	out := new(SegmentCloseResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.NodeRPC/SegmentClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SegmentReplicaClose(ctx context.Context, in *SegmentCloseRequest, opts ...grpc.CallOption) (*SegmentCloseResponse, error) {
	out := new(SegmentCloseResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.NodeRPC/SegmentReplicaClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SegmentSum(ctx context.Context, in *SegmentSumRequest, opts ...grpc.CallOption) (*SegmentSumResponse, error) {
	out := new(SegmentSumResponse)
	err := c.cc.Invoke(ctx, "/io.eventter.mq.NodeRPC/SegmentSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) SegmentRead(ctx context.Context, in *SegmentReadRequest, opts ...grpc.CallOption) (NodeRPC_SegmentReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeRPC_serviceDesc.Streams[0], "/io.eventter.mq.NodeRPC/SegmentRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCSegmentReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_SegmentReadClient interface {
	Recv() (*SegmentReadResponse, error)
	grpc.ClientStream
}

type nodeRPCSegmentReadClient struct {
	grpc.ClientStream
}

func (x *nodeRPCSegmentReadClient) Recv() (*SegmentReadResponse, error) {
	m := new(SegmentReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeRPC service

type NodeRPCServer interface {
	Debug(context.Context, *DebugRequest) (*DebugResponse, error)
	SegmentOpen(context.Context, *SegmentOpenRequest) (*SegmentOpenResponse, error)
	SegmentRotate(context.Context, *SegmentCloseRequest) (*SegmentOpenResponse, error)
	SegmentClose(context.Context, *SegmentCloseRequest) (*SegmentCloseResponse, error)
	SegmentReplicaClose(context.Context, *SegmentCloseRequest) (*SegmentCloseResponse, error)
	SegmentSum(context.Context, *SegmentSumRequest) (*SegmentSumResponse, error)
	SegmentRead(*SegmentReadRequest, NodeRPC_SegmentReadServer) error
}

func RegisterNodeRPCServer(s *grpc.Server, srv NodeRPCServer) {
	s.RegisterService(&_NodeRPC_serviceDesc, srv)
}

func _NodeRPC_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.NodeRPC/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).Debug(ctx, req.(*DebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SegmentOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SegmentOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.NodeRPC/SegmentOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SegmentOpen(ctx, req.(*SegmentOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SegmentRotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SegmentRotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.NodeRPC/SegmentRotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SegmentRotate(ctx, req.(*SegmentCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SegmentClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SegmentClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.NodeRPC/SegmentClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SegmentClose(ctx, req.(*SegmentCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SegmentReplicaClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SegmentReplicaClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.NodeRPC/SegmentReplicaClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SegmentReplicaClose(ctx, req.(*SegmentCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SegmentSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).SegmentSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.eventter.mq.NodeRPC/SegmentSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).SegmentSum(ctx, req.(*SegmentSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_SegmentRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SegmentReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).SegmentRead(m, &nodeRPCSegmentReadServer{stream})
}

type NodeRPC_SegmentReadServer interface {
	Send(*SegmentReadResponse) error
	grpc.ServerStream
}

type nodeRPCSegmentReadServer struct {
	grpc.ServerStream
}

func (x *nodeRPCSegmentReadServer) Send(m *SegmentReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.eventter.mq.NodeRPC",
	HandlerType: (*NodeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Debug",
			Handler:    _NodeRPC_Debug_Handler,
		},
		{
			MethodName: "SegmentOpen",
			Handler:    _NodeRPC_SegmentOpen_Handler,
		},
		{
			MethodName: "SegmentRotate",
			Handler:    _NodeRPC_SegmentRotate_Handler,
		},
		{
			MethodName: "SegmentClose",
			Handler:    _NodeRPC_SegmentClose_Handler,
		},
		{
			MethodName: "SegmentReplicaClose",
			Handler:    _NodeRPC_SegmentReplicaClose_Handler,
		},
		{
			MethodName: "SegmentSum",
			Handler:    _NodeRPC_SegmentSum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SegmentRead",
			Handler:       _NodeRPC_SegmentRead_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "node_rpc.proto",
}

func (m *DebugRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DebugResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(len(m.ClusterState)))
		i += copy(dAtA[i:], m.ClusterState)
	}
	if len(m.Segments) > 0 {
		for _, s := range m.Segments {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SegmentOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.NodeID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNodeRpc(dAtA, i, uint64(m.Owner.Size()))
	n1, err := m.Owner.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.Type))
	}
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SegmentOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.SegmentID))
	}
	if m.PrimaryNodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.PrimaryNodeID))
	}
	return i, nil
}

func (m *SegmentCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.SegmentID))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.NodeID))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.Size_))
	}
	if len(m.Sha1) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	if m.OffsetCommitsUpdate != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.OffsetCommitsUpdate.Size()))
		n2, err := m.OffsetCommitsUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.LeaderOnly {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		if m.LeaderOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SegmentCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SegmentSumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentSumRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.SegmentID))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *SegmentSumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentSumResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.SegmentID))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.Size_))
	}
	if len(m.Sha1) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(len(m.Sha1)))
		i += copy(dAtA[i:], m.Sha1)
	}
	return i, nil
}

func (m *SegmentReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.SegmentID))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.Offset))
	}
	if m.Wait {
		dAtA[i] = 0x18
		i++
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SegmentReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentReadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SegmentID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.SegmentID))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(m.Offset))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNodeRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintNodeRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DebugRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DebugResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterState)
	if l > 0 {
		n += 1 + l + sovNodeRpc(uint64(l))
	}
	if len(m.Segments) > 0 {
		for _, s := range m.Segments {
			l = len(s)
			n += 1 + l + sovNodeRpc(uint64(l))
		}
	}
	return n
}

func (m *SegmentOpenRequest) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovNodeRpc(uint64(m.NodeID))
	}
	l = m.Owner.Size()
	n += 1 + l + sovNodeRpc(uint64(l))
	if m.Type != 0 {
		n += 1 + sovNodeRpc(uint64(m.Type))
	}
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *SegmentOpenResponse) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovNodeRpc(uint64(m.SegmentID))
	}
	if m.PrimaryNodeID != 0 {
		n += 1 + sovNodeRpc(uint64(m.PrimaryNodeID))
	}
	return n
}

func (m *SegmentCloseRequest) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovNodeRpc(uint64(m.SegmentID))
	}
	if m.NodeID != 0 {
		n += 1 + sovNodeRpc(uint64(m.NodeID))
	}
	if m.Size_ != 0 {
		n += 1 + sovNodeRpc(uint64(m.Size_))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovNodeRpc(uint64(l))
	}
	if m.OffsetCommitsUpdate != nil {
		l = m.OffsetCommitsUpdate.Size()
		n += 1 + l + sovNodeRpc(uint64(l))
	}
	if m.LeaderOnly {
		n += 3
	}
	return n
}

func (m *SegmentCloseResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SegmentSumRequest) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovNodeRpc(uint64(m.SegmentID))
	}
	if m.Size_ != 0 {
		n += 1 + sovNodeRpc(uint64(m.Size_))
	}
	return n
}

func (m *SegmentSumResponse) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovNodeRpc(uint64(m.SegmentID))
	}
	if m.Size_ != 0 {
		n += 1 + sovNodeRpc(uint64(m.Size_))
	}
	l = len(m.Sha1)
	if l > 0 {
		n += 1 + l + sovNodeRpc(uint64(l))
	}
	return n
}

func (m *SegmentReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovNodeRpc(uint64(m.SegmentID))
	}
	if m.Offset != 0 {
		n += 1 + sovNodeRpc(uint64(m.Offset))
	}
	if m.Wait {
		n += 2
	}
	return n
}

func (m *SegmentReadResponse) Size() (n int) {
	var l int
	_ = l
	if m.SegmentID != 0 {
		n += 1 + sovNodeRpc(uint64(m.SegmentID))
	}
	if m.Offset != 0 {
		n += 1 + sovNodeRpc(uint64(m.Offset))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNodeRpc(uint64(l))
	}
	return n
}

func sovNodeRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNodeRpc(x uint64) (n int) {
	return sovNodeRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DebugRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ClusterSegment_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNodeID", wireType)
			}
			m.PrimaryNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryNodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetCommitsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetCommitsUpdate == nil {
				m.OffsetCommitsUpdate = &ClusterUpdateOffsetCommitsCommand{}
			}
			if err := m.OffsetCommitsUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentSumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentSumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentSumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentSumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentSumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentSumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha1 = append(m.Sha1[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha1 == nil {
				m.Sha1 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentID", wireType)
			}
			m.SegmentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNodeRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNodeRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNodeRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNodeRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNodeRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("node_rpc.proto", fileDescriptor_node_rpc_830b06f95029e55e) }

var fileDescriptor_node_rpc_830b06f95029e55e = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x73, 0xd2, 0x5e,
	0x10, 0x6f, 0x80, 0xd2, 0xb2, 0x05, 0xfe, 0xd3, 0xd7, 0xfe, 0x2b, 0xc3, 0x58, 0xc0, 0xe0, 0x81,
	0x83, 0x43, 0x6d, 0x3d, 0x38, 0x5e, 0x0b, 0x97, 0x5e, 0xda, 0xce, 0xc3, 0x3a, 0xea, 0x05, 0xd3,
	0x64, 0x8b, 0x71, 0x92, 0xbc, 0x90, 0x3c, 0xec, 0xe0, 0xc1, 0xcf, 0xe0, 0xd1, 0x8f, 0xd4, 0x93,
	0xe3, 0x27, 0x60, 0x1c, 0xbc, 0xfb, 0x19, 0x9c, 0xbc, 0xf7, 0x08, 0xa1, 0x1a, 0xac, 0x8c, 0x27,
	0x76, 0x37, 0xbb, 0xbf, 0xdd, 0xfd, 0xed, 0xee, 0x03, 0xca, 0x1e, 0xb3, 0xb0, 0x1f, 0xf8, 0x66,
	0xdb, 0x0f, 0x18, 0x67, 0xa4, 0x6c, 0xb3, 0x36, 0xbe, 0x47, 0x8f, 0x73, 0x0c, 0xda, 0xee, 0xb0,
	0x7a, 0xcf, 0x74, 0x6c, 0xf4, 0xf8, 0xc1, 0xcc, 0xe6, 0x0e, 0xa5, 0x63, 0x75, 0xc7, 0x74, 0x46,
	0x21, 0xc7, 0xa0, 0x1f, 0x72, 0x83, 0xa3, 0x32, 0xee, 0x0e, 0xd8, 0x80, 0x09, 0xf1, 0x20, 0x92,
	0xa4, 0x55, 0x2f, 0x43, 0xb1, 0x8b, 0x97, 0xa3, 0x01, 0xc5, 0xe1, 0x08, 0x43, 0xae, 0x9f, 0x43,
	0x49, 0xe9, 0xa1, 0xcf, 0xbc, 0x10, 0x49, 0x13, 0x4a, 0x0b, 0x68, 0x15, 0xad, 0xa1, 0xb5, 0x0a,
	0xb4, 0xa8, 0x8c, 0xbd, 0xc8, 0x46, 0xaa, 0xb0, 0x19, 0xe2, 0xc0, 0x45, 0x8f, 0x87, 0x95, 0x4c,
	0x23, 0xdb, 0x2a, 0xd0, 0x58, 0xd7, 0xbf, 0x68, 0x40, 0x7a, 0x52, 0x39, 0xf3, 0xd1, 0x53, 0x89,
	0x48, 0x13, 0x36, 0x44, 0x7b, 0xb6, 0x25, 0x10, 0x73, 0xc7, 0x30, 0x9d, 0xd4, 0xf3, 0xa7, 0xcc,
	0xc2, 0x93, 0x2e, 0xcd, 0x47, 0x9f, 0x4e, 0x2c, 0xf2, 0x0c, 0xd6, 0xd9, 0xb5, 0x87, 0x41, 0x25,
	0xd3, 0xd0, 0x5a, 0x5b, 0x47, 0xfb, 0xed, 0x45, 0x06, 0xda, 0xa7, 0x86, 0x8b, 0xa1, 0x6f, 0x98,
	0x18, 0x09, 0xc7, 0xb9, 0x9b, 0x49, 0x7d, 0x8d, 0xca, 0x08, 0xf2, 0x14, 0x72, 0x7c, 0xec, 0x63,
	0x25, 0xdb, 0xd0, 0x5a, 0xe5, 0xa3, 0xe6, 0xed, 0xc8, 0x8e, 0x2a, 0x5f, 0x16, 0xd6, 0x7e, 0x3e,
	0xf6, 0x91, 0x8a, 0x00, 0x52, 0x87, 0x2d, 0x07, 0x0d, 0x0b, 0x83, 0x3e, 0xf3, 0x9c, 0x71, 0xc5,
	0x6c, 0x68, 0xad, 0x4d, 0x0a, 0xd2, 0x74, 0xe6, 0x39, 0x63, 0xfd, 0x23, 0xec, 0x2c, 0xf4, 0xa3,
	0x88, 0x7a, 0x04, 0xa0, 0x7a, 0x9e, 0xf7, 0x54, 0x9a, 0x4e, 0xea, 0x05, 0xe5, 0x7c, 0xd2, 0xa5,
	0x05, 0xe5, 0x20, 0x3a, 0xfb, 0xcf, 0x0f, 0x6c, 0xd7, 0x08, 0xc6, 0xfd, 0x19, 0x0d, 0x19, 0x11,
	0xb2, 0x3d, 0x9d, 0xd4, 0x4b, 0xe7, 0xf2, 0x93, 0x62, 0xa3, 0xe4, 0x27, 0x54, 0x4b, 0xff, 0x9c,
	0x89, 0x0b, 0xe8, 0x38, 0x2c, 0xc4, 0x19, 0xa3, 0x7f, 0x57, 0x40, 0x82, 0xff, 0x4c, 0x2a, 0xff,
	0x04, 0x72, 0xa1, 0xfd, 0x41, 0x92, 0x98, 0xa5, 0x42, 0x16, 0xb6, 0xb7, 0xc6, 0x61, 0x25, 0xd7,
	0xd0, 0x5a, 0x45, 0x2a, 0x64, 0x82, 0xf0, 0x3f, 0xbb, 0xba, 0x0a, 0x91, 0xf7, 0x4d, 0xe6, 0xba,
	0x36, 0x0f, 0xfb, 0x23, 0xdf, 0x8a, 0x96, 0x65, 0x5d, 0xcc, 0xed, 0x30, 0x85, 0xfd, 0x0b, 0xe1,
	0x74, 0x26, 0x22, 0x3b, 0x32, 0x30, 0xfa, 0x31, 0x3c, 0x8b, 0xee, 0xb0, 0xa4, 0x55, 0x3a, 0xfe,
	0x79, 0x34, 0x7b, 0xb0, 0xbb, 0xc8, 0x8c, 0x9c, 0x8d, 0x7e, 0x01, 0xdb, 0xca, 0xde, 0x1b, 0xb9,
	0xab, 0xf1, 0x35, 0xa3, 0x22, 0x33, 0xa7, 0x42, 0x7f, 0x17, 0x6f, 0xb6, 0x80, 0x5d, 0x69, 0x11,
	0x7e, 0x83, 0x1b, 0x53, 0x9c, 0x9d, 0x53, 0xac, 0x7b, 0x71, 0x2e, 0x8a, 0x86, 0xb5, 0x5a, 0x0f,
	0x7b, 0x90, 0x97, 0xb4, 0xaa, 0x6c, 0x4a, 0x8b, 0xf2, 0x5d, 0x1b, 0x36, 0x17, 0xf9, 0x36, 0xa9,
	0x90, 0x75, 0x16, 0x2f, 0x99, 0xcc, 0xb7, 0x52, 0x73, 0x4b, 0x12, 0x5a, 0x06, 0x37, 0x66, 0x0d,
	0x46, 0xf2, 0xd1, 0x8f, 0x1c, 0x6c, 0x44, 0xeb, 0x47, 0xcf, 0x3b, 0xa4, 0x0b, 0xeb, 0xe2, 0x15,
	0x22, 0xf7, 0x6f, 0x6f, 0x4e, 0xf2, 0xb1, 0xaa, 0xee, 0xa7, 0x7c, 0x55, 0xb5, 0xbe, 0x80, 0xad,
	0xc4, 0xa1, 0x12, 0xfd, 0xb6, 0xf7, 0xaf, 0xaf, 0x52, 0xb5, 0xb9, 0xd4, 0x47, 0xe1, 0xbe, 0x82,
	0xd2, 0x8c, 0x1a, 0x26, 0x9e, 0xbf, 0xb4, 0xa8, 0xe4, 0x79, 0xde, 0x15, 0xba, 0x98, 0x8c, 0xbd,
	0x1b, 0xf2, 0xc3, 0xe5, 0x4e, 0x0a, 0xfa, 0x4d, 0x62, 0xa0, 0xbe, 0x63, 0x9b, 0xc6, 0x3f, 0xcf,
	0xd0, 0x03, 0x98, 0x9f, 0x03, 0x79, 0x90, 0x12, 0x33, 0xbf, 0xc0, 0xaa, 0xbe, 0xcc, 0x45, 0x81,
	0xbe, 0x8c, 0x87, 0x18, 0xed, 0x61, 0xea, 0x10, 0x13, 0x47, 0x91, 0xca, 0x74, 0x72, 0x91, 0x1f,
	0x6b, 0xc7, 0xbb, 0x37, 0xd3, 0x9a, 0xf6, 0x75, 0x5a, 0xd3, 0xbe, 0x4d, 0x6b, 0xda, 0xa7, 0xef,
	0xb5, 0xb5, 0xd7, 0x19, 0x77, 0x78, 0x99, 0x17, 0xff, 0x8b, 0x4f, 0x7e, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x4a, 0x49, 0xec, 0x42, 0x7d, 0x07, 0x00, 0x00,
}
